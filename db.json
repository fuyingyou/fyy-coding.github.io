{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":1,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/Lambda表达式和Stream API.md","hash":"03bd334e6b577878411ec72c0f09a8d73c4d99d3","modified":1710491009134},{"_id":"source/_posts/201912-1报数问题.md","hash":"3056287a8271d7cf554bc886becb2e8afeda4793","modified":1710503642590},{"_id":"source/_posts/IDEA换源.md","hash":"a2509c57badfd55698470b7d9d9b7d00cb98e428","modified":1710503583388},{"_id":"source/_posts/LeetCode 901. 股票价格跨度.md","hash":"b2ae268f7881a8b6a70ce0f96876d65b0718630c","modified":1710503597466},{"_id":"source/_posts/Java新版本的重要语言特性（9-17）.md","hash":"394f7f6031183b06859b121f6aabb46e19450d18","modified":1710491002630},{"_id":"source/_posts/LeetCode 1700. 无法吃午餐的学生数量.md","hash":"ac1596019d9f3f83ad56be45893347ce55165dd4","modified":1710491010797},{"_id":"source/_posts/LeetCode1048 最长字符串链.md","hash":"09c90d87063516963fc67f0d3901f00bf0a92806","modified":1710491008152},{"_id":"source/_posts/LeetCode1387 将整数按权重排序.md","hash":"4691e3db98835188cbcb20e95cf803676e0d60fc","modified":1710491006722},{"_id":"source/_posts/LeetCode1218 最长定差子序列.md","hash":"35ea05eed9a69d1d51e2d6929d50f511f8394883","modified":1710491007545},{"_id":"source/_posts/LeetCode1578. 使绳子变成彩色的最短时间.md","hash":"15b5bae451e42b75ed200c43637cc19c45f4b1e1","modified":1710491005717},{"_id":"source/_posts/Leetcode 779. 第K个语法符号.md","hash":"e6cfad273bcdde1820862912a33dd4eecfcc5b84","modified":1710491012818},{"_id":"source/_posts/MySQL基本语法.md","hash":"a29b592990da8630ec5bd867cadfe5ce7718665a","modified":1710491003476},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":499162500000},{"_id":"source/_posts/Win10在VMware中安装Ubuntu18.04.5.md","hash":"8e9d4839d5df7d30f61fdbed6010fbe797b75f95","modified":1710491021194},{"_id":"source/_posts/OS Expe 02 线程的同步.md","hash":"2423586363c6078a7f0a516eed73c8dd57d6fd97","modified":1710503617341},{"_id":"source/_posts/mongo的include方法踩坑.md","hash":"3bf7c90ca6f43f33a57b2197dc13cfbc54de35f4","modified":1710491004269},{"_id":"source/_posts/Z字变换（Java实现）Leetcode 6.md","hash":"ed00f614f56faa028fc02fe61e6e3f6b7a3f41f7","modified":1710491031713},{"_id":"source/_posts/python爬取51job的招聘信息.md","hash":"f545576c2513d959b7bd047094002f42ff26fc9b","modified":1710491037909},{"_id":"source/_posts/三角形最大周长算法.md","hash":"40635c8bcbe3ffd3d9bd1249c61ad943dc826a95","modified":1710491033193},{"_id":"source/_posts/二叉树的锯齿形层序遍历(Java实现).md","hash":"f727a64b1be3b397be6295215b3b9b7b4d6e20e3","modified":1710503533553},{"_id":"source/_posts/去除重复字母（Java实现）.md","hash":"4bb4ec0fe4e8eadc30177007e54ca3e18d66068b","modified":1710491026006},{"_id":"source/_posts/分发糖果（Java实现）.md","hash":"9d66494e8d69252c3ce59b0ca0aee16f14049c1b","modified":1710491029764},{"_id":"source/_posts/变进制数-算法.md","hash":"ac12cdb32936c05af0d89f4220c834bbb7cf03a0","modified":1710503123702},{"_id":"source/_posts/回溯算法之八皇后问题（Java实现）.md","hash":"8ff16e0be5b9552d864d945cca759252f10d2390","modified":1710491026837},{"_id":"source/_posts/多数元素（leetcode169）.md","hash":"782d4622de4ba6d6379c1b630d3781dbcaa95421","modified":1710491014659},{"_id":"source/_posts/回溯算法之装载问题（Java实现）.md","hash":"25255c7d1a82e28390a19f53af389a526305ae77","modified":1710491027580},{"_id":"source/_posts/字符串需要至少多少次移动才能回文呢.md","hash":"7e8ec5c0d5e57169c43e15af77e911790c394376","modified":1710491040768},{"_id":"source/_posts/岛屿的周长-LeetCode463.md","hash":"9814d22aa4a4c343ae6816d2c10f84558e1614b3","modified":1710503138970},{"_id":"source/_posts/实验三、数据挖掘之决策树.md","hash":"620be5c19513e84b389673dc8827356dc6d5aa0b","modified":1710491016244},{"_id":"source/_posts/布隆过滤器和布谷鸟过滤器.md","hash":"30ea1926f38a868aa340769ece44bcbbf0fcf3e6","modified":1710491009881},{"_id":"source/_posts/测试文章.md","hash":"344b6c899edf2355ae8f4c36618c6c07c1bd197a","modified":1710556147836},{"_id":"source/_posts/数据处理之Numpy-入门篇.md","hash":"b7463219b680e000fc0413451ff9bfe21292d384","modified":1710503570186},{"_id":"source/_posts/数据处理之Matplotlib-入门篇.md","hash":"1e8ecab1f0daf60e556f3e4a2d099df7a26e9b0e","modified":1710503562920},{"_id":"source/_posts/矩形面积重叠---蓝桥杯训练题.md","hash":"5d186be52917501b561580daf773e8982a8b020d","modified":1710491039866},{"_id":"source/_posts/矩阵的幂运算--蓝桥杯.md","hash":"cef735b15e5419ce3bce07d31a161a22c7699bdb","modified":1710503545207},{"_id":"source/_posts/螺旋矩阵——蓝桥杯模拟题.md","hash":"39d6b88d8cfbd96d6b70710da9d263a9515ef2c9","modified":1710491043174},{"_id":"source/_posts/线程的创建与撤销 c++.md","hash":"daedf7932d169fd63fe647dbc53381375c2b18ed","modified":1710503575139},{"_id":"source/about/index.md","hash":"9d51c906628795c875e41508d94968cde2627207","modified":1710556092122},{"_id":"source/_posts/识别图中模糊的手写数字（菜鸟做法）.md","hash":"3ece219782be88452971e25ac997f04ac4771ed1","modified":1710503556015},{"_id":"source/_posts/计算力扣银行的钱（leetcode1716）.md","hash":"a8dddd158293c729ec14435fa934188f70bc7b19","modified":1710491013845},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1702719015000},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1702719015000},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1702719015000},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1702719015000},{"_id":"themes/fluid/.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1702719015000},{"_id":"themes/fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1702719015000},{"_id":"themes/fluid/README.md","hash":"ff9b0e1fb9dba665af2f1e4a577f8cb9e840464b","modified":1702719015000},{"_id":"themes/fluid/README_en.md","hash":"365184a73af40e7365504c3077f3d80dfee1d80e","modified":1702719015000},{"_id":"themes/fluid/_config.yml","hash":"e38f328b625105d4e1dfd080a98fc1401f8acab7","modified":1710565055889},{"_id":"themes/fluid/package.json","hash":"c640b57695b7b6002399711f1a7708b0f6c05b84","modified":1702719015000},{"_id":"themes/fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1702719015000},{"_id":"themes/fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1702719015000},{"_id":"themes/fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1702719015000},{"_id":"themes/fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1702719015000},{"_id":"themes/fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1702719015000},{"_id":"themes/fluid/languages/ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":1702719015000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"2253e1bc61694b3bdc5e434ea2660d13d941b50e","modified":1702719015000},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1702719015000},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1702719015000},{"_id":"themes/fluid/layout/404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":1702719015000},{"_id":"themes/fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1702719015000},{"_id":"themes/fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1702719015000},{"_id":"themes/fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1702719015000},{"_id":"themes/fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1702719015000},{"_id":"themes/fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1702719015000},{"_id":"themes/fluid/layout/index.ejs","hash":"33c3317cdcee062789de2336dd8d0cc7f86d3650","modified":1702719015000},{"_id":"themes/fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1702719015000},{"_id":"themes/fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1702719015000},{"_id":"themes/fluid/layout/post.ejs","hash":"9bf0d357a607a282f3b9cb04525a4df0cc2a8b76","modified":1702719015000},{"_id":"themes/fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1702719015000},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1702719015000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"554c0d0e086a0784d83ee71c83f8bceeb60aecc8","modified":1702719015000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"c8b0d49c49e3c88872fd3b37909345ff5b2b6aa0","modified":1702719015000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1702719015000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1702719015000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1702719015000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"fff07ce0472afc368d388637cb9d438195da9b5b","modified":1702719015000},{"_id":"themes/fluid/.github/workflows/cr.yaml","hash":"19a8a00f5ba9607d82265572fe1202b64a8b0822","modified":1702719015000},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1702719015000},{"_id":"themes/fluid/.github/workflows/publish.yaml","hash":"6f02e6440d88629229556e3fd47d0280fe2240db","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"d707c47b2638c94e489bc43d4cfd098b7c58447f","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1702719015000},{"_id":"themes/fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1702719015000},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1702719015000},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1702719015000},{"_id":"themes/fluid/scripts/generators/index-generator.js","hash":"9159fc22fa84a7b605dd15fe4104f01fe9c71147","modified":1702719015000},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"82bb06686158ebe160a631c79f156cd4fde35656","modified":1702719015000},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d3e75f53c59674d171309e50702954671f31f1a4","modified":1702719015000},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"9ac5ddad06e9b0e6015ce531430018182a4bc0fa","modified":1702719015000},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1702719015000},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1702719015000},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1702719015000},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"8e67b522c47aa250860e3fe2c733f1f958a506c0","modified":1702719015000},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1702719015000},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1702719015000},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1702719015000},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1702719015000},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"4d48c424e47ff9a17a563167ea5f480890267adf","modified":1702719015000},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"966689d7c5e4320008285395fbaa2751f6209be5","modified":1702719015000},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1702719015000},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"0857aa86db2a711ae5c77218a9e3fa686d0e87b1","modified":1702719015000},{"_id":"themes/fluid/scripts/tags/fold.js","hash":"73e4fd12ce3e47981479391ed354b7d9d3279f70","modified":1702719015000},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1702719015000},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1702719015000},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1702719015000},{"_id":"themes/fluid/scripts/tags/note.js","hash":"e3b456a079e5dc0032473b516c865b20f83d2c26","modified":1702719015000},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1702719015000},{"_id":"themes/fluid/scripts/utils/crypto.js","hash":"ae4ad8a188ef5b3fa6818b01629fc962b3de8551","modified":1702719015000},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1702719015000},{"_id":"themes/fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1702719015000},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1702719015000},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1702719015000},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1702719015000},{"_id":"themes/fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1702719015000},{"_id":"themes/fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1702719015000},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1702719015000},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1702719015000},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1702719015000},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1702719015000},{"_id":"themes/fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1702719015000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"c5939d14065d38c86e16d1642e154dde5a23e830","modified":1702719015000},{"_id":"themes/fluid/source/js/events.js","hash":"5891534506b959a2f559f29e122baa3eb9159d93","modified":1702719015000},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1702719015000},{"_id":"themes/fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1702719015000},{"_id":"themes/fluid/source/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1702719015000},{"_id":"themes/fluid/source/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1702719015000},{"_id":"themes/fluid/source/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1702719015000},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/comments/discuss.ejs","hash":"98d065b58ce06b7d18bff3c974e96fa0f34ae03a","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"d84bcb5ccd78470a60c067fc914ac0ac67ac8777","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"37d750428772d7c71ba36ce0c2540780d90fadea","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"4f68c80bd1395e2f6d11e373116e54de11cb62e8","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"0fff24cf5bf99fbe5c56c292e2eac4a89bf29db4","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"03ac02762f801970d1c4e73d6ec8d4c503780e50","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/plugins/moment.ejs","hash":"4ff3fb1b60ccc95a0af3bbdbd0757fedefc088b5","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"f345374885cd6a334f09a11f59c443b5d577c06c","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"375974ec017696e294dc12469fb0ae257800dc2d","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"529f3069742b3d338c769ba2d836e7f3c342a09d","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1702719015000},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":1702719015000},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"c19ac8050b82c3676b0332a56099ccfcc36d9d52","modified":1702719015000},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1702719015000},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"bd8376e1cf7892dc2daa58f2f443574be559fdbf","modified":1702719015000},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1702719015000},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"a5fe1deccb73b5f578797dbb11038efc15f63ce8","modified":1702719015000},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1702719015000},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1702719015000},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1702719015000},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1702719015000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1702719015000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1702719015000},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1702719015000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1702719015000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1702719015000},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"85492ef64d7e5f70f0f7e46d570bbc911e686d7e","modified":1702719015000},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1702719015000},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1702719015000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"25fb6fa4c783b847c632584c49a7e1593cdb2f5d","modified":1702719015000},{"_id":"themes/fluid/source/css/_pages/_base/print.styl","hash":"166afbc596ea4b552bad7290ec372d25ec34db7b","modified":1702719015000},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1702719015000},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1702719015000},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1702719015000},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1702719015000},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1702719015000},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1702719015000},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1702719015000},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"cd432a6411ccac7df47e6a300fb1a872cfc763e7","modified":1702719015000},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"c96d36aa8fe20f0c3c1a29ee2473cd8064b10f73","modified":1702719015000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1702719015000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1702719015000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1702719015000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1702719015000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1702719015000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1702719015000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1702719015000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1702719015000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"c4459248c66ea1326feed021179b847ae91d465f","modified":1702719015000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1702719015000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1702719015000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1702719015000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1702719015000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1702719015000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1702719015000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1702719015000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1702719015000},{"_id":"themes/fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1702719015000},{"_id":"public/local-search.xml","hash":"e82a358c50cddf4cdf9f8eddbfcd98062b43db4b","modified":1710571567588},{"_id":"public/about/index.html","hash":"30d6682a4edfd4386226330b6e70c2987d2e1b7a","modified":1710571567588},{"_id":"public/2024/03/16/hello-world/index.html","hash":"4fb9afb1ef30068db46eb5d41e3a4f32662b04e9","modified":1710571567588},{"_id":"public/2024/03/16/测试文章/index.html","hash":"fa71fcdc8e358b66e60bf79bdeee3c61c689fdcb","modified":1710571567588},{"_id":"public/2023/09/21/Java新版本的重要语言特性（9-17）/index.html","hash":"3bc19f51bfe749cd539b57a349c2804c7aef367d","modified":1710571567588},{"_id":"public/2023/08/28/MySQL基本语法/index.html","hash":"89d8144a47d435055a1590bb9d080087330e3fef","modified":1710571567588},{"_id":"public/2023/08/21/mongo的include方法踩坑/index.html","hash":"5a99a5619bc7000d9a33b50452a240ab44c18d39","modified":1710571567588},{"_id":"public/2023/08/19/Lambda表达式和Stream API/index.html","hash":"4ccadac18d58715d831bd9abbc6b59a48c753dbd","modified":1710571567588},{"_id":"public/2023/08/19/LeetCode1578. 使绳子变成彩色的最短时间/index.html","hash":"c41956e4deaf267feeac2f123c677527cd2f5bea","modified":1710571567588},{"_id":"public/2023/08/19/布隆过滤器和布谷鸟过滤器/index.html","hash":"360e43064397937ee190c68d6e3f6a7ca3abb3be","modified":1710571567588},{"_id":"public/2023/08/19/LeetCode1048 最长字符串链/index.html","hash":"4899ebb59918f7d61a033ed1b480ab4801e5e047","modified":1710571567588},{"_id":"public/2023/08/19/LeetCode1387 将整数按权重排序/index.html","hash":"d5c59aff0b98902b36206cd99e8da448892c49f6","modified":1710571567588},{"_id":"public/2023/08/19/LeetCode1218 最长定差子序列/index.html","hash":"19ee3d72744bdb20bd7f1aea04f4822ec5f6a515","modified":1710571567588},{"_id":"public/2022/10/21/LeetCode 1700. 无法吃午餐的学生数量/index.html","hash":"0fb117c7c43d1bf2b1e41b3f7215cae0b052d0ec","modified":1710571567588},{"_id":"public/2022/10/21/LeetCode 901. 股票价格跨度/index.html","hash":"a115c0c7b1fd5f5b790f393b9b2ad46b4a1f7803","modified":1710571567588},{"_id":"public/2022/10/21/Leetcode 779. 第K个语法符号/index.html","hash":"3e51326ab7f37ac3e3a274d7208edc971048d12e","modified":1710571567588},{"_id":"public/2022/03/28/Z字变换（Java实现）Leetcode 6/index.html","hash":"bc7e8eb605d6747c12ac99ab03063e0e1a444a72","modified":1710571567588},{"_id":"public/2022/01/15/计算力扣银行的钱（leetcode1716）/index.html","hash":"3f03278636af1e097126503f12a148fae25ae84c","modified":1710571567588},{"_id":"public/2022/01/13/多数元素（leetcode169）/index.html","hash":"802225fb55e6dde9904c6b2a47954e3dc2bb78b8","modified":1710571567588},{"_id":"public/2021/04/13/实验三、数据挖掘之决策树/index.html","hash":"336e568d138ca6c4a95a904d74c726a2d6f8369b","modified":1710571567588},{"_id":"public/2021/04/09/Win10在VMware中安装Ubuntu18.04.5/index.html","hash":"148cdc1d4dc74c7165cb9a0b36d28fbf847a4181","modified":1710571567588},{"_id":"public/2021/04/06/数据处理之Matplotlib-入门篇/index.html","hash":"4d71d48beca35145a37c9a777e668842563a72a9","modified":1710571567588},{"_id":"public/2021/04/06/数据处理之Numpy-入门篇/index.html","hash":"c5b9aaa658c516922df313179e9f5f56acab9c2a","modified":1710571567588},{"_id":"public/2021/04/06/去除重复字母（Java实现）/index.html","hash":"9764ca9364dd070a133c1e4d31c8d909f2c7c719","modified":1710571567588},{"_id":"public/2021/04/06/回溯算法之八皇后问题（Java实现）/index.html","hash":"e7abd4ef465485386558bf108ec70bf22679bd52","modified":1710571567588},{"_id":"public/2021/04/06/回溯算法之装载问题（Java实现）/index.html","hash":"0b2faabf76930d1aeaca6c29e4b20d1c3453bbd3","modified":1710571567588},{"_id":"public/2021/04/06/二叉树的锯齿形层序遍历(Java实现)/index.html","hash":"6f96c1e3ff112d4704820126dd358b896aadf01a","modified":1710571567588},{"_id":"public/2021/04/06/分发糖果（Java实现）/index.html","hash":"9b721e695505874c806ff1108b716419843cfe0e","modified":1710571567588},{"_id":"public/2021/04/06/IDEA换源/index.html","hash":"7612e752486f5bcc9da8604209be30e2be15bfb8","modified":1710571567588},{"_id":"public/2020/11/29/三角形最大周长算法/index.html","hash":"54ff61e544052ea9f18a87a4868f48a5f60a7f1a","modified":1710571567588},{"_id":"public/2020/11/29/变进制数-算法/index.html","hash":"2935823b663d1658d96b66570072f30d08614bd3","modified":1710571567588},{"_id":"public/2020/11/29/识别图中模糊的手写数字（菜鸟做法）/index.html","hash":"276df5abc9e6a16cad505027630a3fc2c171bf00","modified":1710571567588},{"_id":"public/2020/11/01/岛屿的周长-LeetCode463/index.html","hash":"6ae3a70c28420bd2c2a94fb018278c2e87ce21fd","modified":1710571567588},{"_id":"public/2020/04/29/python爬取51job的招聘信息/index.html","hash":"5c81de5b7ab602b2e4a9f754ace898b86febcc83","modified":1710571567588},{"_id":"public/2020/04/24/矩阵的幂运算--蓝桥杯/index.html","hash":"d06fbb6d45805d2298aa2f1da6f94e56269d6a12","modified":1710571567588},{"_id":"public/2020/04/24/矩形面积重叠---蓝桥杯训练题/index.html","hash":"8c721aa86431f121c3ed732f8ef31a94641a0ab3","modified":1710571567588},{"_id":"public/2020/04/24/字符串需要至少多少次移动才能回文呢/index.html","hash":"2c76c1a966962e8a6ccd1c1866ba8aa02a890a23","modified":1710571567588},{"_id":"public/2020/04/21/OS Expe 02 线程的同步/index.html","hash":"474a65d1d4622c4db4ce83a61fed47da3d7635f4","modified":1710571567588},{"_id":"public/2020/04/18/螺旋矩阵——蓝桥杯模拟题/index.html","hash":"2550a4b6c258bf0ec8b4bad42794ed9e5b2f1325","modified":1710571567588},{"_id":"public/2020/04/18/线程的创建与撤销 c++/index.html","hash":"458ed1b216109b82ce83ab96bd0f8bcd5059daf5","modified":1710571567588},{"_id":"public/2020/04/18/201912-1报数问题/index.html","hash":"a1a38d9afc27e66c5d22264dd5d7d8a4b5b0d277","modified":1710571567588},{"_id":"public/categories/java/index.html","hash":"9ad35aa77209be2b26a4c72cfb5a036fa81f7566","modified":1710571567588},{"_id":"public/categories/Java学习/index.html","hash":"a6bd1e9cf354ae4d0e87f0c18a2bdd2df49cef58","modified":1710571567588},{"_id":"public/categories/算法/index.html","hash":"6829593bc11fda0409e86b9f6bc85e19afe80444","modified":1710571567588},{"_id":"public/categories/算法/page/2/index.html","hash":"fe62d5ea42d59d3828f65a8120a36a3c22e1a642","modified":1710571567588},{"_id":"public/categories/算法/page/3/index.html","hash":"d280df568b2ea5baa3b48c000536a89e35365b2e","modified":1710571567588},{"_id":"public/categories/mysql/index.html","hash":"6f5bebe63d94d34bbc99510bbe3e0d204f383768","modified":1710571567588},{"_id":"public/categories/其它/index.html","hash":"8ad446a82c9fe70c7b2ee483bb8a75071205318e","modified":1710571567588},{"_id":"public/categories/数据库/index.html","hash":"d37d1a3242c60b284b7c23e1b61f355f0cf82608","modified":1710571567588},{"_id":"public/archives/index.html","hash":"a2edd1d58916241d4511764f8045872aaf74da0b","modified":1710571567588},{"_id":"public/archives/page/2/index.html","hash":"eab1bf29db1e53c36445c089e81aaf4f2131c8e7","modified":1710571567588},{"_id":"public/archives/page/3/index.html","hash":"de58af7778be9cab947a07d2172cbceba5cd563e","modified":1710571567588},{"_id":"public/archives/page/4/index.html","hash":"42c226b586d702dbbe963668744aa80426bbdb3f","modified":1710571567588},{"_id":"public/archives/2020/index.html","hash":"d64c2071481a7fa2f586de57d1f870f70222a0f3","modified":1710571567588},{"_id":"public/archives/2020/page/2/index.html","hash":"cbbc0847e4c414ef7767dbe71f4e1ff6d9a8181f","modified":1710571567588},{"_id":"public/archives/2020/04/index.html","hash":"f8b8fc9780aefe6c81d96b726db0cfc4006bb7c2","modified":1710571567588},{"_id":"public/archives/2020/11/index.html","hash":"cebc78273b719450c9bd165c4047f5107947fc8d","modified":1710571567588},{"_id":"public/archives/2021/index.html","hash":"012ec96c12db10015da98393173fa9d21b1f019e","modified":1710571567588},{"_id":"public/archives/2021/04/index.html","hash":"c328e3cef7ed78299c75e2be02ec15f9cb13b8f4","modified":1710571567588},{"_id":"public/archives/2022/index.html","hash":"da244f58b96d367f97f98ca9b41a2aecfc968cf6","modified":1710571567588},{"_id":"public/archives/2022/01/index.html","hash":"c8e8882f1f09351feb769ad33e30cda54a33140d","modified":1710571567588},{"_id":"public/archives/2022/03/index.html","hash":"f91e522d07def4bd61a05e551d408c0aa0380a40","modified":1710571567588},{"_id":"public/archives/2022/10/index.html","hash":"8f4da885ed1ca1bcbcfdb96a440f17b93c781a36","modified":1710571567588},{"_id":"public/archives/2023/index.html","hash":"b4e56307e16528e7ed11574f945208863db669e6","modified":1710571567588},{"_id":"public/archives/2023/08/index.html","hash":"98996838472ee5c749c3c942856e46652140686f","modified":1710571567588},{"_id":"public/archives/2023/09/index.html","hash":"6eaf9c74eb61076362672a0d747a6d95f2a349b2","modified":1710571567588},{"_id":"public/archives/2024/index.html","hash":"d65fb7474ee49507c196f9ce89860f1271479b9e","modified":1710571567588},{"_id":"public/archives/2024/03/index.html","hash":"6bf3e9588f399418c3aa866d22a404c337c4a106","modified":1710571567588},{"_id":"public/index.html","hash":"60e6fdb7c82d5546cb5665d73045ba66e4221ec4","modified":1710571567588},{"_id":"public/page/2/index.html","hash":"de85c8c3ab35968455e4e2db98226a86d5d9d857","modified":1710571567588},{"_id":"public/page/3/index.html","hash":"7aa3358c69357b0aa873e1d4a20b2406846fe804","modified":1710571567588},{"_id":"public/page/4/index.html","hash":"75c198d13ed5f38d2dcc827ea8ee59d9f422a6e2","modified":1710571567588},{"_id":"public/tags/java/index.html","hash":"d450e8fcae491f2b6d44260259cb6ce9cd1e5339","modified":1710571567588},{"_id":"public/tags/Java学习/index.html","hash":"a8378d86527ffcb74d04d88d94e601b949a1e014","modified":1710571567588},{"_id":"public/tags/职场和发展/index.html","hash":"1cfea40ed71352cda697e2f497ef503b9624b6c8","modified":1710571567588},{"_id":"public/tags/算法/index.html","hash":"c25e0bcedb6d13c9d632c37de8ee249ea4dee388","modified":1710571567588},{"_id":"public/tags/leetcode/index.html","hash":"088e6c52a54dba981701347680cec664ac5662c8","modified":1710571567588},{"_id":"public/tags/数据库/index.html","hash":"f413b10c1e14dcf8b907288c685208a540230470","modified":1710571567588},{"_id":"public/tags/c/index.html","hash":"4fa632c12e68df570bb339a3c8e7691862e5ccf9","modified":1710571567588},{"_id":"public/tags/其它/index.html","hash":"6f10fe423a91776a007b1d15ed8856a6ed020362","modified":1710571567588},{"_id":"public/tags/mongodb/index.html","hash":"dae423b3d3a6f9908ba657496b7d28b3c43326b4","modified":1710571567588},{"_id":"public/tags/python/index.html","hash":"8c187cedcf962111096e09c41d1ac09a552aadba","modified":1710571567588},{"_id":"public/tags/数据结构/index.html","hash":"4272bc781bb3668665fbf53f41ea8b7540b8a4ce","modified":1710571567588},{"_id":"public/tags/redis/index.html","hash":"cfd526f1776e2d9d1a3e9b0218eded749df0c782","modified":1710571567588},{"_id":"public/tags/matplotlib/index.html","hash":"f4800449ee696e093cafbe780b6df8301fca76ba","modified":1710571567588},{"_id":"public/tags/神经网络/index.html","hash":"6b967692e713699f9b805df4b476b7b44b11788e","modified":1710571567588},{"_id":"public/404.html","hash":"56b98bdcf2296ee632c73ea487d80855502d3cfc","modified":1710571567588},{"_id":"public/tags/index.html","hash":"75fb6457db27d18bfc25eb65060e110f7e44cc50","modified":1710571567588},{"_id":"public/categories/index.html","hash":"359959eec1f549382b9c7e0594b3510f026d8b51","modified":1710571567588},{"_id":"public/links/index.html","hash":"d3ea460328b84027501d3bc26bb2b611c8fba93c","modified":1710571567588},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1710571567588},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1710571567588},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1710571567588},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1710571567588},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1710571567588},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1710571567588},{"_id":"public/css/highlight-dark.css","hash":"902294bada4323c0f51502d67cba8c3a0298952f","modified":1710571567588},{"_id":"public/css/highlight.css","hash":"04d4ddbb5e1d1007447c2fe293ee05aae9b9563e","modified":1710571567588},{"_id":"public/css/main.css","hash":"7d7590cfe0261084ad357d5f51cb14d13db826d8","modified":1710571567588},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1710571567588},{"_id":"public/js/color-schema.js","hash":"c5939d14065d38c86e16d1642e154dde5a23e830","modified":1710571567588},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1710571567588},{"_id":"public/js/events.js","hash":"5891534506b959a2f559f29e122baa3eb9159d93","modified":1710571567588},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1710571567588},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1710571567588},{"_id":"public/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1710571567588},{"_id":"public/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1710571567588},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1710571567588}],"Category":[{"name":"java","_id":"clttq59b20003zwve2jty5r5b"},{"name":"Java学习","_id":"clttq59ba000ezwvegz262cwf"},{"name":"算法","_id":"clttq59bg000rzwve1cbbgow1"},{"name":"mysql","_id":"clttq59bv0023zwve6ya60qaw"},{"name":"其它","_id":"clttq59bx002dzwve0rkw13i7"},{"name":"数据库","_id":"clttq59c3002uzwveems3ethb"}],"Data":[],"Page":[{"title":"about","date":"2020-02-23T11:20:33.000Z","layout":"about","_content":"关于页待更新","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-02-23 19:20:33\nlayout: about\n---\n关于页待更新","updated":"2024-03-16T02:28:12.122Z","path":"about/index.html","comments":1,"_id":"clttq59az0001zwve0wgvg6m0","content":"<p>关于页待更新</p>\n","site":{"data":{}},"excerpt":"","more":"<p>关于页待更新</p>\n"}],"Post":[{"title":"201912-1报数问题","author":null,"date":"2020-04-18T08:52:03.000Z","_content":"### 前言\n\n哈哈哈，决定9月份考一下CCF认证，不知道能考50分还是100分，开始练习啦。\n\n### 题目要求\n\n![在这里插入图片描述](https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151951393.png)\n![在这里插入图片描述](https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151951394.png)\n\n### 问题分析\n\n题目中说了不计入被跳过的数，也就是虽然你要报n个数，但是你最后报的数一定是大于等于n的。比如题目说明n小于等于666，但加上跳过的数字，其实报的数已经超过了700。所以我们需要考虑到百位甚至千位为7的情况。\n\n### Java代码\n\n```js \nimport java.util.Scanner;\npublic class Main {\n    \n\tpublic static void main(String[] args) {\n    \n\t\n\t\tScanner scanner = new Scanner(System.in);\n\t\tint n;\n\t\tn = scanner.nextInt();\n\t\tscanner.close();\n\t\t\n\t\tint[] arr = new int[5];\t\t\t\t\t\t//用来记录四个人跳过的次数\n\t\tfor(int i=0; i<arr.length; i++) {\n    \t\t\t//初始化为0\n\t\t\tarr[i] = 0;\n\t\t}\n\t\tfor (int i = 1,flag=0; flag <n; i++) {\n    \t\t//flag记录有效报数，即没有跳过的个数\n\t\t\tif(ContainSeven(i)) {\n    \t\t\t\t\t//如果跳过\n\t\t\t\tarr[i%4]++;\n\t\t\t}\n\t\t\telse {\n    \t\t\t\t\t\t\t\t\t//如果不跳过，那么有效报数次数加一\n\t\t\t\tflag++;\n\t\t\t}\n\t\t}\n\t\tfor (int i = 1; i <= 3; i++) {\n    \t\t\t\t//打印甲乙丙丁\n\t\t\tSystem.out.println(arr[i]);\n\t\t}\n\t\tSystem.out.println(arr[0]);\n\t}\n\t\n\tpublic static Boolean ContainSeven(int num){\n    \t//判断是否需要跳过函数，参数为当前数字\n\t    if(num%7==0)\n\t        return true;\n\t    else{\n    \n\t    \tint t=num;\n\t    \twhile(t>0)\n\t    \t{\n    \n\t    \t\tif(t%10==7)//含有数字7\n\t    \t\t\treturn true;\n\t    \t\tt/=10;\n\t    \t}\n\t    }\n\t    return false;\n\t}\n\t\n}\n```","source":"_posts/201912-1报数问题.md","raw":"---\ntitle: 201912-1报数问题\nauthor: \ntags: \n       - java\n\ncategory: \n       - java\n\ndate: 2020-04-18 16:52:03\n---\n### 前言\n\n哈哈哈，决定9月份考一下CCF认证，不知道能考50分还是100分，开始练习啦。\n\n### 题目要求\n\n![在这里插入图片描述](https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151951393.png)\n![在这里插入图片描述](https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151951394.png)\n\n### 问题分析\n\n题目中说了不计入被跳过的数，也就是虽然你要报n个数，但是你最后报的数一定是大于等于n的。比如题目说明n小于等于666，但加上跳过的数字，其实报的数已经超过了700。所以我们需要考虑到百位甚至千位为7的情况。\n\n### Java代码\n\n```js \nimport java.util.Scanner;\npublic class Main {\n    \n\tpublic static void main(String[] args) {\n    \n\t\n\t\tScanner scanner = new Scanner(System.in);\n\t\tint n;\n\t\tn = scanner.nextInt();\n\t\tscanner.close();\n\t\t\n\t\tint[] arr = new int[5];\t\t\t\t\t\t//用来记录四个人跳过的次数\n\t\tfor(int i=0; i<arr.length; i++) {\n    \t\t\t//初始化为0\n\t\t\tarr[i] = 0;\n\t\t}\n\t\tfor (int i = 1,flag=0; flag <n; i++) {\n    \t\t//flag记录有效报数，即没有跳过的个数\n\t\t\tif(ContainSeven(i)) {\n    \t\t\t\t\t//如果跳过\n\t\t\t\tarr[i%4]++;\n\t\t\t}\n\t\t\telse {\n    \t\t\t\t\t\t\t\t\t//如果不跳过，那么有效报数次数加一\n\t\t\t\tflag++;\n\t\t\t}\n\t\t}\n\t\tfor (int i = 1; i <= 3; i++) {\n    \t\t\t\t//打印甲乙丙丁\n\t\t\tSystem.out.println(arr[i]);\n\t\t}\n\t\tSystem.out.println(arr[0]);\n\t}\n\t\n\tpublic static Boolean ContainSeven(int num){\n    \t//判断是否需要跳过函数，参数为当前数字\n\t    if(num%7==0)\n\t        return true;\n\t    else{\n    \n\t    \tint t=num;\n\t    \twhile(t>0)\n\t    \t{\n    \n\t    \t\tif(t%10==7)//含有数字7\n\t    \t\t\treturn true;\n\t    \t\tt/=10;\n\t    \t}\n\t    }\n\t    return false;\n\t}\n\t\n}\n```","slug":"201912-1报数问题","published":1,"updated":"2024-03-15T11:54:02.590Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clttq59au0000zwveccgj3kv7","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>哈哈哈，决定9月份考一下CCF认证，不知道能考50分还是100分，开始练习啦。</p>\n<h3 id=\"题目要求\"><a href=\"#题目要求\" class=\"headerlink\" title=\"题目要求\"></a>题目要求</h3><p><img src=\"https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151951393.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151951394.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h3><p>题目中说了不计入被跳过的数，也就是虽然你要报n个数，但是你最后报的数一定是大于等于n的。比如题目说明n小于等于666，但加上跳过的数字，其实报的数已经超过了700。所以我们需要考虑到百位甚至千位为7的情况。</p>\n<h3 id=\"Java代码\"><a href=\"#Java代码\" class=\"headerlink\" title=\"Java代码\"></a>Java代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">util</span>.<span class=\"hljs-property\">Scanner</span>;<br>public <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Main</span> &#123;<br>    <br>\tpublic <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span>[] args</span>) &#123;<br>    <br>\t<br>\t\t<span class=\"hljs-title class_\">Scanner</span> scanner = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">in</span>);<br>\t\tint n;<br>\t\tn = scanner.<span class=\"hljs-title function_\">nextInt</span>();<br>\t\tscanner.<span class=\"hljs-title function_\">close</span>();<br>\t\t<br>\t\tint[] arr = <span class=\"hljs-keyword\">new</span> int[<span class=\"hljs-number\">5</span>];\t\t\t\t\t\t<span class=\"hljs-comment\">//用来记录四个人跳过的次数</span><br>\t\t<span class=\"hljs-keyword\">for</span>(int i=<span class=\"hljs-number\">0</span>; i&lt;arr.<span class=\"hljs-property\">length</span>; i++) &#123;<br>    \t\t\t<span class=\"hljs-comment\">//初始化为0</span><br>\t\t\tarr[i] = <span class=\"hljs-number\">0</span>;<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">1</span>,flag=<span class=\"hljs-number\">0</span>; flag &lt;n; i++) &#123;<br>    \t\t<span class=\"hljs-comment\">//flag记录有效报数，即没有跳过的个数</span><br>\t\t\t<span class=\"hljs-keyword\">if</span>(<span class=\"hljs-title class_\">ContainSeven</span>(i)) &#123;<br>    \t\t\t\t\t<span class=\"hljs-comment\">//如果跳过</span><br>\t\t\t\tarr[i%<span class=\"hljs-number\">4</span>]++;<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">else</span> &#123;<br>    \t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//如果不跳过，那么有效报数次数加一</span><br>\t\t\t\tflag++;<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-number\">3</span>; i++) &#123;<br>    \t\t\t\t<span class=\"hljs-comment\">//打印甲乙丙丁</span><br>\t\t\t<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(arr[i]);<br>\t\t&#125;<br>\t\t<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(arr[<span class=\"hljs-number\">0</span>]);<br>\t&#125;<br>\t<br>\tpublic <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title class_\">Boolean</span> <span class=\"hljs-title class_\">ContainSeven</span>(int num)&#123;<br>    \t<span class=\"hljs-comment\">//判断是否需要跳过函数，参数为当前数字</span><br>\t    <span class=\"hljs-keyword\">if</span>(num%<span class=\"hljs-number\">7</span>==<span class=\"hljs-number\">0</span>)<br>\t        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>\t    <span class=\"hljs-keyword\">else</span>&#123;<br>    <br>\t    \tint t=num;<br>\t    \t<span class=\"hljs-keyword\">while</span>(t&gt;<span class=\"hljs-number\">0</span>)<br>\t    \t&#123;<br>    <br>\t    \t\t<span class=\"hljs-keyword\">if</span>(t%<span class=\"hljs-number\">10</span>==<span class=\"hljs-number\">7</span>)<span class=\"hljs-comment\">//含有数字7</span><br>\t    \t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>\t    \t\tt/=<span class=\"hljs-number\">10</span>;<br>\t    \t&#125;<br>\t    &#125;<br>\t    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>\t&#125;<br>\t<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>哈哈哈，决定9月份考一下CCF认证，不知道能考50分还是100分，开始练习啦。</p>\n<h3 id=\"题目要求\"><a href=\"#题目要求\" class=\"headerlink\" title=\"题目要求\"></a>题目要求</h3><p><img src=\"https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151951393.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151951394.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h3><p>题目中说了不计入被跳过的数，也就是虽然你要报n个数，但是你最后报的数一定是大于等于n的。比如题目说明n小于等于666，但加上跳过的数字，其实报的数已经超过了700。所以我们需要考虑到百位甚至千位为7的情况。</p>\n<h3 id=\"Java代码\"><a href=\"#Java代码\" class=\"headerlink\" title=\"Java代码\"></a>Java代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">util</span>.<span class=\"hljs-property\">Scanner</span>;<br>public <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Main</span> &#123;<br>    <br>\tpublic <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span>[] args</span>) &#123;<br>    <br>\t<br>\t\t<span class=\"hljs-title class_\">Scanner</span> scanner = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">in</span>);<br>\t\tint n;<br>\t\tn = scanner.<span class=\"hljs-title function_\">nextInt</span>();<br>\t\tscanner.<span class=\"hljs-title function_\">close</span>();<br>\t\t<br>\t\tint[] arr = <span class=\"hljs-keyword\">new</span> int[<span class=\"hljs-number\">5</span>];\t\t\t\t\t\t<span class=\"hljs-comment\">//用来记录四个人跳过的次数</span><br>\t\t<span class=\"hljs-keyword\">for</span>(int i=<span class=\"hljs-number\">0</span>; i&lt;arr.<span class=\"hljs-property\">length</span>; i++) &#123;<br>    \t\t\t<span class=\"hljs-comment\">//初始化为0</span><br>\t\t\tarr[i] = <span class=\"hljs-number\">0</span>;<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">1</span>,flag=<span class=\"hljs-number\">0</span>; flag &lt;n; i++) &#123;<br>    \t\t<span class=\"hljs-comment\">//flag记录有效报数，即没有跳过的个数</span><br>\t\t\t<span class=\"hljs-keyword\">if</span>(<span class=\"hljs-title class_\">ContainSeven</span>(i)) &#123;<br>    \t\t\t\t\t<span class=\"hljs-comment\">//如果跳过</span><br>\t\t\t\tarr[i%<span class=\"hljs-number\">4</span>]++;<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">else</span> &#123;<br>    \t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">//如果不跳过，那么有效报数次数加一</span><br>\t\t\t\tflag++;<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-number\">3</span>; i++) &#123;<br>    \t\t\t\t<span class=\"hljs-comment\">//打印甲乙丙丁</span><br>\t\t\t<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(arr[i]);<br>\t\t&#125;<br>\t\t<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(arr[<span class=\"hljs-number\">0</span>]);<br>\t&#125;<br>\t<br>\tpublic <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title class_\">Boolean</span> <span class=\"hljs-title class_\">ContainSeven</span>(int num)&#123;<br>    \t<span class=\"hljs-comment\">//判断是否需要跳过函数，参数为当前数字</span><br>\t    <span class=\"hljs-keyword\">if</span>(num%<span class=\"hljs-number\">7</span>==<span class=\"hljs-number\">0</span>)<br>\t        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>\t    <span class=\"hljs-keyword\">else</span>&#123;<br>    <br>\t    \tint t=num;<br>\t    \t<span class=\"hljs-keyword\">while</span>(t&gt;<span class=\"hljs-number\">0</span>)<br>\t    \t&#123;<br>    <br>\t    \t\t<span class=\"hljs-keyword\">if</span>(t%<span class=\"hljs-number\">10</span>==<span class=\"hljs-number\">7</span>)<span class=\"hljs-comment\">//含有数字7</span><br>\t    \t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>\t    \t\tt/=<span class=\"hljs-number\">10</span>;<br>\t    \t&#125;<br>\t    &#125;<br>\t    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>\t&#125;<br>\t<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"Java新版本的重要语言特性（9-17）","author":null,"date":"2023-09-21T01:06:04.000Z","_content":"## JDK9\n\n#### 允许在接口中使用私有方法\n\n## JDK10\n\n#### 局部变量类型推断\n\n```js \nvar list = new ArrayList<String>();\n```\n \n* 声明时必须初始化\n\n可以使用在：\n\n* 具有初始化器的局部变量\n* 增强型 for 循环中的索引变量\n* 传统 for 循环中声明的局部变量\n\n不能使用在：\n\n* 推断方法的参数类型\n* 构造函数参数类型推断\n* 推断方法返回类型\n* 字段类型推断\n* 捕获表达式（或任何其他类型的变量声明）\n\n建议：为了程序的易读性和可维护性，尽量显式定义变量类型。\n\n## JDK11\n\n#### 用于 Lambda 参数的局部变量语法\n\n将局部变量和 Lambda 表达式的用法进行了统一，并且可以将注释应用于局部变量和 Lambda 表达式\n \n```js \n@Nonnull var x = new Foo();\n\n(@Nonnull var x, @Nullable var y) -> x.process(y)\n```\n \n* @NonNull 注解可以标注在方法、字段、参数之上，表示对应的值不能为空；\n* @Nullable 注解可以标注在方法、字段、参数之上，表示对应的值可以为空；\n\n## JDK12\n\n## JDK13\n\n## JDK14\n\n#### Switch 表达式\n\n旧版：\n\n* 一般使用冒号 ：来作为语句分支代码的开始。\n* 在每个分支结束之前，需要加上 break 关键字进行分支跳出，以防 switch 语句一直往后执行到整个 switch 语句结束。\n\n新版：\n\n* 提供了新的分支切换方式，即 -> 符号右则表达式方法体。\n* 在执行完分支方法之后，自动结束 switch 分支。\n* -> 右则方法块中可以是表达式、代码块或者是手动抛出的异常。\n```js \n//旧版：\nint dayOfWeek;\nswitch (day) {\n    \n    case MONDAY:\n    case TUESDAY:\n    case WEDNESDAY:\n    case THURSDAY:\n    case FRIDAY:\n        dayOfWeek = 5;\n        break;\n    case SATURDAY:\n        dayOfWeek = 6;\n        break;\n    case SUNDAY:\n        dayOfWeek = 7;\n        break;\n    default:\n        dayOfWeek = 0;\n        break;\n}\n\n//新版：\nint dayOfWeek = switch (day) {\n    \n    case MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY -> 5;\n    case SATURDAY -> 6;\n\tcase SUNDAY -> 7;\n    default -> 0;\n};\n```\n\n**注意**：\n\n* 之前需要用变量来接收返回值，现在直接返回需要返回的结果。\n* 不再需要显式地跳出当前分支，表达式执行完后会自动跳出，不会继续往后执行。\n* 对于多个相同的 case 方法块，可以将 case 条件并列，不再通过每个 case 后面故意不加 break 关键字来使用相同方法块。\n\n## JDK15\n\n#### 文本块\n\n文本块就是以三个引号开始，并以三个引号结束的字符串字面量。\n文本块减少了转义，大大提高了代码可读性，尤其是代码中对SQL、HTML、JSON字符串进行拼接的情况。\n \n```js \n// 旧版\nString sqlTemplate = \"SELECT\\n\" +\n        \"    name,\\n\" +\n        \"    age,\\n\" +\n        \"    phone,\\n\" +\n        \"    wechat\\n\" +\n        \"FROM\\n\" +\n        \"    csdn_user;\";\n// 新版\nString sqlTemplate = \"\"\"\n        SELECT\n            name,\n            age,\n            phone,\n            wechat\n        FROM\n            csdn_user;\n        \"\"\";\n```\n\n## JDK16\n\n#### instanceof 模式匹配\n\n对 instanceof 的改进，主要目的是为了让创建对象更简单、简洁和高效，并且可读性更强、提高安全性。\n \n```js \n// 旧版\n// 每次在检查类型之后，都需要强制进行类型转换。\n// 类型转换后，需要提前创建一个局部变量来接收转换后的结果，代码显得多余且繁琐。\nif (person instanceof Student) {\n    \n    Student student = (Student) person;\n    student.say();\n   // other student operations\n} else if (person instanceof Teacher) {\n    \n    Teacher teacher = (Teacher) person;\n    teacher.say();\n    // other teacher operations\n}\n\n// 新版\n// 对 person 对象进行类型匹配，校验 person 对象是否为 Student 类型\n// 如果类型匹配成功，则会转换为 Student 类型，并赋值给模式局部变量 student\nif (person instanceof Student student) {\n    \n\t//这里的 student 变量只能在 if 块中使用，而不能在 else if/else 中使用\n    student.say();\n   // other student operations\n} else if (person instanceof Teacher teacher) {\n    \n    teacher.say();\n    // other teacher operations\n}\n```\n\n如果 if 条件中有 && 运算符时，当 instanceof 类型匹配成功，模式局部变量的作用范围也可以相应延长，如下面代码：\n\n```js \nif (obj instanceof String s && s.length() > 5) {\n    .. s.contains(..) ..}\n```\n \n注意：这种作用范围延长，并不适用于或 || 运算符，因为即便 || 运算符左边的 instanceof 类型匹配没有成功也不会造成短路，依旧会执行到||运算符右边的表达式.但是如果左边instanceof 类型匹配没有成功，局部变量并未定义赋值，此时使用会产生问题。\n\n#### Records类型\n\n* Record 类型允许在代码中使用紧凑的语法形式来声明类，而这些类能够作为不可变数据类型的封装持有者。Record 这一特性主要用在特定领域的类上；\n* 与枚举类型一样，Record 类型是一种受限形式的类型，主要用于存储、保存数据，并且没有其它额外自定义行为的场景下。\n* 效果有些类似 Lombok 的 @Data 注解、Kotlin 中的 data class，但是又不尽完全相同，它们的共同点都是类的部分或者全部可以直接在类头中定义、描述，并且这个类只用于存储数据而已。\n \n```js \n// 示例\npublic record Person(String name, int age) {\n    \n    public static String address;\n\n    public String getName() {\n    \n        return name;\n    }\n}\n\n\n// 编译后反编译的结果\npublic final class Person extends java.lang.Record {\n    \n    private final java.lang.String name;\n    private final java.lang.String age;\n\n    public Person(java.lang.String name, java.lang.String age) {\n     /* compiled code */ }\n\n    public java.lang.String getName() {\n     /* compiled code */ }\n\n    public java.lang.String toString() {\n     /* compiled code */ }\n\n    public final int hashCode() {\n     /* compiled code */ }\n\n    public final boolean equals(java.lang.Object o) {\n     /* compiled code */ }\n\n    public java.lang.String name() {\n     /* compiled code */ }\n\n    public java.lang.String age() {\n     /* compiled code */ }\n}\n```\n\n可以得出，当用 Record 来声明一个类时，该类将自动拥有下面特征：\n\n* 拥有一个构造方法\n* 获取成员属性值的方法：name()、age()\n* hashCode() 方法和 euqals() 方法\n* toString() 方法类\n* 对象被 final 关键字修饰，不能被继承；类的成员变量也都被 final 修饰，不能再被赋值使用。\n* 可以在 Record 声明的类中定义静态属性和方法。\n* 注意，不能在 Record 声明的类中定义成员变量，类也不能声明为抽象类等。\n\n## JDK17\n\n#### 密封的类和接口\n\n用来增强 Java 编程语言，防止其他类或接口扩展或实现它们。\n\n使用修饰符**sealed**，您可以将一个类声明为密封类。\n密封的类使用关键字**permits**列出可以直接扩展它的类。\n子类可以是最终的、非密封的或密封的。\n**继承了密封类的子类可以使用non-sealed修饰，这样任何类都可以继承这个子类。**\n\n```js \n// 旧版\npublic class Person {\n     } //人\n \nclass Teacher extends Person {\n     }//教师\n \nclass Worker extends Person {\n     }  //工人\n \nclass Student extends Person{\n     } //学生\n\n\n// 新版\n// 添加sealed修饰符，permits后面跟上只能被继承的子类名称\npublic sealed class Person permits Teacher, Worker, Student{\n     } //人\n \n// 子类可以被修饰为 final\nfinal class Teacher extends Person {\n     }//教师\n \n// 子类可以被修饰为 non-sealed，此时 Worker类就成了普通类，谁都可以继承它\nnon-sealed class Worker extends Person {\n     }  //工人\n// 任何类都可以继承Worker\nclass AnyClass extends Worker{\n    }\n \n//子类可以被修饰为 sealed,同上\nsealed class Student extends Person permits MiddleSchoolStudent,GraduateStudent{\n     } //学生\n\nfinal class MiddleSchoolStudent extends Student {\n     }  //中学生\n\nfinal class GraduateStudent extends Student {\n     }  //研究生\n```\n \n可以限制类的层次结构。","source":"_posts/Java新版本的重要语言特性（9-17）.md","raw":"---\ntitle: Java新版本的重要语言特性（9-17）\nauthor: \ntags: \n       - java\n\ncategory: \n       - java\n\ndate: 2023-09-21 09:06:04\n---\n## JDK9\n\n#### 允许在接口中使用私有方法\n\n## JDK10\n\n#### 局部变量类型推断\n\n```js \nvar list = new ArrayList<String>();\n```\n \n* 声明时必须初始化\n\n可以使用在：\n\n* 具有初始化器的局部变量\n* 增强型 for 循环中的索引变量\n* 传统 for 循环中声明的局部变量\n\n不能使用在：\n\n* 推断方法的参数类型\n* 构造函数参数类型推断\n* 推断方法返回类型\n* 字段类型推断\n* 捕获表达式（或任何其他类型的变量声明）\n\n建议：为了程序的易读性和可维护性，尽量显式定义变量类型。\n\n## JDK11\n\n#### 用于 Lambda 参数的局部变量语法\n\n将局部变量和 Lambda 表达式的用法进行了统一，并且可以将注释应用于局部变量和 Lambda 表达式\n \n```js \n@Nonnull var x = new Foo();\n\n(@Nonnull var x, @Nullable var y) -> x.process(y)\n```\n \n* @NonNull 注解可以标注在方法、字段、参数之上，表示对应的值不能为空；\n* @Nullable 注解可以标注在方法、字段、参数之上，表示对应的值可以为空；\n\n## JDK12\n\n## JDK13\n\n## JDK14\n\n#### Switch 表达式\n\n旧版：\n\n* 一般使用冒号 ：来作为语句分支代码的开始。\n* 在每个分支结束之前，需要加上 break 关键字进行分支跳出，以防 switch 语句一直往后执行到整个 switch 语句结束。\n\n新版：\n\n* 提供了新的分支切换方式，即 -> 符号右则表达式方法体。\n* 在执行完分支方法之后，自动结束 switch 分支。\n* -> 右则方法块中可以是表达式、代码块或者是手动抛出的异常。\n```js \n//旧版：\nint dayOfWeek;\nswitch (day) {\n    \n    case MONDAY:\n    case TUESDAY:\n    case WEDNESDAY:\n    case THURSDAY:\n    case FRIDAY:\n        dayOfWeek = 5;\n        break;\n    case SATURDAY:\n        dayOfWeek = 6;\n        break;\n    case SUNDAY:\n        dayOfWeek = 7;\n        break;\n    default:\n        dayOfWeek = 0;\n        break;\n}\n\n//新版：\nint dayOfWeek = switch (day) {\n    \n    case MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY -> 5;\n    case SATURDAY -> 6;\n\tcase SUNDAY -> 7;\n    default -> 0;\n};\n```\n\n**注意**：\n\n* 之前需要用变量来接收返回值，现在直接返回需要返回的结果。\n* 不再需要显式地跳出当前分支，表达式执行完后会自动跳出，不会继续往后执行。\n* 对于多个相同的 case 方法块，可以将 case 条件并列，不再通过每个 case 后面故意不加 break 关键字来使用相同方法块。\n\n## JDK15\n\n#### 文本块\n\n文本块就是以三个引号开始，并以三个引号结束的字符串字面量。\n文本块减少了转义，大大提高了代码可读性，尤其是代码中对SQL、HTML、JSON字符串进行拼接的情况。\n \n```js \n// 旧版\nString sqlTemplate = \"SELECT\\n\" +\n        \"    name,\\n\" +\n        \"    age,\\n\" +\n        \"    phone,\\n\" +\n        \"    wechat\\n\" +\n        \"FROM\\n\" +\n        \"    csdn_user;\";\n// 新版\nString sqlTemplate = \"\"\"\n        SELECT\n            name,\n            age,\n            phone,\n            wechat\n        FROM\n            csdn_user;\n        \"\"\";\n```\n\n## JDK16\n\n#### instanceof 模式匹配\n\n对 instanceof 的改进，主要目的是为了让创建对象更简单、简洁和高效，并且可读性更强、提高安全性。\n \n```js \n// 旧版\n// 每次在检查类型之后，都需要强制进行类型转换。\n// 类型转换后，需要提前创建一个局部变量来接收转换后的结果，代码显得多余且繁琐。\nif (person instanceof Student) {\n    \n    Student student = (Student) person;\n    student.say();\n   // other student operations\n} else if (person instanceof Teacher) {\n    \n    Teacher teacher = (Teacher) person;\n    teacher.say();\n    // other teacher operations\n}\n\n// 新版\n// 对 person 对象进行类型匹配，校验 person 对象是否为 Student 类型\n// 如果类型匹配成功，则会转换为 Student 类型，并赋值给模式局部变量 student\nif (person instanceof Student student) {\n    \n\t//这里的 student 变量只能在 if 块中使用，而不能在 else if/else 中使用\n    student.say();\n   // other student operations\n} else if (person instanceof Teacher teacher) {\n    \n    teacher.say();\n    // other teacher operations\n}\n```\n\n如果 if 条件中有 && 运算符时，当 instanceof 类型匹配成功，模式局部变量的作用范围也可以相应延长，如下面代码：\n\n```js \nif (obj instanceof String s && s.length() > 5) {\n    .. s.contains(..) ..}\n```\n \n注意：这种作用范围延长，并不适用于或 || 运算符，因为即便 || 运算符左边的 instanceof 类型匹配没有成功也不会造成短路，依旧会执行到||运算符右边的表达式.但是如果左边instanceof 类型匹配没有成功，局部变量并未定义赋值，此时使用会产生问题。\n\n#### Records类型\n\n* Record 类型允许在代码中使用紧凑的语法形式来声明类，而这些类能够作为不可变数据类型的封装持有者。Record 这一特性主要用在特定领域的类上；\n* 与枚举类型一样，Record 类型是一种受限形式的类型，主要用于存储、保存数据，并且没有其它额外自定义行为的场景下。\n* 效果有些类似 Lombok 的 @Data 注解、Kotlin 中的 data class，但是又不尽完全相同，它们的共同点都是类的部分或者全部可以直接在类头中定义、描述，并且这个类只用于存储数据而已。\n \n```js \n// 示例\npublic record Person(String name, int age) {\n    \n    public static String address;\n\n    public String getName() {\n    \n        return name;\n    }\n}\n\n\n// 编译后反编译的结果\npublic final class Person extends java.lang.Record {\n    \n    private final java.lang.String name;\n    private final java.lang.String age;\n\n    public Person(java.lang.String name, java.lang.String age) {\n     /* compiled code */ }\n\n    public java.lang.String getName() {\n     /* compiled code */ }\n\n    public java.lang.String toString() {\n     /* compiled code */ }\n\n    public final int hashCode() {\n     /* compiled code */ }\n\n    public final boolean equals(java.lang.Object o) {\n     /* compiled code */ }\n\n    public java.lang.String name() {\n     /* compiled code */ }\n\n    public java.lang.String age() {\n     /* compiled code */ }\n}\n```\n\n可以得出，当用 Record 来声明一个类时，该类将自动拥有下面特征：\n\n* 拥有一个构造方法\n* 获取成员属性值的方法：name()、age()\n* hashCode() 方法和 euqals() 方法\n* toString() 方法类\n* 对象被 final 关键字修饰，不能被继承；类的成员变量也都被 final 修饰，不能再被赋值使用。\n* 可以在 Record 声明的类中定义静态属性和方法。\n* 注意，不能在 Record 声明的类中定义成员变量，类也不能声明为抽象类等。\n\n## JDK17\n\n#### 密封的类和接口\n\n用来增强 Java 编程语言，防止其他类或接口扩展或实现它们。\n\n使用修饰符**sealed**，您可以将一个类声明为密封类。\n密封的类使用关键字**permits**列出可以直接扩展它的类。\n子类可以是最终的、非密封的或密封的。\n**继承了密封类的子类可以使用non-sealed修饰，这样任何类都可以继承这个子类。**\n\n```js \n// 旧版\npublic class Person {\n     } //人\n \nclass Teacher extends Person {\n     }//教师\n \nclass Worker extends Person {\n     }  //工人\n \nclass Student extends Person{\n     } //学生\n\n\n// 新版\n// 添加sealed修饰符，permits后面跟上只能被继承的子类名称\npublic sealed class Person permits Teacher, Worker, Student{\n     } //人\n \n// 子类可以被修饰为 final\nfinal class Teacher extends Person {\n     }//教师\n \n// 子类可以被修饰为 non-sealed，此时 Worker类就成了普通类，谁都可以继承它\nnon-sealed class Worker extends Person {\n     }  //工人\n// 任何类都可以继承Worker\nclass AnyClass extends Worker{\n    }\n \n//子类可以被修饰为 sealed,同上\nsealed class Student extends Person permits MiddleSchoolStudent,GraduateStudent{\n     } //学生\n\nfinal class MiddleSchoolStudent extends Student {\n     }  //中学生\n\nfinal class GraduateStudent extends Student {\n     }  //研究生\n```\n \n可以限制类的层次结构。","slug":"Java新版本的重要语言特性（9-17）","published":1,"updated":"2024-03-15T08:23:22.630Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clttq59b00002zwvegw1sdjd9","content":"<h2 id=\"JDK9\"><a href=\"#JDK9\" class=\"headerlink\" title=\"JDK9\"></a>JDK9</h2><h4 id=\"允许在接口中使用私有方法\"><a href=\"#允许在接口中使用私有方法\" class=\"headerlink\" title=\"允许在接口中使用私有方法\"></a>允许在接口中使用私有方法</h4><h2 id=\"JDK10\"><a href=\"#JDK10\" class=\"headerlink\" title=\"JDK10\"></a>JDK10</h2><h4 id=\"局部变量类型推断\"><a href=\"#局部变量类型推断\" class=\"headerlink\" title=\"局部变量类型推断\"></a>局部变量类型推断</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;<span class=\"hljs-title class_\">String</span>&gt;();<br></code></pre></td></tr></table></figure>\n<ul>\n<li>声明时必须初始化</li>\n</ul>\n<p>可以使用在：</p>\n<ul>\n<li>具有初始化器的局部变量</li>\n<li>增强型 for 循环中的索引变量</li>\n<li>传统 for 循环中声明的局部变量</li>\n</ul>\n<p>不能使用在：</p>\n<ul>\n<li>推断方法的参数类型</li>\n<li>构造函数参数类型推断</li>\n<li>推断方法返回类型</li>\n<li>字段类型推断</li>\n<li>捕获表达式（或任何其他类型的变量声明）</li>\n</ul>\n<p>建议：为了程序的易读性和可维护性，尽量显式定义变量类型。</p>\n<h2 id=\"JDK11\"><a href=\"#JDK11\" class=\"headerlink\" title=\"JDK11\"></a>JDK11</h2><h4 id=\"用于-Lambda-参数的局部变量语法\"><a href=\"#用于-Lambda-参数的局部变量语法\" class=\"headerlink\" title=\"用于 Lambda 参数的局部变量语法\"></a>用于 Lambda 参数的局部变量语法</h4><p>将局部变量和 Lambda 表达式的用法进行了统一，并且可以将注释应用于局部变量和 Lambda 表达式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">@<span class=\"hljs-title class_\">Nonnull</span> <span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Foo</span>();<br><br>(@<span class=\"hljs-title class_\">Nonnull</span> <span class=\"hljs-keyword\">var</span> x, @<span class=\"hljs-title class_\">Nullable</span> <span class=\"hljs-keyword\">var</span> y) -&gt; x.<span class=\"hljs-title function_\">process</span>(y)<br></code></pre></td></tr></table></figure>\n<ul>\n<li>@NonNull 注解可以标注在方法、字段、参数之上，表示对应的值不能为空；</li>\n<li>@Nullable 注解可以标注在方法、字段、参数之上，表示对应的值可以为空；</li>\n</ul>\n<h2 id=\"JDK12\"><a href=\"#JDK12\" class=\"headerlink\" title=\"JDK12\"></a>JDK12</h2><h2 id=\"JDK13\"><a href=\"#JDK13\" class=\"headerlink\" title=\"JDK13\"></a>JDK13</h2><h2 id=\"JDK14\"><a href=\"#JDK14\" class=\"headerlink\" title=\"JDK14\"></a>JDK14</h2><h4 id=\"Switch-表达式\"><a href=\"#Switch-表达式\" class=\"headerlink\" title=\"Switch 表达式\"></a>Switch 表达式</h4><p>旧版：</p>\n<ul>\n<li>一般使用冒号 ：来作为语句分支代码的开始。</li>\n<li>在每个分支结束之前，需要加上 break 关键字进行分支跳出，以防 switch 语句一直往后执行到整个 switch 语句结束。</li>\n</ul>\n<p>新版：</p>\n<ul>\n<li>提供了新的分支切换方式，即 -&gt; 符号右则表达式方法体。</li>\n<li>在执行完分支方法之后，自动结束 switch 分支。</li>\n<li>-&gt; 右则方法块中可以是表达式、代码块或者是手动抛出的异常。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//旧版：</span><br>int dayOfWeek;<br><span class=\"hljs-keyword\">switch</span> (day) &#123;<br>    <br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-attr\">MONDAY</span>:<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-attr\">TUESDAY</span>:<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-attr\">WEDNESDAY</span>:<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-attr\">THURSDAY</span>:<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-attr\">FRIDAY</span>:<br>        dayOfWeek = <span class=\"hljs-number\">5</span>;<br>        <span class=\"hljs-keyword\">break</span>;<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-attr\">SATURDAY</span>:<br>        dayOfWeek = <span class=\"hljs-number\">6</span>;<br>        <span class=\"hljs-keyword\">break</span>;<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-attr\">SUNDAY</span>:<br>        dayOfWeek = <span class=\"hljs-number\">7</span>;<br>        <span class=\"hljs-keyword\">break</span>;<br>    <span class=\"hljs-attr\">default</span>:<br>        dayOfWeek = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">break</span>;<br>&#125;<br><br><span class=\"hljs-comment\">//新版：</span><br>int dayOfWeek = <span class=\"hljs-keyword\">switch</span> (day) &#123;<br>    <br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-variable constant_\">MONDAY</span>, <span class=\"hljs-variable constant_\">TUESDAY</span>, <span class=\"hljs-variable constant_\">WEDNESDAY</span>, <span class=\"hljs-variable constant_\">THURSDAY</span>, <span class=\"hljs-variable constant_\">FRIDAY</span> -&gt; <span class=\"hljs-number\">5</span>;<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-variable constant_\">SATURDAY</span> -&gt; <span class=\"hljs-number\">6</span>;<br>\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-variable constant_\">SUNDAY</span> -&gt; <span class=\"hljs-number\">7</span>;<br>    <span class=\"hljs-keyword\">default</span> -&gt; <span class=\"hljs-number\">0</span>;<br>&#125;;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>注意</strong>：</p>\n<ul>\n<li>之前需要用变量来接收返回值，现在直接返回需要返回的结果。</li>\n<li>不再需要显式地跳出当前分支，表达式执行完后会自动跳出，不会继续往后执行。</li>\n<li>对于多个相同的 case 方法块，可以将 case 条件并列，不再通过每个 case 后面故意不加 break 关键字来使用相同方法块。</li>\n</ul>\n<h2 id=\"JDK15\"><a href=\"#JDK15\" class=\"headerlink\" title=\"JDK15\"></a>JDK15</h2><h4 id=\"文本块\"><a href=\"#文本块\" class=\"headerlink\" title=\"文本块\"></a>文本块</h4><p>文本块就是以三个引号开始，并以三个引号结束的字符串字面量。<br>文本块减少了转义，大大提高了代码可读性，尤其是代码中对SQL、HTML、JSON字符串进行拼接的情况。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 旧版</span><br><span class=\"hljs-title class_\">String</span> sqlTemplate = <span class=\"hljs-string\">&quot;SELECT\\n&quot;</span> +<br>        <span class=\"hljs-string\">&quot;    name,\\n&quot;</span> +<br>        <span class=\"hljs-string\">&quot;    age,\\n&quot;</span> +<br>        <span class=\"hljs-string\">&quot;    phone,\\n&quot;</span> +<br>        <span class=\"hljs-string\">&quot;    wechat\\n&quot;</span> +<br>        <span class=\"hljs-string\">&quot;FROM\\n&quot;</span> +<br>        <span class=\"hljs-string\">&quot;    csdn_user;&quot;</span>;<br><span class=\"hljs-comment\">// 新版</span><br><span class=\"hljs-title class_\">String</span> sqlTemplate = <span class=\"hljs-string\">&quot;&quot;</span><span class=\"hljs-string\">&quot;</span><br><span class=\"hljs-string\">        SELECT</span><br><span class=\"hljs-string\">            name,</span><br><span class=\"hljs-string\">            age,</span><br><span class=\"hljs-string\">            phone,</span><br><span class=\"hljs-string\">            wechat</span><br><span class=\"hljs-string\">        FROM</span><br><span class=\"hljs-string\">            csdn_user;</span><br><span class=\"hljs-string\">        &quot;</span><span class=\"hljs-string\">&quot;&quot;</span>;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"JDK16\"><a href=\"#JDK16\" class=\"headerlink\" title=\"JDK16\"></a>JDK16</h2><h4 id=\"instanceof-模式匹配\"><a href=\"#instanceof-模式匹配\" class=\"headerlink\" title=\"instanceof 模式匹配\"></a>instanceof 模式匹配</h4><p>对 instanceof 的改进，主要目的是为了让创建对象更简单、简洁和高效，并且可读性更强、提高安全性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 旧版</span><br><span class=\"hljs-comment\">// 每次在检查类型之后，都需要强制进行类型转换。</span><br><span class=\"hljs-comment\">// 类型转换后，需要提前创建一个局部变量来接收转换后的结果，代码显得多余且繁琐。</span><br><span class=\"hljs-keyword\">if</span> (person <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">Student</span>) &#123;<br>    <br>    <span class=\"hljs-title class_\">Student</span> student = (<span class=\"hljs-title class_\">Student</span>) person;<br>    student.<span class=\"hljs-title function_\">say</span>();<br>   <span class=\"hljs-comment\">// other student operations</span><br>&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (person <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">Teacher</span>) &#123;<br>    <br>    <span class=\"hljs-title class_\">Teacher</span> teacher = (<span class=\"hljs-title class_\">Teacher</span>) person;<br>    teacher.<span class=\"hljs-title function_\">say</span>();<br>    <span class=\"hljs-comment\">// other teacher operations</span><br>&#125;<br><br><span class=\"hljs-comment\">// 新版</span><br><span class=\"hljs-comment\">// 对 person 对象进行类型匹配，校验 person 对象是否为 Student 类型</span><br><span class=\"hljs-comment\">// 如果类型匹配成功，则会转换为 Student 类型，并赋值给模式局部变量 student</span><br><span class=\"hljs-keyword\">if</span> (person <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">Student</span> student) &#123;<br>    <br>\t<span class=\"hljs-comment\">//这里的 student 变量只能在 if 块中使用，而不能在 else if/else 中使用</span><br>    student.<span class=\"hljs-title function_\">say</span>();<br>   <span class=\"hljs-comment\">// other student operations</span><br>&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (person <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">Teacher</span> teacher) &#123;<br>    <br>    teacher.<span class=\"hljs-title function_\">say</span>();<br>    <span class=\"hljs-comment\">// other teacher operations</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>如果 if 条件中有 &amp;&amp; 运算符时，当 instanceof 类型匹配成功，模式局部变量的作用范围也可以相应延长，如下面代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">if</span> (obj <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">String</span> s &amp;&amp; s.<span class=\"hljs-title function_\">length</span>() &gt; <span class=\"hljs-number\">5</span>) &#123;<br>    .. s.<span class=\"hljs-title function_\">contains</span>(..) ..&#125;<br></code></pre></td></tr></table></figure>\n<p>注意：这种作用范围延长，并不适用于或 || 运算符，因为即便 || 运算符左边的 instanceof 类型匹配没有成功也不会造成短路，依旧会执行到||运算符右边的表达式.但是如果左边instanceof 类型匹配没有成功，局部变量并未定义赋值，此时使用会产生问题。</p>\n<h4 id=\"Records类型\"><a href=\"#Records类型\" class=\"headerlink\" title=\"Records类型\"></a>Records类型</h4><ul>\n<li>Record 类型允许在代码中使用紧凑的语法形式来声明类，而这些类能够作为不可变数据类型的封装持有者。Record 这一特性主要用在特定领域的类上；</li>\n<li>与枚举类型一样，Record 类型是一种受限形式的类型，主要用于存储、保存数据，并且没有其它额外自定义行为的场景下。</li>\n<li>效果有些类似 Lombok 的 @Data 注解、Kotlin 中的 data class，但是又不尽完全相同，它们的共同点都是类的部分或者全部可以直接在类头中定义、描述，并且这个类只用于存储数据而已。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 示例</span><br>public record <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-title class_\">String</span> name, int age) &#123;<br>    <br>    public <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title class_\">String</span> address;<br><br>    public <span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">getName</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <br>        <span class=\"hljs-keyword\">return</span> name;<br>    &#125;<br>&#125;<br><br><br><span class=\"hljs-comment\">// 编译后反编译的结果</span><br>public final <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">java.lang.Record</span> &#123;<br>    <br>    private final java.<span class=\"hljs-property\">lang</span>.<span class=\"hljs-property\">String</span> name;<br>    private final java.<span class=\"hljs-property\">lang</span>.<span class=\"hljs-property\">String</span> age;<br><br>    public <span class=\"hljs-title class_\">Person</span>(java.<span class=\"hljs-property\">lang</span>.<span class=\"hljs-property\">String</span> name, java.<span class=\"hljs-property\">lang</span>.<span class=\"hljs-property\">String</span> age) &#123;<br>     <span class=\"hljs-comment\">/* compiled code */</span> &#125;<br><br>    public java.<span class=\"hljs-property\">lang</span>.<span class=\"hljs-property\">String</span> <span class=\"hljs-title function_\">getName</span>(<span class=\"hljs-params\"></span>) &#123;<br>     <span class=\"hljs-comment\">/* compiled code */</span> &#125;<br><br>    public java.<span class=\"hljs-property\">lang</span>.<span class=\"hljs-property\">String</span> <span class=\"hljs-title function_\">toString</span>(<span class=\"hljs-params\"></span>) &#123;<br>     <span class=\"hljs-comment\">/* compiled code */</span> &#125;<br><br>    public final int <span class=\"hljs-title function_\">hashCode</span>(<span class=\"hljs-params\"></span>) &#123;<br>     <span class=\"hljs-comment\">/* compiled code */</span> &#125;<br><br>    public final boolean <span class=\"hljs-title function_\">equals</span>(<span class=\"hljs-params\">java.lang.<span class=\"hljs-built_in\">Object</span> o</span>) &#123;<br>     <span class=\"hljs-comment\">/* compiled code */</span> &#125;<br><br>    public java.<span class=\"hljs-property\">lang</span>.<span class=\"hljs-property\">String</span> <span class=\"hljs-title function_\">name</span>(<span class=\"hljs-params\"></span>) &#123;<br>     <span class=\"hljs-comment\">/* compiled code */</span> &#125;<br><br>    public java.<span class=\"hljs-property\">lang</span>.<span class=\"hljs-property\">String</span> <span class=\"hljs-title function_\">age</span>(<span class=\"hljs-params\"></span>) &#123;<br>     <span class=\"hljs-comment\">/* compiled code */</span> &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>可以得出，当用 Record 来声明一个类时，该类将自动拥有下面特征：</p>\n<ul>\n<li>拥有一个构造方法</li>\n<li>获取成员属性值的方法：name()、age()</li>\n<li>hashCode() 方法和 euqals() 方法</li>\n<li>toString() 方法类</li>\n<li>对象被 final 关键字修饰，不能被继承；类的成员变量也都被 final 修饰，不能再被赋值使用。</li>\n<li>可以在 Record 声明的类中定义静态属性和方法。</li>\n<li>注意，不能在 Record 声明的类中定义成员变量，类也不能声明为抽象类等。</li>\n</ul>\n<h2 id=\"JDK17\"><a href=\"#JDK17\" class=\"headerlink\" title=\"JDK17\"></a>JDK17</h2><h4 id=\"密封的类和接口\"><a href=\"#密封的类和接口\" class=\"headerlink\" title=\"密封的类和接口\"></a>密封的类和接口</h4><p>用来增强 Java 编程语言，防止其他类或接口扩展或实现它们。</p>\n<p>使用修饰符<strong>sealed</strong>，您可以将一个类声明为密封类。<br>密封的类使用关键字<strong>permits</strong>列出可以直接扩展它的类。<br>子类可以是最终的、非密封的或密封的。<br><strong>继承了密封类的子类可以使用non-sealed修饰，这样任何类都可以继承这个子类。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 旧版</span><br>public <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span> &#123;<br>     &#125; <span class=\"hljs-comment\">//人</span><br> <br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Teacher</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Person</span> &#123;<br>     &#125;<span class=\"hljs-comment\">//教师</span><br> <br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Worker</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Person</span> &#123;<br>     &#125;  <span class=\"hljs-comment\">//工人</span><br> <br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Student</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Person</span>&#123;<br>     &#125; <span class=\"hljs-comment\">//学生</span><br><br><br><span class=\"hljs-comment\">// 新版</span><br><span class=\"hljs-comment\">// 添加sealed修饰符，permits后面跟上只能被继承的子类名称</span><br>public sealed <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span> permits <span class=\"hljs-title class_\">Teacher</span>, <span class=\"hljs-title class_\">Worker</span>, <span class=\"hljs-title class_\">Student</span>&#123;<br>     &#125; <span class=\"hljs-comment\">//人</span><br> <br><span class=\"hljs-comment\">// 子类可以被修饰为 final</span><br>final <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Teacher</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Person</span> &#123;<br>     &#125;<span class=\"hljs-comment\">//教师</span><br> <br><span class=\"hljs-comment\">// 子类可以被修饰为 non-sealed，此时 Worker类就成了普通类，谁都可以继承它</span><br>non-sealed <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Worker</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Person</span> &#123;<br>     &#125;  <span class=\"hljs-comment\">//工人</span><br><span class=\"hljs-comment\">// 任何类都可以继承Worker</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AnyClass</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Worker</span>&#123;<br>    &#125;<br> <br><span class=\"hljs-comment\">//子类可以被修饰为 sealed,同上</span><br>sealed <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Student</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Person</span> permits <span class=\"hljs-title class_\">MiddleSchoolStudent</span>,<span class=\"hljs-title class_\">GraduateStudent</span>&#123;<br>     &#125; <span class=\"hljs-comment\">//学生</span><br><br>final <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MiddleSchoolStudent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Student</span> &#123;<br>     &#125;  <span class=\"hljs-comment\">//中学生</span><br><br>final <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GraduateStudent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Student</span> &#123;<br>     &#125;  <span class=\"hljs-comment\">//研究生</span><br></code></pre></td></tr></table></figure>\n<p>可以限制类的层次结构。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"JDK9\"><a href=\"#JDK9\" class=\"headerlink\" title=\"JDK9\"></a>JDK9</h2><h4 id=\"允许在接口中使用私有方法\"><a href=\"#允许在接口中使用私有方法\" class=\"headerlink\" title=\"允许在接口中使用私有方法\"></a>允许在接口中使用私有方法</h4><h2 id=\"JDK10\"><a href=\"#JDK10\" class=\"headerlink\" title=\"JDK10\"></a>JDK10</h2><h4 id=\"局部变量类型推断\"><a href=\"#局部变量类型推断\" class=\"headerlink\" title=\"局部变量类型推断\"></a>局部变量类型推断</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;<span class=\"hljs-title class_\">String</span>&gt;();<br></code></pre></td></tr></table></figure>\n<ul>\n<li>声明时必须初始化</li>\n</ul>\n<p>可以使用在：</p>\n<ul>\n<li>具有初始化器的局部变量</li>\n<li>增强型 for 循环中的索引变量</li>\n<li>传统 for 循环中声明的局部变量</li>\n</ul>\n<p>不能使用在：</p>\n<ul>\n<li>推断方法的参数类型</li>\n<li>构造函数参数类型推断</li>\n<li>推断方法返回类型</li>\n<li>字段类型推断</li>\n<li>捕获表达式（或任何其他类型的变量声明）</li>\n</ul>\n<p>建议：为了程序的易读性和可维护性，尽量显式定义变量类型。</p>\n<h2 id=\"JDK11\"><a href=\"#JDK11\" class=\"headerlink\" title=\"JDK11\"></a>JDK11</h2><h4 id=\"用于-Lambda-参数的局部变量语法\"><a href=\"#用于-Lambda-参数的局部变量语法\" class=\"headerlink\" title=\"用于 Lambda 参数的局部变量语法\"></a>用于 Lambda 参数的局部变量语法</h4><p>将局部变量和 Lambda 表达式的用法进行了统一，并且可以将注释应用于局部变量和 Lambda 表达式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">@<span class=\"hljs-title class_\">Nonnull</span> <span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Foo</span>();<br><br>(@<span class=\"hljs-title class_\">Nonnull</span> <span class=\"hljs-keyword\">var</span> x, @<span class=\"hljs-title class_\">Nullable</span> <span class=\"hljs-keyword\">var</span> y) -&gt; x.<span class=\"hljs-title function_\">process</span>(y)<br></code></pre></td></tr></table></figure>\n<ul>\n<li>@NonNull 注解可以标注在方法、字段、参数之上，表示对应的值不能为空；</li>\n<li>@Nullable 注解可以标注在方法、字段、参数之上，表示对应的值可以为空；</li>\n</ul>\n<h2 id=\"JDK12\"><a href=\"#JDK12\" class=\"headerlink\" title=\"JDK12\"></a>JDK12</h2><h2 id=\"JDK13\"><a href=\"#JDK13\" class=\"headerlink\" title=\"JDK13\"></a>JDK13</h2><h2 id=\"JDK14\"><a href=\"#JDK14\" class=\"headerlink\" title=\"JDK14\"></a>JDK14</h2><h4 id=\"Switch-表达式\"><a href=\"#Switch-表达式\" class=\"headerlink\" title=\"Switch 表达式\"></a>Switch 表达式</h4><p>旧版：</p>\n<ul>\n<li>一般使用冒号 ：来作为语句分支代码的开始。</li>\n<li>在每个分支结束之前，需要加上 break 关键字进行分支跳出，以防 switch 语句一直往后执行到整个 switch 语句结束。</li>\n</ul>\n<p>新版：</p>\n<ul>\n<li>提供了新的分支切换方式，即 -&gt; 符号右则表达式方法体。</li>\n<li>在执行完分支方法之后，自动结束 switch 分支。</li>\n<li>-&gt; 右则方法块中可以是表达式、代码块或者是手动抛出的异常。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//旧版：</span><br>int dayOfWeek;<br><span class=\"hljs-keyword\">switch</span> (day) &#123;<br>    <br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-attr\">MONDAY</span>:<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-attr\">TUESDAY</span>:<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-attr\">WEDNESDAY</span>:<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-attr\">THURSDAY</span>:<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-attr\">FRIDAY</span>:<br>        dayOfWeek = <span class=\"hljs-number\">5</span>;<br>        <span class=\"hljs-keyword\">break</span>;<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-attr\">SATURDAY</span>:<br>        dayOfWeek = <span class=\"hljs-number\">6</span>;<br>        <span class=\"hljs-keyword\">break</span>;<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-attr\">SUNDAY</span>:<br>        dayOfWeek = <span class=\"hljs-number\">7</span>;<br>        <span class=\"hljs-keyword\">break</span>;<br>    <span class=\"hljs-attr\">default</span>:<br>        dayOfWeek = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">break</span>;<br>&#125;<br><br><span class=\"hljs-comment\">//新版：</span><br>int dayOfWeek = <span class=\"hljs-keyword\">switch</span> (day) &#123;<br>    <br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-variable constant_\">MONDAY</span>, <span class=\"hljs-variable constant_\">TUESDAY</span>, <span class=\"hljs-variable constant_\">WEDNESDAY</span>, <span class=\"hljs-variable constant_\">THURSDAY</span>, <span class=\"hljs-variable constant_\">FRIDAY</span> -&gt; <span class=\"hljs-number\">5</span>;<br>    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-variable constant_\">SATURDAY</span> -&gt; <span class=\"hljs-number\">6</span>;<br>\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-variable constant_\">SUNDAY</span> -&gt; <span class=\"hljs-number\">7</span>;<br>    <span class=\"hljs-keyword\">default</span> -&gt; <span class=\"hljs-number\">0</span>;<br>&#125;;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>注意</strong>：</p>\n<ul>\n<li>之前需要用变量来接收返回值，现在直接返回需要返回的结果。</li>\n<li>不再需要显式地跳出当前分支，表达式执行完后会自动跳出，不会继续往后执行。</li>\n<li>对于多个相同的 case 方法块，可以将 case 条件并列，不再通过每个 case 后面故意不加 break 关键字来使用相同方法块。</li>\n</ul>\n<h2 id=\"JDK15\"><a href=\"#JDK15\" class=\"headerlink\" title=\"JDK15\"></a>JDK15</h2><h4 id=\"文本块\"><a href=\"#文本块\" class=\"headerlink\" title=\"文本块\"></a>文本块</h4><p>文本块就是以三个引号开始，并以三个引号结束的字符串字面量。<br>文本块减少了转义，大大提高了代码可读性，尤其是代码中对SQL、HTML、JSON字符串进行拼接的情况。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 旧版</span><br><span class=\"hljs-title class_\">String</span> sqlTemplate = <span class=\"hljs-string\">&quot;SELECT\\n&quot;</span> +<br>        <span class=\"hljs-string\">&quot;    name,\\n&quot;</span> +<br>        <span class=\"hljs-string\">&quot;    age,\\n&quot;</span> +<br>        <span class=\"hljs-string\">&quot;    phone,\\n&quot;</span> +<br>        <span class=\"hljs-string\">&quot;    wechat\\n&quot;</span> +<br>        <span class=\"hljs-string\">&quot;FROM\\n&quot;</span> +<br>        <span class=\"hljs-string\">&quot;    csdn_user;&quot;</span>;<br><span class=\"hljs-comment\">// 新版</span><br><span class=\"hljs-title class_\">String</span> sqlTemplate = <span class=\"hljs-string\">&quot;&quot;</span><span class=\"hljs-string\">&quot;</span><br><span class=\"hljs-string\">        SELECT</span><br><span class=\"hljs-string\">            name,</span><br><span class=\"hljs-string\">            age,</span><br><span class=\"hljs-string\">            phone,</span><br><span class=\"hljs-string\">            wechat</span><br><span class=\"hljs-string\">        FROM</span><br><span class=\"hljs-string\">            csdn_user;</span><br><span class=\"hljs-string\">        &quot;</span><span class=\"hljs-string\">&quot;&quot;</span>;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"JDK16\"><a href=\"#JDK16\" class=\"headerlink\" title=\"JDK16\"></a>JDK16</h2><h4 id=\"instanceof-模式匹配\"><a href=\"#instanceof-模式匹配\" class=\"headerlink\" title=\"instanceof 模式匹配\"></a>instanceof 模式匹配</h4><p>对 instanceof 的改进，主要目的是为了让创建对象更简单、简洁和高效，并且可读性更强、提高安全性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 旧版</span><br><span class=\"hljs-comment\">// 每次在检查类型之后，都需要强制进行类型转换。</span><br><span class=\"hljs-comment\">// 类型转换后，需要提前创建一个局部变量来接收转换后的结果，代码显得多余且繁琐。</span><br><span class=\"hljs-keyword\">if</span> (person <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">Student</span>) &#123;<br>    <br>    <span class=\"hljs-title class_\">Student</span> student = (<span class=\"hljs-title class_\">Student</span>) person;<br>    student.<span class=\"hljs-title function_\">say</span>();<br>   <span class=\"hljs-comment\">// other student operations</span><br>&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (person <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">Teacher</span>) &#123;<br>    <br>    <span class=\"hljs-title class_\">Teacher</span> teacher = (<span class=\"hljs-title class_\">Teacher</span>) person;<br>    teacher.<span class=\"hljs-title function_\">say</span>();<br>    <span class=\"hljs-comment\">// other teacher operations</span><br>&#125;<br><br><span class=\"hljs-comment\">// 新版</span><br><span class=\"hljs-comment\">// 对 person 对象进行类型匹配，校验 person 对象是否为 Student 类型</span><br><span class=\"hljs-comment\">// 如果类型匹配成功，则会转换为 Student 类型，并赋值给模式局部变量 student</span><br><span class=\"hljs-keyword\">if</span> (person <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">Student</span> student) &#123;<br>    <br>\t<span class=\"hljs-comment\">//这里的 student 变量只能在 if 块中使用，而不能在 else if/else 中使用</span><br>    student.<span class=\"hljs-title function_\">say</span>();<br>   <span class=\"hljs-comment\">// other student operations</span><br>&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (person <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">Teacher</span> teacher) &#123;<br>    <br>    teacher.<span class=\"hljs-title function_\">say</span>();<br>    <span class=\"hljs-comment\">// other teacher operations</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>如果 if 条件中有 &amp;&amp; 运算符时，当 instanceof 类型匹配成功，模式局部变量的作用范围也可以相应延长，如下面代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">if</span> (obj <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">String</span> s &amp;&amp; s.<span class=\"hljs-title function_\">length</span>() &gt; <span class=\"hljs-number\">5</span>) &#123;<br>    .. s.<span class=\"hljs-title function_\">contains</span>(..) ..&#125;<br></code></pre></td></tr></table></figure>\n<p>注意：这种作用范围延长，并不适用于或 || 运算符，因为即便 || 运算符左边的 instanceof 类型匹配没有成功也不会造成短路，依旧会执行到||运算符右边的表达式.但是如果左边instanceof 类型匹配没有成功，局部变量并未定义赋值，此时使用会产生问题。</p>\n<h4 id=\"Records类型\"><a href=\"#Records类型\" class=\"headerlink\" title=\"Records类型\"></a>Records类型</h4><ul>\n<li>Record 类型允许在代码中使用紧凑的语法形式来声明类，而这些类能够作为不可变数据类型的封装持有者。Record 这一特性主要用在特定领域的类上；</li>\n<li>与枚举类型一样，Record 类型是一种受限形式的类型，主要用于存储、保存数据，并且没有其它额外自定义行为的场景下。</li>\n<li>效果有些类似 Lombok 的 @Data 注解、Kotlin 中的 data class，但是又不尽完全相同，它们的共同点都是类的部分或者全部可以直接在类头中定义、描述，并且这个类只用于存储数据而已。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 示例</span><br>public record <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-title class_\">String</span> name, int age) &#123;<br>    <br>    public <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title class_\">String</span> address;<br><br>    public <span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">getName</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <br>        <span class=\"hljs-keyword\">return</span> name;<br>    &#125;<br>&#125;<br><br><br><span class=\"hljs-comment\">// 编译后反编译的结果</span><br>public final <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">java.lang.Record</span> &#123;<br>    <br>    private final java.<span class=\"hljs-property\">lang</span>.<span class=\"hljs-property\">String</span> name;<br>    private final java.<span class=\"hljs-property\">lang</span>.<span class=\"hljs-property\">String</span> age;<br><br>    public <span class=\"hljs-title class_\">Person</span>(java.<span class=\"hljs-property\">lang</span>.<span class=\"hljs-property\">String</span> name, java.<span class=\"hljs-property\">lang</span>.<span class=\"hljs-property\">String</span> age) &#123;<br>     <span class=\"hljs-comment\">/* compiled code */</span> &#125;<br><br>    public java.<span class=\"hljs-property\">lang</span>.<span class=\"hljs-property\">String</span> <span class=\"hljs-title function_\">getName</span>(<span class=\"hljs-params\"></span>) &#123;<br>     <span class=\"hljs-comment\">/* compiled code */</span> &#125;<br><br>    public java.<span class=\"hljs-property\">lang</span>.<span class=\"hljs-property\">String</span> <span class=\"hljs-title function_\">toString</span>(<span class=\"hljs-params\"></span>) &#123;<br>     <span class=\"hljs-comment\">/* compiled code */</span> &#125;<br><br>    public final int <span class=\"hljs-title function_\">hashCode</span>(<span class=\"hljs-params\"></span>) &#123;<br>     <span class=\"hljs-comment\">/* compiled code */</span> &#125;<br><br>    public final boolean <span class=\"hljs-title function_\">equals</span>(<span class=\"hljs-params\">java.lang.<span class=\"hljs-built_in\">Object</span> o</span>) &#123;<br>     <span class=\"hljs-comment\">/* compiled code */</span> &#125;<br><br>    public java.<span class=\"hljs-property\">lang</span>.<span class=\"hljs-property\">String</span> <span class=\"hljs-title function_\">name</span>(<span class=\"hljs-params\"></span>) &#123;<br>     <span class=\"hljs-comment\">/* compiled code */</span> &#125;<br><br>    public java.<span class=\"hljs-property\">lang</span>.<span class=\"hljs-property\">String</span> <span class=\"hljs-title function_\">age</span>(<span class=\"hljs-params\"></span>) &#123;<br>     <span class=\"hljs-comment\">/* compiled code */</span> &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>可以得出，当用 Record 来声明一个类时，该类将自动拥有下面特征：</p>\n<ul>\n<li>拥有一个构造方法</li>\n<li>获取成员属性值的方法：name()、age()</li>\n<li>hashCode() 方法和 euqals() 方法</li>\n<li>toString() 方法类</li>\n<li>对象被 final 关键字修饰，不能被继承；类的成员变量也都被 final 修饰，不能再被赋值使用。</li>\n<li>可以在 Record 声明的类中定义静态属性和方法。</li>\n<li>注意，不能在 Record 声明的类中定义成员变量，类也不能声明为抽象类等。</li>\n</ul>\n<h2 id=\"JDK17\"><a href=\"#JDK17\" class=\"headerlink\" title=\"JDK17\"></a>JDK17</h2><h4 id=\"密封的类和接口\"><a href=\"#密封的类和接口\" class=\"headerlink\" title=\"密封的类和接口\"></a>密封的类和接口</h4><p>用来增强 Java 编程语言，防止其他类或接口扩展或实现它们。</p>\n<p>使用修饰符<strong>sealed</strong>，您可以将一个类声明为密封类。<br>密封的类使用关键字<strong>permits</strong>列出可以直接扩展它的类。<br>子类可以是最终的、非密封的或密封的。<br><strong>继承了密封类的子类可以使用non-sealed修饰，这样任何类都可以继承这个子类。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 旧版</span><br>public <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span> &#123;<br>     &#125; <span class=\"hljs-comment\">//人</span><br> <br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Teacher</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Person</span> &#123;<br>     &#125;<span class=\"hljs-comment\">//教师</span><br> <br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Worker</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Person</span> &#123;<br>     &#125;  <span class=\"hljs-comment\">//工人</span><br> <br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Student</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Person</span>&#123;<br>     &#125; <span class=\"hljs-comment\">//学生</span><br><br><br><span class=\"hljs-comment\">// 新版</span><br><span class=\"hljs-comment\">// 添加sealed修饰符，permits后面跟上只能被继承的子类名称</span><br>public sealed <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span> permits <span class=\"hljs-title class_\">Teacher</span>, <span class=\"hljs-title class_\">Worker</span>, <span class=\"hljs-title class_\">Student</span>&#123;<br>     &#125; <span class=\"hljs-comment\">//人</span><br> <br><span class=\"hljs-comment\">// 子类可以被修饰为 final</span><br>final <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Teacher</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Person</span> &#123;<br>     &#125;<span class=\"hljs-comment\">//教师</span><br> <br><span class=\"hljs-comment\">// 子类可以被修饰为 non-sealed，此时 Worker类就成了普通类，谁都可以继承它</span><br>non-sealed <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Worker</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Person</span> &#123;<br>     &#125;  <span class=\"hljs-comment\">//工人</span><br><span class=\"hljs-comment\">// 任何类都可以继承Worker</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AnyClass</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Worker</span>&#123;<br>    &#125;<br> <br><span class=\"hljs-comment\">//子类可以被修饰为 sealed,同上</span><br>sealed <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Student</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Person</span> permits <span class=\"hljs-title class_\">MiddleSchoolStudent</span>,<span class=\"hljs-title class_\">GraduateStudent</span>&#123;<br>     &#125; <span class=\"hljs-comment\">//学生</span><br><br>final <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MiddleSchoolStudent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Student</span> &#123;<br>     &#125;  <span class=\"hljs-comment\">//中学生</span><br><br>final <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GraduateStudent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Student</span> &#123;<br>     &#125;  <span class=\"hljs-comment\">//研究生</span><br></code></pre></td></tr></table></figure>\n<p>可以限制类的层次结构。</p>\n"},{"title":"IDEA换源","author":null,"date":"2021-04-06T01:13:33.000Z","_content":"#### IDEA打开setting，搜索maven\n\n如图：\n![](https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151953435.png)\n\n右侧两个override\n\n* 第一个是配置文件的路径重写\n* 第二个是仓库路径重写\n\n更改为自己的setting.xml的路径即可\n\nsetting.xml的内容\n```js \n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0\n                        https://maven.apache.org/xsd/settings-1.0.0.xsd\">\n    <mirrors>\n        <mirror>\n\t\t\t<id>aliyunmaven</id>\n\t\t\t<mirrorOf>*</mirrorOf>\n\t\t\t<name>阿里云公共仓库</name>\n\t\t\t<url>https://maven.aliyun.com/repository/public</url>\n\t\t</mirror>\n    </mirrors>\n</settings>\n```","source":"_posts/IDEA换源.md","raw":"---\ntitle: IDEA换源\nauthor: \ntags: \n       - Java学习\n\ncategory: \n       - Java学习\n\ndate: 2021-04-06 09:13:33\n---\n#### IDEA打开setting，搜索maven\n\n如图：\n![](https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151953435.png)\n\n右侧两个override\n\n* 第一个是配置文件的路径重写\n* 第二个是仓库路径重写\n\n更改为自己的setting.xml的路径即可\n\nsetting.xml的内容\n```js \n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0\n                        https://maven.apache.org/xsd/settings-1.0.0.xsd\">\n    <mirrors>\n        <mirror>\n\t\t\t<id>aliyunmaven</id>\n\t\t\t<mirrorOf>*</mirrorOf>\n\t\t\t<name>阿里云公共仓库</name>\n\t\t\t<url>https://maven.aliyun.com/repository/public</url>\n\t\t</mirror>\n    </mirrors>\n</settings>\n```","slug":"IDEA换源","published":1,"updated":"2024-03-15T11:53:03.388Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clttq59b40005zwveage0g4qr","content":"<h4 id=\"IDEA打开setting，搜索maven\"><a href=\"#IDEA打开setting，搜索maven\" class=\"headerlink\" title=\"IDEA打开setting，搜索maven\"></a>IDEA打开setting，搜索maven</h4><p>如图：<br><img src=\"https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151953435.png\"></p>\n<p>右侧两个override</p>\n<ul>\n<li>第一个是配置文件的路径重写</li>\n<li>第二个是仓库路径重写</li>\n</ul>\n<p>更改为自己的setting.xml的路径即可</p>\n<p>setting.xml的内容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&lt;settings xmlns=<span class=\"hljs-string\">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span><br>    <span class=\"hljs-attr\">xmlns</span>:xsi=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>    <span class=\"hljs-attr\">xsi</span>:schemaLocation=<span class=\"hljs-string\">&quot;http://maven.apache.org/SETTINGS/1.0.0</span><br><span class=\"hljs-string\">                        https://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;<br>    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirrors</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirror</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>aliyunmaven<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirrorOf</span>&gt;</span>*<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirrorOf</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>阿里云公共仓库<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span></span><br><span class=\"language-xml\">\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirror</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirrors</span>&gt;</span></span><br>&lt;/settings&gt;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"IDEA打开setting，搜索maven\"><a href=\"#IDEA打开setting，搜索maven\" class=\"headerlink\" title=\"IDEA打开setting，搜索maven\"></a>IDEA打开setting，搜索maven</h4><p>如图：<br><img src=\"https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151953435.png\"></p>\n<p>右侧两个override</p>\n<ul>\n<li>第一个是配置文件的路径重写</li>\n<li>第二个是仓库路径重写</li>\n</ul>\n<p>更改为自己的setting.xml的路径即可</p>\n<p>setting.xml的内容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&lt;settings xmlns=<span class=\"hljs-string\">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span><br>    <span class=\"hljs-attr\">xmlns</span>:xsi=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>    <span class=\"hljs-attr\">xsi</span>:schemaLocation=<span class=\"hljs-string\">&quot;http://maven.apache.org/SETTINGS/1.0.0</span><br><span class=\"hljs-string\">                        https://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;<br>    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirrors</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirror</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>aliyunmaven<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirrorOf</span>&gt;</span>*<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirrorOf</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>阿里云公共仓库<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span></span><br><span class=\"language-xml\">\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirror</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirrors</span>&gt;</span></span><br>&lt;/settings&gt;<br></code></pre></td></tr></table></figure>"},{"title":"Lambda表达式和Stream API","author":null,"date":"2023-08-19T08:26:01.000Z","_content":"### Lambda表达式\n\n**1. 有且仅有一个参数时，小括号可以省略（无参数时，小括号不能省略）**\n\n**2. 语句只有一条时，可以省略大括号和return**\n```js \nRunnable runnable = ()-> System.out.println(\"Hello,World!\");\n\nBinaryOperator<Long> bo1 = x -> x+1;\n\nBinaryOperator<Long> bo2 = (x,y) -> x+y;\n\nBinaryOperator<Long> bo3 = (x,y) -> {\n    \n\tSystem.out.println(\"Hello,World!\");\n\treturn x+y;\n};\n```\n \nLambda 表达式中无需指定参数类型，程序依然可以编译，这是因为 javac 根据程序的上下文，在后台推断出了参数的类型。\n\n### Stream API\n\n“集合讲的是数据，流讲的是计算！”\n\n##### 创建\n\nCollection创建\n\n```js \nstream() \t\t\t//返回一个顺序流\nparallelStream()\t//返回一个并行流\n```\n\nArray创建\n\n```js \nstream(T[] array)\t//返回一个流\n```\n\n值创建\n\n```js \npublic static<T> Stream<T> of(T... values)\t\t//返回一个流\n```\n\n函数创建无限流\n\n```js \n// 迭代\npublic static<T> Stream<T> of(T... values)\n\n// 生成\npublic static<T> Stream<T> generate(Supplier<T> s)\n```\n\n##### 中间操作\n\n多个中间操作可以连接起来形成一个流水线，除非流水线上触发终止操作，否则中间操作不会执行任何的处理！而在终止操作时一次性全部处理，称为“惰性求值”。\n\n筛选与切片(filter、distinct、limit、skip)\n\n```js \nList<Integer> integerList = Arrays.asList(4, 5, 6, 7, 7, 7, 8, 8, 9);\n\n//filter(Predicate p)接收 Lambda，从流中排除某些元素。\nStream<Integer> integerStream = integerList.stream().filter(x -> x > 6);\nSystem.out.println(integerStream.collect(Collectors.toList()));//[7, 7, 7, 8, 8, 9]\n\n//distinct()筛选，通过流所生成元素的 hashCode() 和 equals() 去除重复元素\nStream<Integer> distinctStream = integerList.stream().distinct();\nSystem.out.println(distinctStream.collect(Collectors.toList()));//[4, 5, 6, 7, 8, 9]\n\n//limit(long maxSize) 截断流，使其元素不超过给定数量。\nStream<Integer> limitStream = integerList.stream().limit(5);\nSystem.out.println(limitStream.collect(Collectors.toList()));//[4, 5, 6, 7, 7]\n\n//skip(long n)跳过元素，返回一个扔掉了前 n 个元素的流。\n//\t\t\t\t若流中元素不足 n 个，则返回一个空流。与 limit(n) 互补\nStream<Integer> skipStream = integerList.stream().skip(5);\nSystem.out.println(skipStream.collect(Collectors.toList()));//[7, 8, 8, 9]\n```\n\n映射（map、flatMap）\n\n```js \npublic static Stream<Character> filterCharacter(String str){\n    \n    List<Character> list = new ArrayList<>();\n    for (Character ch : str.toCharArray()) {\n    \n        list.add(ch);\n    }\n    return list.stream();\n}\n\n@Test\npublic void test2(){\n    \n    List<String> stringsList = Arrays.asList(\"aaa\", \"bbb\");\n\n    //map(Function f 接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。\n    Stream<String> mapStream = stringsList.stream().map(String::toUpperCase);\n    System.out.println(mapStream.collect(Collectors.toList()));//[AAA, BBB]\n\n\n    //flatMap(Function f)  接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流\n    Stream<Character> characterStream = stringsList.stream().flatMap(StreamTest::filterCharacter).map(Character::toUpperCase);\n    System.out.println(characterStream.collect(Collectors.toList()));//[A, A, A, B, B, B]\n}\n```\n\n排序(sorted)\n\n```js \n//sorted() 生一个新流，其中按自然顺序排序\nList<Integer> integerList = Arrays.asList(7, 4, 5, 2, 6, 9);\nStream<Integer> sorted = integerList.stream().sorted();\nSystem.out.println(sorted.collect(Collectors.toList()));//[2, 4, 5, 6, 7, 9]\n\n//sorted(Comparator comp) 产生一个新流，其中按比较器顺序排序\nStream<Integer> sorted1 = integerList.stream().sorted((a, b) -> b - a);\nSystem.out.println(sorted1.collect(Collectors.toList()));//[9, 7, 6, 5, 4, 2]\n```\n\n##### 终止操作(allMatch、anyMatch、noneMatch、findFirst、findAny、count…)\n\n```js \nList<Integer> integerList = Arrays.asList(7, 4, 5, 2, 6, 9);\n//检查是否匹配所有元素\nboolean b = integerList.stream().allMatch(s -> s == 6);\n//检查是否至少匹配一个元素\nboolean b1 = integerList.stream().anyMatch(s -> s == 6);\n//检查是否没有匹配所有元素\nboolean b2 = integerList.stream().noneMatch(s -> s == 6);\n//返回第一个元素\nOptional<Integer> first= integerList.stream().findFirst();\n//返回当前流中的任意元素\nOptional<Integer> any = integerList.stream().findAny();\n//返回流中元素总数\nlong count = integerList.stream().count();\n//返回流中最大值\nOptional<Integer> max = integerList.stream().max(Integer::compare);\n//返回流中最小值\nOptional<Integer> min = integerList.stream().min(Integer::compare);\nSystem.out.println(b);//false\nSystem.out.println(b1);//true\nSystem.out.println(b2);//false\nSystem.out.println(first.get());//7\nSystem.out.println(any.get());//7\nSystem.out.println(count);//6\nSystem.out.println(max.get());//9\nSystem.out.println(min.get());//2\n//内部迭代\nintegerList.stream().forEach(System.out::print);//745269\n```\n \n1. Stream 自己不会存储元素。\n1. Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。\n1. Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。","source":"_posts/Lambda表达式和Stream API.md","raw":"---\ntitle: Lambda表达式和Stream API\nauthor: \ntags: \n       - java\n\ncategory: \n       - Java学习\n\ndate: 2023-08-19 16:26:01\n---\n### Lambda表达式\n\n**1. 有且仅有一个参数时，小括号可以省略（无参数时，小括号不能省略）**\n\n**2. 语句只有一条时，可以省略大括号和return**\n```js \nRunnable runnable = ()-> System.out.println(\"Hello,World!\");\n\nBinaryOperator<Long> bo1 = x -> x+1;\n\nBinaryOperator<Long> bo2 = (x,y) -> x+y;\n\nBinaryOperator<Long> bo3 = (x,y) -> {\n    \n\tSystem.out.println(\"Hello,World!\");\n\treturn x+y;\n};\n```\n \nLambda 表达式中无需指定参数类型，程序依然可以编译，这是因为 javac 根据程序的上下文，在后台推断出了参数的类型。\n\n### Stream API\n\n“集合讲的是数据，流讲的是计算！”\n\n##### 创建\n\nCollection创建\n\n```js \nstream() \t\t\t//返回一个顺序流\nparallelStream()\t//返回一个并行流\n```\n\nArray创建\n\n```js \nstream(T[] array)\t//返回一个流\n```\n\n值创建\n\n```js \npublic static<T> Stream<T> of(T... values)\t\t//返回一个流\n```\n\n函数创建无限流\n\n```js \n// 迭代\npublic static<T> Stream<T> of(T... values)\n\n// 生成\npublic static<T> Stream<T> generate(Supplier<T> s)\n```\n\n##### 中间操作\n\n多个中间操作可以连接起来形成一个流水线，除非流水线上触发终止操作，否则中间操作不会执行任何的处理！而在终止操作时一次性全部处理，称为“惰性求值”。\n\n筛选与切片(filter、distinct、limit、skip)\n\n```js \nList<Integer> integerList = Arrays.asList(4, 5, 6, 7, 7, 7, 8, 8, 9);\n\n//filter(Predicate p)接收 Lambda，从流中排除某些元素。\nStream<Integer> integerStream = integerList.stream().filter(x -> x > 6);\nSystem.out.println(integerStream.collect(Collectors.toList()));//[7, 7, 7, 8, 8, 9]\n\n//distinct()筛选，通过流所生成元素的 hashCode() 和 equals() 去除重复元素\nStream<Integer> distinctStream = integerList.stream().distinct();\nSystem.out.println(distinctStream.collect(Collectors.toList()));//[4, 5, 6, 7, 8, 9]\n\n//limit(long maxSize) 截断流，使其元素不超过给定数量。\nStream<Integer> limitStream = integerList.stream().limit(5);\nSystem.out.println(limitStream.collect(Collectors.toList()));//[4, 5, 6, 7, 7]\n\n//skip(long n)跳过元素，返回一个扔掉了前 n 个元素的流。\n//\t\t\t\t若流中元素不足 n 个，则返回一个空流。与 limit(n) 互补\nStream<Integer> skipStream = integerList.stream().skip(5);\nSystem.out.println(skipStream.collect(Collectors.toList()));//[7, 8, 8, 9]\n```\n\n映射（map、flatMap）\n\n```js \npublic static Stream<Character> filterCharacter(String str){\n    \n    List<Character> list = new ArrayList<>();\n    for (Character ch : str.toCharArray()) {\n    \n        list.add(ch);\n    }\n    return list.stream();\n}\n\n@Test\npublic void test2(){\n    \n    List<String> stringsList = Arrays.asList(\"aaa\", \"bbb\");\n\n    //map(Function f 接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。\n    Stream<String> mapStream = stringsList.stream().map(String::toUpperCase);\n    System.out.println(mapStream.collect(Collectors.toList()));//[AAA, BBB]\n\n\n    //flatMap(Function f)  接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流\n    Stream<Character> characterStream = stringsList.stream().flatMap(StreamTest::filterCharacter).map(Character::toUpperCase);\n    System.out.println(characterStream.collect(Collectors.toList()));//[A, A, A, B, B, B]\n}\n```\n\n排序(sorted)\n\n```js \n//sorted() 生一个新流，其中按自然顺序排序\nList<Integer> integerList = Arrays.asList(7, 4, 5, 2, 6, 9);\nStream<Integer> sorted = integerList.stream().sorted();\nSystem.out.println(sorted.collect(Collectors.toList()));//[2, 4, 5, 6, 7, 9]\n\n//sorted(Comparator comp) 产生一个新流，其中按比较器顺序排序\nStream<Integer> sorted1 = integerList.stream().sorted((a, b) -> b - a);\nSystem.out.println(sorted1.collect(Collectors.toList()));//[9, 7, 6, 5, 4, 2]\n```\n\n##### 终止操作(allMatch、anyMatch、noneMatch、findFirst、findAny、count…)\n\n```js \nList<Integer> integerList = Arrays.asList(7, 4, 5, 2, 6, 9);\n//检查是否匹配所有元素\nboolean b = integerList.stream().allMatch(s -> s == 6);\n//检查是否至少匹配一个元素\nboolean b1 = integerList.stream().anyMatch(s -> s == 6);\n//检查是否没有匹配所有元素\nboolean b2 = integerList.stream().noneMatch(s -> s == 6);\n//返回第一个元素\nOptional<Integer> first= integerList.stream().findFirst();\n//返回当前流中的任意元素\nOptional<Integer> any = integerList.stream().findAny();\n//返回流中元素总数\nlong count = integerList.stream().count();\n//返回流中最大值\nOptional<Integer> max = integerList.stream().max(Integer::compare);\n//返回流中最小值\nOptional<Integer> min = integerList.stream().min(Integer::compare);\nSystem.out.println(b);//false\nSystem.out.println(b1);//true\nSystem.out.println(b2);//false\nSystem.out.println(first.get());//7\nSystem.out.println(any.get());//7\nSystem.out.println(count);//6\nSystem.out.println(max.get());//9\nSystem.out.println(min.get());//2\n//内部迭代\nintegerList.stream().forEach(System.out::print);//745269\n```\n \n1. Stream 自己不会存储元素。\n1. Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。\n1. Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。","slug":"Lambda表达式和Stream API","published":1,"updated":"2024-03-15T08:23:29.134Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clttq59b50006zwve42wf46th","content":"<h3 id=\"Lambda表达式\"><a href=\"#Lambda表达式\" class=\"headerlink\" title=\"Lambda表达式\"></a>Lambda表达式</h3><p><strong>1. 有且仅有一个参数时，小括号可以省略（无参数时，小括号不能省略）</strong></p>\n<p><strong>2. 语句只有一条时，可以省略大括号和return</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title class_\">Runnable</span> runnable = ()-&gt; <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">&quot;Hello,World!&quot;</span>);<br><br><span class=\"hljs-title class_\">BinaryOperator</span>&lt;<span class=\"hljs-title class_\">Long</span>&gt; bo1 = x -&gt; x+<span class=\"hljs-number\">1</span>;<br><br><span class=\"hljs-title class_\">BinaryOperator</span>&lt;<span class=\"hljs-title class_\">Long</span>&gt; bo2 = (x,y) -&gt; x+y;<br><br><span class=\"hljs-title class_\">BinaryOperator</span>&lt;<span class=\"hljs-title class_\">Long</span>&gt; bo3 = (x,y) -&gt; &#123;<br>    <br>\t<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">&quot;Hello,World!&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> x+y;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<p>Lambda 表达式中无需指定参数类型，程序依然可以编译，这是因为 javac 根据程序的上下文，在后台推断出了参数的类型。</p>\n<h3 id=\"Stream-API\"><a href=\"#Stream-API\" class=\"headerlink\" title=\"Stream API\"></a>Stream API</h3><p>“集合讲的是数据，流讲的是计算！”</p>\n<h5 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h5><p>Collection创建</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">stream</span>() \t\t\t<span class=\"hljs-comment\">//返回一个顺序流</span><br><span class=\"hljs-title function_\">parallelStream</span>()\t<span class=\"hljs-comment\">//返回一个并行流</span><br></code></pre></td></tr></table></figure>\n\n<p>Array创建</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">stream</span>(T[] array)\t<span class=\"hljs-comment\">//返回一个流</span><br></code></pre></td></tr></table></figure>\n\n<p>值创建</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">public <span class=\"hljs-keyword\">static</span>&lt;T&gt; <span class=\"hljs-title class_\">Stream</span>&lt;T&gt; <span class=\"hljs-title function_\">of</span>(T... values)\t\t<span class=\"hljs-comment\">//返回一个流</span><br></code></pre></td></tr></table></figure>\n\n<p>函数创建无限流</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 迭代</span><br>public <span class=\"hljs-keyword\">static</span>&lt;T&gt; <span class=\"hljs-title class_\">Stream</span>&lt;T&gt; <span class=\"hljs-title function_\">of</span>(T... values)<br><br><span class=\"hljs-comment\">// 生成</span><br>public <span class=\"hljs-keyword\">static</span>&lt;T&gt; <span class=\"hljs-title class_\">Stream</span>&lt;T&gt; <span class=\"hljs-title function_\">generate</span>(<span class=\"hljs-title class_\">Supplier</span>&lt;T&gt; s)<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"中间操作\"><a href=\"#中间操作\" class=\"headerlink\" title=\"中间操作\"></a>中间操作</h5><p>多个中间操作可以连接起来形成一个流水线，除非流水线上触发终止操作，否则中间操作不会执行任何的处理！而在终止操作时一次性全部处理，称为“惰性求值”。</p>\n<p>筛选与切片(filter、distinct、limit、skip)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title class_\">List</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt; integerList = <span class=\"hljs-title class_\">Arrays</span>.<span class=\"hljs-title function_\">asList</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>);<br><br><span class=\"hljs-comment\">//filter(Predicate p)接收 Lambda，从流中排除某些元素。</span><br><span class=\"hljs-title class_\">Stream</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt; integerStream = integerList.<span class=\"hljs-title function_\">stream</span>().<span class=\"hljs-title function_\">filter</span>(x -&gt; x &gt; <span class=\"hljs-number\">6</span>);<br><span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(integerStream.<span class=\"hljs-title function_\">collect</span>(<span class=\"hljs-title class_\">Collectors</span>.<span class=\"hljs-title function_\">toList</span>()));<span class=\"hljs-comment\">//[7, 7, 7, 8, 8, 9]</span><br><br><span class=\"hljs-comment\">//distinct()筛选，通过流所生成元素的 hashCode() 和 equals() 去除重复元素</span><br><span class=\"hljs-title class_\">Stream</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt; distinctStream = integerList.<span class=\"hljs-title function_\">stream</span>().<span class=\"hljs-title function_\">distinct</span>();<br><span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(distinctStream.<span class=\"hljs-title function_\">collect</span>(<span class=\"hljs-title class_\">Collectors</span>.<span class=\"hljs-title function_\">toList</span>()));<span class=\"hljs-comment\">//[4, 5, 6, 7, 8, 9]</span><br><br><span class=\"hljs-comment\">//limit(long maxSize) 截断流，使其元素不超过给定数量。</span><br><span class=\"hljs-title class_\">Stream</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt; limitStream = integerList.<span class=\"hljs-title function_\">stream</span>().<span class=\"hljs-title function_\">limit</span>(<span class=\"hljs-number\">5</span>);<br><span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(limitStream.<span class=\"hljs-title function_\">collect</span>(<span class=\"hljs-title class_\">Collectors</span>.<span class=\"hljs-title function_\">toList</span>()));<span class=\"hljs-comment\">//[4, 5, 6, 7, 7]</span><br><br><span class=\"hljs-comment\">//skip(long n)跳过元素，返回一个扔掉了前 n 个元素的流。</span><br><span class=\"hljs-comment\">//\t\t\t\t若流中元素不足 n 个，则返回一个空流。与 limit(n) 互补</span><br><span class=\"hljs-title class_\">Stream</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt; skipStream = integerList.<span class=\"hljs-title function_\">stream</span>().<span class=\"hljs-title function_\">skip</span>(<span class=\"hljs-number\">5</span>);<br><span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(skipStream.<span class=\"hljs-title function_\">collect</span>(<span class=\"hljs-title class_\">Collectors</span>.<span class=\"hljs-title function_\">toList</span>()));<span class=\"hljs-comment\">//[7, 8, 8, 9]</span><br></code></pre></td></tr></table></figure>\n\n<p>映射（map、flatMap）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">public <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title class_\">Stream</span>&lt;<span class=\"hljs-title class_\">Character</span>&gt; <span class=\"hljs-title function_\">filterCharacter</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> str</span>)&#123;<br>    <br>    <span class=\"hljs-title class_\">List</span>&lt;<span class=\"hljs-title class_\">Character</span>&gt; list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-title class_\">Character</span> ch : str.<span class=\"hljs-title function_\">toCharArray</span>()) &#123;<br>    <br>        list.<span class=\"hljs-title function_\">add</span>(ch);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> list.<span class=\"hljs-title function_\">stream</span>();<br>&#125;<br><br>@<span class=\"hljs-title class_\">Test</span><br>public <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test2</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <br>    <span class=\"hljs-title class_\">List</span>&lt;<span class=\"hljs-title class_\">String</span>&gt; stringsList = <span class=\"hljs-title class_\">Arrays</span>.<span class=\"hljs-title function_\">asList</span>(<span class=\"hljs-string\">&quot;aaa&quot;</span>, <span class=\"hljs-string\">&quot;bbb&quot;</span>);<br><br>    <span class=\"hljs-comment\">//map(Function f 接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</span><br>    <span class=\"hljs-title class_\">Stream</span>&lt;<span class=\"hljs-title class_\">String</span>&gt; mapStream = stringsList.<span class=\"hljs-title function_\">stream</span>().<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-title class_\">String</span>::toUpperCase);<br>    <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(mapStream.<span class=\"hljs-title function_\">collect</span>(<span class=\"hljs-title class_\">Collectors</span>.<span class=\"hljs-title function_\">toList</span>()));<span class=\"hljs-comment\">//[AAA, BBB]</span><br><br><br>    <span class=\"hljs-comment\">//flatMap(Function f)  接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流</span><br>    <span class=\"hljs-title class_\">Stream</span>&lt;<span class=\"hljs-title class_\">Character</span>&gt; characterStream = stringsList.<span class=\"hljs-title function_\">stream</span>().<span class=\"hljs-title function_\">flatMap</span>(<span class=\"hljs-title class_\">StreamTest</span>::filterCharacter).<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-title class_\">Character</span>::toUpperCase);<br>    <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(characterStream.<span class=\"hljs-title function_\">collect</span>(<span class=\"hljs-title class_\">Collectors</span>.<span class=\"hljs-title function_\">toList</span>()));<span class=\"hljs-comment\">//[A, A, A, B, B, B]</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>排序(sorted)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//sorted() 生一个新流，其中按自然顺序排序</span><br><span class=\"hljs-title class_\">List</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt; integerList = <span class=\"hljs-title class_\">Arrays</span>.<span class=\"hljs-title function_\">asList</span>(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">9</span>);<br><span class=\"hljs-title class_\">Stream</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt; sorted = integerList.<span class=\"hljs-title function_\">stream</span>().<span class=\"hljs-title function_\">sorted</span>();<br><span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(sorted.<span class=\"hljs-title function_\">collect</span>(<span class=\"hljs-title class_\">Collectors</span>.<span class=\"hljs-title function_\">toList</span>()));<span class=\"hljs-comment\">//[2, 4, 5, 6, 7, 9]</span><br><br><span class=\"hljs-comment\">//sorted(Comparator comp) 产生一个新流，其中按比较器顺序排序</span><br><span class=\"hljs-title class_\">Stream</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt; sorted1 = integerList.<span class=\"hljs-title function_\">stream</span>().<span class=\"hljs-title function_\">sorted</span>((a, b) -&gt; b - a);<br><span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(sorted1.<span class=\"hljs-title function_\">collect</span>(<span class=\"hljs-title class_\">Collectors</span>.<span class=\"hljs-title function_\">toList</span>()));<span class=\"hljs-comment\">//[9, 7, 6, 5, 4, 2]</span><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"终止操作-allMatch、anyMatch、noneMatch、findFirst、findAny、count…\"><a href=\"#终止操作-allMatch、anyMatch、noneMatch、findFirst、findAny、count…\" class=\"headerlink\" title=\"终止操作(allMatch、anyMatch、noneMatch、findFirst、findAny、count…)\"></a>终止操作(allMatch、anyMatch、noneMatch、findFirst、findAny、count…)</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title class_\">List</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt; integerList = <span class=\"hljs-title class_\">Arrays</span>.<span class=\"hljs-title function_\">asList</span>(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">9</span>);<br><span class=\"hljs-comment\">//检查是否匹配所有元素</span><br>boolean b = integerList.<span class=\"hljs-title function_\">stream</span>().<span class=\"hljs-title function_\">allMatch</span>(s -&gt; s == <span class=\"hljs-number\">6</span>);<br><span class=\"hljs-comment\">//检查是否至少匹配一个元素</span><br>boolean b1 = integerList.<span class=\"hljs-title function_\">stream</span>().<span class=\"hljs-title function_\">anyMatch</span>(s -&gt; s == <span class=\"hljs-number\">6</span>);<br><span class=\"hljs-comment\">//检查是否没有匹配所有元素</span><br>boolean b2 = integerList.<span class=\"hljs-title function_\">stream</span>().<span class=\"hljs-title function_\">noneMatch</span>(s -&gt; s == <span class=\"hljs-number\">6</span>);<br><span class=\"hljs-comment\">//返回第一个元素</span><br><span class=\"hljs-title class_\">Optional</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt; first= integerList.<span class=\"hljs-title function_\">stream</span>().<span class=\"hljs-title function_\">findFirst</span>();<br><span class=\"hljs-comment\">//返回当前流中的任意元素</span><br><span class=\"hljs-title class_\">Optional</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt; any = integerList.<span class=\"hljs-title function_\">stream</span>().<span class=\"hljs-title function_\">findAny</span>();<br><span class=\"hljs-comment\">//返回流中元素总数</span><br>long count = integerList.<span class=\"hljs-title function_\">stream</span>().<span class=\"hljs-title function_\">count</span>();<br><span class=\"hljs-comment\">//返回流中最大值</span><br><span class=\"hljs-title class_\">Optional</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt; max = integerList.<span class=\"hljs-title function_\">stream</span>().<span class=\"hljs-title function_\">max</span>(<span class=\"hljs-title class_\">Integer</span>::compare);<br><span class=\"hljs-comment\">//返回流中最小值</span><br><span class=\"hljs-title class_\">Optional</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt; min = integerList.<span class=\"hljs-title function_\">stream</span>().<span class=\"hljs-title function_\">min</span>(<span class=\"hljs-title class_\">Integer</span>::compare);<br><span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(b);<span class=\"hljs-comment\">//false</span><br><span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(b1);<span class=\"hljs-comment\">//true</span><br><span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(b2);<span class=\"hljs-comment\">//false</span><br><span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(first.<span class=\"hljs-title function_\">get</span>());<span class=\"hljs-comment\">//7</span><br><span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(any.<span class=\"hljs-title function_\">get</span>());<span class=\"hljs-comment\">//7</span><br><span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(count);<span class=\"hljs-comment\">//6</span><br><span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(max.<span class=\"hljs-title function_\">get</span>());<span class=\"hljs-comment\">//9</span><br><span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(min.<span class=\"hljs-title function_\">get</span>());<span class=\"hljs-comment\">//2</span><br><span class=\"hljs-comment\">//内部迭代</span><br>integerList.<span class=\"hljs-title function_\">stream</span>().<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>::print);<span class=\"hljs-comment\">//745269</span><br></code></pre></td></tr></table></figure>\n<ol>\n<li>Stream 自己不会存储元素。</li>\n<li>Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。</li>\n<li>Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Lambda表达式\"><a href=\"#Lambda表达式\" class=\"headerlink\" title=\"Lambda表达式\"></a>Lambda表达式</h3><p><strong>1. 有且仅有一个参数时，小括号可以省略（无参数时，小括号不能省略）</strong></p>\n<p><strong>2. 语句只有一条时，可以省略大括号和return</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title class_\">Runnable</span> runnable = ()-&gt; <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">&quot;Hello,World!&quot;</span>);<br><br><span class=\"hljs-title class_\">BinaryOperator</span>&lt;<span class=\"hljs-title class_\">Long</span>&gt; bo1 = x -&gt; x+<span class=\"hljs-number\">1</span>;<br><br><span class=\"hljs-title class_\">BinaryOperator</span>&lt;<span class=\"hljs-title class_\">Long</span>&gt; bo2 = (x,y) -&gt; x+y;<br><br><span class=\"hljs-title class_\">BinaryOperator</span>&lt;<span class=\"hljs-title class_\">Long</span>&gt; bo3 = (x,y) -&gt; &#123;<br>    <br>\t<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">&quot;Hello,World!&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> x+y;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<p>Lambda 表达式中无需指定参数类型，程序依然可以编译，这是因为 javac 根据程序的上下文，在后台推断出了参数的类型。</p>\n<h3 id=\"Stream-API\"><a href=\"#Stream-API\" class=\"headerlink\" title=\"Stream API\"></a>Stream API</h3><p>“集合讲的是数据，流讲的是计算！”</p>\n<h5 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h5><p>Collection创建</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">stream</span>() \t\t\t<span class=\"hljs-comment\">//返回一个顺序流</span><br><span class=\"hljs-title function_\">parallelStream</span>()\t<span class=\"hljs-comment\">//返回一个并行流</span><br></code></pre></td></tr></table></figure>\n\n<p>Array创建</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">stream</span>(T[] array)\t<span class=\"hljs-comment\">//返回一个流</span><br></code></pre></td></tr></table></figure>\n\n<p>值创建</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">public <span class=\"hljs-keyword\">static</span>&lt;T&gt; <span class=\"hljs-title class_\">Stream</span>&lt;T&gt; <span class=\"hljs-title function_\">of</span>(T... values)\t\t<span class=\"hljs-comment\">//返回一个流</span><br></code></pre></td></tr></table></figure>\n\n<p>函数创建无限流</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 迭代</span><br>public <span class=\"hljs-keyword\">static</span>&lt;T&gt; <span class=\"hljs-title class_\">Stream</span>&lt;T&gt; <span class=\"hljs-title function_\">of</span>(T... values)<br><br><span class=\"hljs-comment\">// 生成</span><br>public <span class=\"hljs-keyword\">static</span>&lt;T&gt; <span class=\"hljs-title class_\">Stream</span>&lt;T&gt; <span class=\"hljs-title function_\">generate</span>(<span class=\"hljs-title class_\">Supplier</span>&lt;T&gt; s)<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"中间操作\"><a href=\"#中间操作\" class=\"headerlink\" title=\"中间操作\"></a>中间操作</h5><p>多个中间操作可以连接起来形成一个流水线，除非流水线上触发终止操作，否则中间操作不会执行任何的处理！而在终止操作时一次性全部处理，称为“惰性求值”。</p>\n<p>筛选与切片(filter、distinct、limit、skip)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title class_\">List</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt; integerList = <span class=\"hljs-title class_\">Arrays</span>.<span class=\"hljs-title function_\">asList</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>);<br><br><span class=\"hljs-comment\">//filter(Predicate p)接收 Lambda，从流中排除某些元素。</span><br><span class=\"hljs-title class_\">Stream</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt; integerStream = integerList.<span class=\"hljs-title function_\">stream</span>().<span class=\"hljs-title function_\">filter</span>(x -&gt; x &gt; <span class=\"hljs-number\">6</span>);<br><span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(integerStream.<span class=\"hljs-title function_\">collect</span>(<span class=\"hljs-title class_\">Collectors</span>.<span class=\"hljs-title function_\">toList</span>()));<span class=\"hljs-comment\">//[7, 7, 7, 8, 8, 9]</span><br><br><span class=\"hljs-comment\">//distinct()筛选，通过流所生成元素的 hashCode() 和 equals() 去除重复元素</span><br><span class=\"hljs-title class_\">Stream</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt; distinctStream = integerList.<span class=\"hljs-title function_\">stream</span>().<span class=\"hljs-title function_\">distinct</span>();<br><span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(distinctStream.<span class=\"hljs-title function_\">collect</span>(<span class=\"hljs-title class_\">Collectors</span>.<span class=\"hljs-title function_\">toList</span>()));<span class=\"hljs-comment\">//[4, 5, 6, 7, 8, 9]</span><br><br><span class=\"hljs-comment\">//limit(long maxSize) 截断流，使其元素不超过给定数量。</span><br><span class=\"hljs-title class_\">Stream</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt; limitStream = integerList.<span class=\"hljs-title function_\">stream</span>().<span class=\"hljs-title function_\">limit</span>(<span class=\"hljs-number\">5</span>);<br><span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(limitStream.<span class=\"hljs-title function_\">collect</span>(<span class=\"hljs-title class_\">Collectors</span>.<span class=\"hljs-title function_\">toList</span>()));<span class=\"hljs-comment\">//[4, 5, 6, 7, 7]</span><br><br><span class=\"hljs-comment\">//skip(long n)跳过元素，返回一个扔掉了前 n 个元素的流。</span><br><span class=\"hljs-comment\">//\t\t\t\t若流中元素不足 n 个，则返回一个空流。与 limit(n) 互补</span><br><span class=\"hljs-title class_\">Stream</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt; skipStream = integerList.<span class=\"hljs-title function_\">stream</span>().<span class=\"hljs-title function_\">skip</span>(<span class=\"hljs-number\">5</span>);<br><span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(skipStream.<span class=\"hljs-title function_\">collect</span>(<span class=\"hljs-title class_\">Collectors</span>.<span class=\"hljs-title function_\">toList</span>()));<span class=\"hljs-comment\">//[7, 8, 8, 9]</span><br></code></pre></td></tr></table></figure>\n\n<p>映射（map、flatMap）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">public <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title class_\">Stream</span>&lt;<span class=\"hljs-title class_\">Character</span>&gt; <span class=\"hljs-title function_\">filterCharacter</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> str</span>)&#123;<br>    <br>    <span class=\"hljs-title class_\">List</span>&lt;<span class=\"hljs-title class_\">Character</span>&gt; list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-title class_\">Character</span> ch : str.<span class=\"hljs-title function_\">toCharArray</span>()) &#123;<br>    <br>        list.<span class=\"hljs-title function_\">add</span>(ch);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> list.<span class=\"hljs-title function_\">stream</span>();<br>&#125;<br><br>@<span class=\"hljs-title class_\">Test</span><br>public <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test2</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <br>    <span class=\"hljs-title class_\">List</span>&lt;<span class=\"hljs-title class_\">String</span>&gt; stringsList = <span class=\"hljs-title class_\">Arrays</span>.<span class=\"hljs-title function_\">asList</span>(<span class=\"hljs-string\">&quot;aaa&quot;</span>, <span class=\"hljs-string\">&quot;bbb&quot;</span>);<br><br>    <span class=\"hljs-comment\">//map(Function f 接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</span><br>    <span class=\"hljs-title class_\">Stream</span>&lt;<span class=\"hljs-title class_\">String</span>&gt; mapStream = stringsList.<span class=\"hljs-title function_\">stream</span>().<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-title class_\">String</span>::toUpperCase);<br>    <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(mapStream.<span class=\"hljs-title function_\">collect</span>(<span class=\"hljs-title class_\">Collectors</span>.<span class=\"hljs-title function_\">toList</span>()));<span class=\"hljs-comment\">//[AAA, BBB]</span><br><br><br>    <span class=\"hljs-comment\">//flatMap(Function f)  接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流</span><br>    <span class=\"hljs-title class_\">Stream</span>&lt;<span class=\"hljs-title class_\">Character</span>&gt; characterStream = stringsList.<span class=\"hljs-title function_\">stream</span>().<span class=\"hljs-title function_\">flatMap</span>(<span class=\"hljs-title class_\">StreamTest</span>::filterCharacter).<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-title class_\">Character</span>::toUpperCase);<br>    <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(characterStream.<span class=\"hljs-title function_\">collect</span>(<span class=\"hljs-title class_\">Collectors</span>.<span class=\"hljs-title function_\">toList</span>()));<span class=\"hljs-comment\">//[A, A, A, B, B, B]</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>排序(sorted)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//sorted() 生一个新流，其中按自然顺序排序</span><br><span class=\"hljs-title class_\">List</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt; integerList = <span class=\"hljs-title class_\">Arrays</span>.<span class=\"hljs-title function_\">asList</span>(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">9</span>);<br><span class=\"hljs-title class_\">Stream</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt; sorted = integerList.<span class=\"hljs-title function_\">stream</span>().<span class=\"hljs-title function_\">sorted</span>();<br><span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(sorted.<span class=\"hljs-title function_\">collect</span>(<span class=\"hljs-title class_\">Collectors</span>.<span class=\"hljs-title function_\">toList</span>()));<span class=\"hljs-comment\">//[2, 4, 5, 6, 7, 9]</span><br><br><span class=\"hljs-comment\">//sorted(Comparator comp) 产生一个新流，其中按比较器顺序排序</span><br><span class=\"hljs-title class_\">Stream</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt; sorted1 = integerList.<span class=\"hljs-title function_\">stream</span>().<span class=\"hljs-title function_\">sorted</span>((a, b) -&gt; b - a);<br><span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(sorted1.<span class=\"hljs-title function_\">collect</span>(<span class=\"hljs-title class_\">Collectors</span>.<span class=\"hljs-title function_\">toList</span>()));<span class=\"hljs-comment\">//[9, 7, 6, 5, 4, 2]</span><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"终止操作-allMatch、anyMatch、noneMatch、findFirst、findAny、count…\"><a href=\"#终止操作-allMatch、anyMatch、noneMatch、findFirst、findAny、count…\" class=\"headerlink\" title=\"终止操作(allMatch、anyMatch、noneMatch、findFirst、findAny、count…)\"></a>终止操作(allMatch、anyMatch、noneMatch、findFirst、findAny、count…)</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title class_\">List</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt; integerList = <span class=\"hljs-title class_\">Arrays</span>.<span class=\"hljs-title function_\">asList</span>(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">9</span>);<br><span class=\"hljs-comment\">//检查是否匹配所有元素</span><br>boolean b = integerList.<span class=\"hljs-title function_\">stream</span>().<span class=\"hljs-title function_\">allMatch</span>(s -&gt; s == <span class=\"hljs-number\">6</span>);<br><span class=\"hljs-comment\">//检查是否至少匹配一个元素</span><br>boolean b1 = integerList.<span class=\"hljs-title function_\">stream</span>().<span class=\"hljs-title function_\">anyMatch</span>(s -&gt; s == <span class=\"hljs-number\">6</span>);<br><span class=\"hljs-comment\">//检查是否没有匹配所有元素</span><br>boolean b2 = integerList.<span class=\"hljs-title function_\">stream</span>().<span class=\"hljs-title function_\">noneMatch</span>(s -&gt; s == <span class=\"hljs-number\">6</span>);<br><span class=\"hljs-comment\">//返回第一个元素</span><br><span class=\"hljs-title class_\">Optional</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt; first= integerList.<span class=\"hljs-title function_\">stream</span>().<span class=\"hljs-title function_\">findFirst</span>();<br><span class=\"hljs-comment\">//返回当前流中的任意元素</span><br><span class=\"hljs-title class_\">Optional</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt; any = integerList.<span class=\"hljs-title function_\">stream</span>().<span class=\"hljs-title function_\">findAny</span>();<br><span class=\"hljs-comment\">//返回流中元素总数</span><br>long count = integerList.<span class=\"hljs-title function_\">stream</span>().<span class=\"hljs-title function_\">count</span>();<br><span class=\"hljs-comment\">//返回流中最大值</span><br><span class=\"hljs-title class_\">Optional</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt; max = integerList.<span class=\"hljs-title function_\">stream</span>().<span class=\"hljs-title function_\">max</span>(<span class=\"hljs-title class_\">Integer</span>::compare);<br><span class=\"hljs-comment\">//返回流中最小值</span><br><span class=\"hljs-title class_\">Optional</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt; min = integerList.<span class=\"hljs-title function_\">stream</span>().<span class=\"hljs-title function_\">min</span>(<span class=\"hljs-title class_\">Integer</span>::compare);<br><span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(b);<span class=\"hljs-comment\">//false</span><br><span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(b1);<span class=\"hljs-comment\">//true</span><br><span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(b2);<span class=\"hljs-comment\">//false</span><br><span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(first.<span class=\"hljs-title function_\">get</span>());<span class=\"hljs-comment\">//7</span><br><span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(any.<span class=\"hljs-title function_\">get</span>());<span class=\"hljs-comment\">//7</span><br><span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(count);<span class=\"hljs-comment\">//6</span><br><span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(max.<span class=\"hljs-title function_\">get</span>());<span class=\"hljs-comment\">//9</span><br><span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(min.<span class=\"hljs-title function_\">get</span>());<span class=\"hljs-comment\">//2</span><br><span class=\"hljs-comment\">//内部迭代</span><br>integerList.<span class=\"hljs-title function_\">stream</span>().<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>::print);<span class=\"hljs-comment\">//745269</span><br></code></pre></td></tr></table></figure>\n<ol>\n<li>Stream 自己不会存储元素。</li>\n<li>Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。</li>\n<li>Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。</li>\n</ol>\n"},{"title":"LeetCode 1700. 无法吃午餐的学生数量","author":null,"date":"2022-10-21T05:39:26.000Z","_content":"##### 题目来源\n\nLeetCode 1700. 无法吃午餐的学生数量https://leetcode.cn/problems/number-of-students-unable-to-eat-lunch/\n\n##### 题目\n\n学校的自助午餐提供圆形和方形的三明治，分别用数字 0 和 1 表示。所有学生站在一个队列里，每个学生要么喜欢圆形的要么喜欢方形的。\n餐厅里三明治的数量与学生的数量相同。所有三明治都放在一个 栈 里，每一轮：\n\n如果队列最前面的学生 喜欢 栈顶的三明治，那么会 拿走它 并离开队列。\n否则，这名学生会 放弃这个三明治 并回到队列的尾部。\n这个过程会一直持续到队列里所有学生都不喜欢栈顶的三明治为止。\n\n给你两个整数数组 students 和 sandwiches ，其中 sandwiches[i] 是栈里面第 i 个三明治的类型（i = 0 是栈的顶部）， students[j] 是初始队列里第 j 名学生对三明治的喜好（j = 0 是队列的最开始位置）。请你返回无法吃午餐的学生数量。\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/number-of-students-unable-to-eat-lunch\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\n\n##### 个人理解\n\n* 总的来说就是，食物不能乱碰（厨师洁癖），每个人，只能拿栈顶的三明治。\n* 如果栈顶是圆形的，你就需要一个喜欢吃圆的人把三明治拿走。\n* 如果栈顶是方形的，你就需要一个喜欢吃方的人把三明治拿走。\n* 如果大伙没有喜欢栈顶三明治的人，不好意思，都饿着吧。\n\n##### 代码\n\n```js \nclass Solution {\n    \n    public int countStudents(int[] students, int[] sandwiches) {\n    \n       int x=0;\n       int y=0;\n       for(int i=0; i<students.length; i++){\n    \n           if(students[i] == 0){\n    \n               x++;\n           }else{\n    \n               y++;\n           }\n       }\n\n        for(int j=0; j<sandwiches.length; j++){\n    \n            if(sandwiches[j] == 0 && x>0){\n    \n                x--;\n            }else if(sandwiches[j] == 1 && y>0){\n    \n                y--;\n            }else{\n    \n                return x+y;\n            }\n        }\n        return x+y;\n    }\n}\n```","source":"_posts/LeetCode 1700. 无法吃午餐的学生数量.md","raw":"---\ntitle: LeetCode 1700. 无法吃午餐的学生数量\nauthor: \ntags: \n       - 职场和发展\n\ncategory: \n       - 算法\n\ndate: 2022-10-21 13:39:26\n---\n##### 题目来源\n\nLeetCode 1700. 无法吃午餐的学生数量https://leetcode.cn/problems/number-of-students-unable-to-eat-lunch/\n\n##### 题目\n\n学校的自助午餐提供圆形和方形的三明治，分别用数字 0 和 1 表示。所有学生站在一个队列里，每个学生要么喜欢圆形的要么喜欢方形的。\n餐厅里三明治的数量与学生的数量相同。所有三明治都放在一个 栈 里，每一轮：\n\n如果队列最前面的学生 喜欢 栈顶的三明治，那么会 拿走它 并离开队列。\n否则，这名学生会 放弃这个三明治 并回到队列的尾部。\n这个过程会一直持续到队列里所有学生都不喜欢栈顶的三明治为止。\n\n给你两个整数数组 students 和 sandwiches ，其中 sandwiches[i] 是栈里面第 i 个三明治的类型（i = 0 是栈的顶部）， students[j] 是初始队列里第 j 名学生对三明治的喜好（j = 0 是队列的最开始位置）。请你返回无法吃午餐的学生数量。\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/number-of-students-unable-to-eat-lunch\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\n\n##### 个人理解\n\n* 总的来说就是，食物不能乱碰（厨师洁癖），每个人，只能拿栈顶的三明治。\n* 如果栈顶是圆形的，你就需要一个喜欢吃圆的人把三明治拿走。\n* 如果栈顶是方形的，你就需要一个喜欢吃方的人把三明治拿走。\n* 如果大伙没有喜欢栈顶三明治的人，不好意思，都饿着吧。\n\n##### 代码\n\n```js \nclass Solution {\n    \n    public int countStudents(int[] students, int[] sandwiches) {\n    \n       int x=0;\n       int y=0;\n       for(int i=0; i<students.length; i++){\n    \n           if(students[i] == 0){\n    \n               x++;\n           }else{\n    \n               y++;\n           }\n       }\n\n        for(int j=0; j<sandwiches.length; j++){\n    \n            if(sandwiches[j] == 0 && x>0){\n    \n                x--;\n            }else if(sandwiches[j] == 1 && y>0){\n    \n                y--;\n            }else{\n    \n                return x+y;\n            }\n        }\n        return x+y;\n    }\n}\n```","slug":"LeetCode 1700. 无法吃午餐的学生数量","published":1,"updated":"2024-03-15T08:23:30.797Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clttq59b50007zwve2lf21c13","content":"<h5 id=\"题目来源\"><a href=\"#题目来源\" class=\"headerlink\" title=\"题目来源\"></a>题目来源</h5><p>LeetCode 1700. 无法吃午餐的学生数量<a href=\"https://leetcode.cn/problems/number-of-students-unable-to-eat-lunch/\">https://leetcode.cn/problems/number-of-students-unable-to-eat-lunch/</a></p>\n<h5 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h5><p>学校的自助午餐提供圆形和方形的三明治，分别用数字 0 和 1 表示。所有学生站在一个队列里，每个学生要么喜欢圆形的要么喜欢方形的。<br>餐厅里三明治的数量与学生的数量相同。所有三明治都放在一个 栈 里，每一轮：</p>\n<p>如果队列最前面的学生 喜欢 栈顶的三明治，那么会 拿走它 并离开队列。<br>否则，这名学生会 放弃这个三明治 并回到队列的尾部。<br>这个过程会一直持续到队列里所有学生都不喜欢栈顶的三明治为止。</p>\n<p>给你两个整数数组 students 和 sandwiches ，其中 sandwiches[i] 是栈里面第 i 个三明治的类型（i &#x3D; 0 是栈的顶部）， students[j] 是初始队列里第 j 名学生对三明治的喜好（j &#x3D; 0 是队列的最开始位置）。请你返回无法吃午餐的学生数量。</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/number-of-students-unable-to-eat-lunch\">https://leetcode.cn/problems/number-of-students-unable-to-eat-lunch</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<h5 id=\"个人理解\"><a href=\"#个人理解\" class=\"headerlink\" title=\"个人理解\"></a>个人理解</h5><ul>\n<li>总的来说就是，食物不能乱碰（厨师洁癖），每个人，只能拿栈顶的三明治。</li>\n<li>如果栈顶是圆形的，你就需要一个喜欢吃圆的人把三明治拿走。</li>\n<li>如果栈顶是方形的，你就需要一个喜欢吃方的人把三明治拿走。</li>\n<li>如果大伙没有喜欢栈顶三明治的人，不好意思，都饿着吧。</li>\n</ul>\n<h5 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br>    <br>    public int <span class=\"hljs-title function_\">countStudents</span>(<span class=\"hljs-params\">int[] students, int[] sandwiches</span>) &#123;<br>    <br>       int x=<span class=\"hljs-number\">0</span>;<br>       int y=<span class=\"hljs-number\">0</span>;<br>       <span class=\"hljs-keyword\">for</span>(int i=<span class=\"hljs-number\">0</span>; i&lt;students.<span class=\"hljs-property\">length</span>; i++)&#123;<br>    <br>           <span class=\"hljs-keyword\">if</span>(students[i] == <span class=\"hljs-number\">0</span>)&#123;<br>    <br>               x++;<br>           &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>    <br>               y++;<br>           &#125;<br>       &#125;<br><br>        <span class=\"hljs-keyword\">for</span>(int j=<span class=\"hljs-number\">0</span>; j&lt;sandwiches.<span class=\"hljs-property\">length</span>; j++)&#123;<br>    <br>            <span class=\"hljs-keyword\">if</span>(sandwiches[j] == <span class=\"hljs-number\">0</span> &amp;&amp; x&gt;<span class=\"hljs-number\">0</span>)&#123;<br>    <br>                x--;<br>            &#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(sandwiches[j] == <span class=\"hljs-number\">1</span> &amp;&amp; y&gt;<span class=\"hljs-number\">0</span>)&#123;<br>    <br>                y--;<br>            &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>    <br>                <span class=\"hljs-keyword\">return</span> x+y;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> x+y;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h5 id=\"题目来源\"><a href=\"#题目来源\" class=\"headerlink\" title=\"题目来源\"></a>题目来源</h5><p>LeetCode 1700. 无法吃午餐的学生数量<a href=\"https://leetcode.cn/problems/number-of-students-unable-to-eat-lunch/\">https://leetcode.cn/problems/number-of-students-unable-to-eat-lunch/</a></p>\n<h5 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h5><p>学校的自助午餐提供圆形和方形的三明治，分别用数字 0 和 1 表示。所有学生站在一个队列里，每个学生要么喜欢圆形的要么喜欢方形的。<br>餐厅里三明治的数量与学生的数量相同。所有三明治都放在一个 栈 里，每一轮：</p>\n<p>如果队列最前面的学生 喜欢 栈顶的三明治，那么会 拿走它 并离开队列。<br>否则，这名学生会 放弃这个三明治 并回到队列的尾部。<br>这个过程会一直持续到队列里所有学生都不喜欢栈顶的三明治为止。</p>\n<p>给你两个整数数组 students 和 sandwiches ，其中 sandwiches[i] 是栈里面第 i 个三明治的类型（i &#x3D; 0 是栈的顶部）， students[j] 是初始队列里第 j 名学生对三明治的喜好（j &#x3D; 0 是队列的最开始位置）。请你返回无法吃午餐的学生数量。</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/number-of-students-unable-to-eat-lunch\">https://leetcode.cn/problems/number-of-students-unable-to-eat-lunch</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<h5 id=\"个人理解\"><a href=\"#个人理解\" class=\"headerlink\" title=\"个人理解\"></a>个人理解</h5><ul>\n<li>总的来说就是，食物不能乱碰（厨师洁癖），每个人，只能拿栈顶的三明治。</li>\n<li>如果栈顶是圆形的，你就需要一个喜欢吃圆的人把三明治拿走。</li>\n<li>如果栈顶是方形的，你就需要一个喜欢吃方的人把三明治拿走。</li>\n<li>如果大伙没有喜欢栈顶三明治的人，不好意思，都饿着吧。</li>\n</ul>\n<h5 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br>    <br>    public int <span class=\"hljs-title function_\">countStudents</span>(<span class=\"hljs-params\">int[] students, int[] sandwiches</span>) &#123;<br>    <br>       int x=<span class=\"hljs-number\">0</span>;<br>       int y=<span class=\"hljs-number\">0</span>;<br>       <span class=\"hljs-keyword\">for</span>(int i=<span class=\"hljs-number\">0</span>; i&lt;students.<span class=\"hljs-property\">length</span>; i++)&#123;<br>    <br>           <span class=\"hljs-keyword\">if</span>(students[i] == <span class=\"hljs-number\">0</span>)&#123;<br>    <br>               x++;<br>           &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>    <br>               y++;<br>           &#125;<br>       &#125;<br><br>        <span class=\"hljs-keyword\">for</span>(int j=<span class=\"hljs-number\">0</span>; j&lt;sandwiches.<span class=\"hljs-property\">length</span>; j++)&#123;<br>    <br>            <span class=\"hljs-keyword\">if</span>(sandwiches[j] == <span class=\"hljs-number\">0</span> &amp;&amp; x&gt;<span class=\"hljs-number\">0</span>)&#123;<br>    <br>                x--;<br>            &#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(sandwiches[j] == <span class=\"hljs-number\">1</span> &amp;&amp; y&gt;<span class=\"hljs-number\">0</span>)&#123;<br>    <br>                y--;<br>            &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>    <br>                <span class=\"hljs-keyword\">return</span> x+y;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> x+y;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"LeetCode 901. 股票价格跨度","author":null,"date":"2022-10-21T05:24:58.000Z","_content":"忘了队列咋用了\n\n##### 题目来源\n\nLeetCode 901. 股票价格跨度https://leetcode.cn/problems/online-stock-span/\n\n##### 题目\n\n编写一个 StockSpanner 类，它收集某些股票的每日报价，并返回该股票当日价格的跨度。\n\n今天股票价格的跨度被定义为股票价格小于或等于今天价格的最大连续日数（从今天开始往回数，包括今天）。\n\n例如，如果未来7天股票的价格是 [100, 80, 60, 70, 60, 75, 85]，那么股票跨度将是 [1, 1, 1, 2, 1, 4, 6]。\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/online-stock-span\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\n\n##### 个人思路\n\n![在这里插入图片描述](https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151953885.png)\n\n* 设A为 B之前 最近的 比B大 的元素。\n* 即A与B之间的任一元素X满足 A>X && X<= B\n* 若此时在B后添加一元素C\n* 若C小于B则返回1\n* 否则，C>=B，又因为A与B之间任一元素X<=B, 即X<=B<=C\n* 所以我们获取A后一共多少个元素就行。即A与B之间的元素在添加B时就可以remove了。\n* 为了避免没有元素充当A这种情况，在初始化list时添加一个Integer.MAX_VALUE元素。\n\n##### 代码\n\n```js \nclass StockSpanner {\n    \n\n    private List<int[]> list;\n    private int index = -1;\n\n    public StockSpanner() {\n    \n        list = new ArrayList<int[]>();\n        list.add(new int[]{\n    index,Integer.MAX_VALUE});\n    }\n    \n    public int next(int price) {\n    \n        index++;\n        for(int i=list.size()-1; i>=0; i--){\n    \n            if(list.get(i)[1] <= price){\n    \n                list.remove(i);\n            }else{\n    \n                continue;\n            }\n        }\n\n        int res = index - list.get(list.size()-1)[0];\n\n        list.add(new int[]{\n    index,price});\n        return res;\n    }\n}\n\n/**\n * Your StockSpanner object will be instantiated and called as such:\n * StockSpanner obj = new StockSpanner();\n * int param_1 = obj.next(price);\n */\n```","source":"_posts/LeetCode 901. 股票价格跨度.md","raw":"---\ntitle: LeetCode 901. 股票价格跨度\nauthor: \ntags: \n       - 算法\n\ncategory: \n       - 算法\n\ndate: 2022-10-21 13:24:58\n---\n忘了队列咋用了\n\n##### 题目来源\n\nLeetCode 901. 股票价格跨度https://leetcode.cn/problems/online-stock-span/\n\n##### 题目\n\n编写一个 StockSpanner 类，它收集某些股票的每日报价，并返回该股票当日价格的跨度。\n\n今天股票价格的跨度被定义为股票价格小于或等于今天价格的最大连续日数（从今天开始往回数，包括今天）。\n\n例如，如果未来7天股票的价格是 [100, 80, 60, 70, 60, 75, 85]，那么股票跨度将是 [1, 1, 1, 2, 1, 4, 6]。\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/online-stock-span\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\n\n##### 个人思路\n\n![在这里插入图片描述](https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151953885.png)\n\n* 设A为 B之前 最近的 比B大 的元素。\n* 即A与B之间的任一元素X满足 A>X && X<= B\n* 若此时在B后添加一元素C\n* 若C小于B则返回1\n* 否则，C>=B，又因为A与B之间任一元素X<=B, 即X<=B<=C\n* 所以我们获取A后一共多少个元素就行。即A与B之间的元素在添加B时就可以remove了。\n* 为了避免没有元素充当A这种情况，在初始化list时添加一个Integer.MAX_VALUE元素。\n\n##### 代码\n\n```js \nclass StockSpanner {\n    \n\n    private List<int[]> list;\n    private int index = -1;\n\n    public StockSpanner() {\n    \n        list = new ArrayList<int[]>();\n        list.add(new int[]{\n    index,Integer.MAX_VALUE});\n    }\n    \n    public int next(int price) {\n    \n        index++;\n        for(int i=list.size()-1; i>=0; i--){\n    \n            if(list.get(i)[1] <= price){\n    \n                list.remove(i);\n            }else{\n    \n                continue;\n            }\n        }\n\n        int res = index - list.get(list.size()-1)[0];\n\n        list.add(new int[]{\n    index,price});\n        return res;\n    }\n}\n\n/**\n * Your StockSpanner object will be instantiated and called as such:\n * StockSpanner obj = new StockSpanner();\n * int param_1 = obj.next(price);\n */\n```","slug":"LeetCode 901. 股票价格跨度","published":1,"updated":"2024-03-15T11:53:17.466Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clttq59b8000bzwve7qth80rr","content":"<p>忘了队列咋用了</p>\n<h5 id=\"题目来源\"><a href=\"#题目来源\" class=\"headerlink\" title=\"题目来源\"></a>题目来源</h5><p>LeetCode 901. 股票价格跨度<a href=\"https://leetcode.cn/problems/online-stock-span/\">https://leetcode.cn/problems/online-stock-span/</a></p>\n<h5 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h5><p>编写一个 StockSpanner 类，它收集某些股票的每日报价，并返回该股票当日价格的跨度。</p>\n<p>今天股票价格的跨度被定义为股票价格小于或等于今天价格的最大连续日数（从今天开始往回数，包括今天）。</p>\n<p>例如，如果未来7天股票的价格是 [100, 80, 60, 70, 60, 75, 85]，那么股票跨度将是 [1, 1, 1, 2, 1, 4, 6]。</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/online-stock-span\">https://leetcode.cn/problems/online-stock-span</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<h5 id=\"个人思路\"><a href=\"#个人思路\" class=\"headerlink\" title=\"个人思路\"></a>个人思路</h5><p><img src=\"https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151953885.png\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>设A为 B之前 最近的 比B大 的元素。</li>\n<li>即A与B之间的任一元素X满足 A&gt;X &amp;&amp; X&lt;&#x3D; B</li>\n<li>若此时在B后添加一元素C</li>\n<li>若C小于B则返回1</li>\n<li>否则，C&gt;&#x3D;B，又因为A与B之间任一元素X&lt;&#x3D;B, 即X&lt;&#x3D;B&lt;&#x3D;C</li>\n<li>所以我们获取A后一共多少个元素就行。即A与B之间的元素在添加B时就可以remove了。</li>\n<li>为了避免没有元素充当A这种情况，在初始化list时添加一个Integer.MAX_VALUE元素。</li>\n</ul>\n<h5 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">StockSpanner</span> &#123;<br>    <br><br>    private <span class=\"hljs-title class_\">List</span>&lt;int[]&gt; list;<br>    private int index = -<span class=\"hljs-number\">1</span>;<br><br>    public <span class=\"hljs-title class_\">StockSpanner</span>() &#123;<br>    <br>        list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;int[]&gt;();<br>        list.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-keyword\">new</span> int[]&#123;<br>    index,<span class=\"hljs-title class_\">Integer</span>.<span class=\"hljs-property\">MAX_VALUE</span>&#125;);<br>    &#125;<br>    <br>    public int <span class=\"hljs-title function_\">next</span>(<span class=\"hljs-params\">int price</span>) &#123;<br>    <br>        index++;<br>        <span class=\"hljs-keyword\">for</span>(int i=list.<span class=\"hljs-title function_\">size</span>()-<span class=\"hljs-number\">1</span>; i&gt;=<span class=\"hljs-number\">0</span>; i--)&#123;<br>    <br>            <span class=\"hljs-keyword\">if</span>(list.<span class=\"hljs-title function_\">get</span>(i)[<span class=\"hljs-number\">1</span>] &lt;= price)&#123;<br>    <br>                list.<span class=\"hljs-title function_\">remove</span>(i);<br>            &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>    <br>                <span class=\"hljs-keyword\">continue</span>;<br>            &#125;<br>        &#125;<br><br>        int res = index - list.<span class=\"hljs-title function_\">get</span>(list.<span class=\"hljs-title function_\">size</span>()-<span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">0</span>];<br><br>        list.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-keyword\">new</span> int[]&#123;<br>    index,price&#125;);<br>        <span class=\"hljs-keyword\">return</span> res;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Your StockSpanner object will be instantiated and called as such:</span><br><span class=\"hljs-comment\"> * StockSpanner obj = new StockSpanner();</span><br><span class=\"hljs-comment\"> * int param_1 = obj.next(price);</span><br><span class=\"hljs-comment\"> */</span><br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>忘了队列咋用了</p>\n<h5 id=\"题目来源\"><a href=\"#题目来源\" class=\"headerlink\" title=\"题目来源\"></a>题目来源</h5><p>LeetCode 901. 股票价格跨度<a href=\"https://leetcode.cn/problems/online-stock-span/\">https://leetcode.cn/problems/online-stock-span/</a></p>\n<h5 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h5><p>编写一个 StockSpanner 类，它收集某些股票的每日报价，并返回该股票当日价格的跨度。</p>\n<p>今天股票价格的跨度被定义为股票价格小于或等于今天价格的最大连续日数（从今天开始往回数，包括今天）。</p>\n<p>例如，如果未来7天股票的价格是 [100, 80, 60, 70, 60, 75, 85]，那么股票跨度将是 [1, 1, 1, 2, 1, 4, 6]。</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/online-stock-span\">https://leetcode.cn/problems/online-stock-span</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<h5 id=\"个人思路\"><a href=\"#个人思路\" class=\"headerlink\" title=\"个人思路\"></a>个人思路</h5><p><img src=\"https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151953885.png\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>设A为 B之前 最近的 比B大 的元素。</li>\n<li>即A与B之间的任一元素X满足 A&gt;X &amp;&amp; X&lt;&#x3D; B</li>\n<li>若此时在B后添加一元素C</li>\n<li>若C小于B则返回1</li>\n<li>否则，C&gt;&#x3D;B，又因为A与B之间任一元素X&lt;&#x3D;B, 即X&lt;&#x3D;B&lt;&#x3D;C</li>\n<li>所以我们获取A后一共多少个元素就行。即A与B之间的元素在添加B时就可以remove了。</li>\n<li>为了避免没有元素充当A这种情况，在初始化list时添加一个Integer.MAX_VALUE元素。</li>\n</ul>\n<h5 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">StockSpanner</span> &#123;<br>    <br><br>    private <span class=\"hljs-title class_\">List</span>&lt;int[]&gt; list;<br>    private int index = -<span class=\"hljs-number\">1</span>;<br><br>    public <span class=\"hljs-title class_\">StockSpanner</span>() &#123;<br>    <br>        list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;int[]&gt;();<br>        list.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-keyword\">new</span> int[]&#123;<br>    index,<span class=\"hljs-title class_\">Integer</span>.<span class=\"hljs-property\">MAX_VALUE</span>&#125;);<br>    &#125;<br>    <br>    public int <span class=\"hljs-title function_\">next</span>(<span class=\"hljs-params\">int price</span>) &#123;<br>    <br>        index++;<br>        <span class=\"hljs-keyword\">for</span>(int i=list.<span class=\"hljs-title function_\">size</span>()-<span class=\"hljs-number\">1</span>; i&gt;=<span class=\"hljs-number\">0</span>; i--)&#123;<br>    <br>            <span class=\"hljs-keyword\">if</span>(list.<span class=\"hljs-title function_\">get</span>(i)[<span class=\"hljs-number\">1</span>] &lt;= price)&#123;<br>    <br>                list.<span class=\"hljs-title function_\">remove</span>(i);<br>            &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>    <br>                <span class=\"hljs-keyword\">continue</span>;<br>            &#125;<br>        &#125;<br><br>        int res = index - list.<span class=\"hljs-title function_\">get</span>(list.<span class=\"hljs-title function_\">size</span>()-<span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">0</span>];<br><br>        list.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-keyword\">new</span> int[]&#123;<br>    index,price&#125;);<br>        <span class=\"hljs-keyword\">return</span> res;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Your StockSpanner object will be instantiated and called as such:</span><br><span class=\"hljs-comment\"> * StockSpanner obj = new StockSpanner();</span><br><span class=\"hljs-comment\"> * int param_1 = obj.next(price);</span><br><span class=\"hljs-comment\"> */</span><br></code></pre></td></tr></table></figure>"},{"title":"LeetCode1048 最长字符串链","author":null,"date":"2023-08-19T05:04:04.000Z","_content":"### 思路\n\n* 从短到长，增加字母的话，有多个位置，并且每个位置都有26种选择，正难则反。选择从长到短，删除某个字母。\n* 删除字母得到的新字符串可能已经计算过，所以将计算的结果都记录一下。\n* 记忆化搜索： 先查表再计算，先存表再返回。\n\n### 代码\n\n```js \nclass Solution {\n    \n\t//记忆化\n    HashMap<String, Integer> hashMap = new HashMap<>();\n    public int longestStrChain(String[] words) {\n    \n        for (String str: words) {\n    \n            hashMap.put(str, 0);\n        }\n        int ans = 0;\n        for (String str : words) {\n    \n            ans = Math.max(ans, dfs(str));\n        }\n        return ans;\n    }\n\n    private int dfs(String str) {\n    \n        int res = hashMap.get(str);\n        //大于0代表曾经计算过\n        if(res > 0) {\n    \n            return res;\n        }\n        for (int i = 0; i < str.length(); i++) {\n    \n            String tmp = str.substring(0, i) + str.substring(i+1);\n            if (hashMap.containsKey(tmp)) {\n    \n                res = Math.max(res, dfs(tmp));\n            }\n        }\n        hashMap.put(str, res + 1);\n        return res + 1;\n    }\n}\n```","source":"_posts/LeetCode1048 最长字符串链.md","raw":"---\ntitle: LeetCode1048 最长字符串链\nauthor: \ntags: \n       - leetcode\n\ncategory: \n       - 算法\n\ndate: 2023-08-19 13:04:04\n---\n### 思路\n\n* 从短到长，增加字母的话，有多个位置，并且每个位置都有26种选择，正难则反。选择从长到短，删除某个字母。\n* 删除字母得到的新字符串可能已经计算过，所以将计算的结果都记录一下。\n* 记忆化搜索： 先查表再计算，先存表再返回。\n\n### 代码\n\n```js \nclass Solution {\n    \n\t//记忆化\n    HashMap<String, Integer> hashMap = new HashMap<>();\n    public int longestStrChain(String[] words) {\n    \n        for (String str: words) {\n    \n            hashMap.put(str, 0);\n        }\n        int ans = 0;\n        for (String str : words) {\n    \n            ans = Math.max(ans, dfs(str));\n        }\n        return ans;\n    }\n\n    private int dfs(String str) {\n    \n        int res = hashMap.get(str);\n        //大于0代表曾经计算过\n        if(res > 0) {\n    \n            return res;\n        }\n        for (int i = 0; i < str.length(); i++) {\n    \n            String tmp = str.substring(0, i) + str.substring(i+1);\n            if (hashMap.containsKey(tmp)) {\n    \n                res = Math.max(res, dfs(tmp));\n            }\n        }\n        hashMap.put(str, res + 1);\n        return res + 1;\n    }\n}\n```","slug":"LeetCode1048 最长字符串链","published":1,"updated":"2024-03-15T08:23:28.152Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clttq59b9000dzwve95xa6h1l","content":"<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ul>\n<li>从短到长，增加字母的话，有多个位置，并且每个位置都有26种选择，正难则反。选择从长到短，删除某个字母。</li>\n<li>删除字母得到的新字符串可能已经计算过，所以将计算的结果都记录一下。</li>\n<li>记忆化搜索： 先查表再计算，先存表再返回。</li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br>    <br>\t<span class=\"hljs-comment\">//记忆化</span><br>    <span class=\"hljs-title class_\">HashMap</span>&lt;<span class=\"hljs-title class_\">String</span>, <span class=\"hljs-title class_\">Integer</span>&gt; hashMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br>    public int <span class=\"hljs-title function_\">longestStrChain</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span>[] words</span>) &#123;<br>    <br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-title class_\">String</span> <span class=\"hljs-attr\">str</span>: words) &#123;<br>    <br>            hashMap.<span class=\"hljs-title function_\">put</span>(str, <span class=\"hljs-number\">0</span>);<br>        &#125;<br>        int ans = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-title class_\">String</span> str : words) &#123;<br>    <br>            ans = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(ans, <span class=\"hljs-title function_\">dfs</span>(str));<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> ans;<br>    &#125;<br><br>    private int <span class=\"hljs-title function_\">dfs</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> str</span>) &#123;<br>    <br>        int res = hashMap.<span class=\"hljs-title function_\">get</span>(str);<br>        <span class=\"hljs-comment\">//大于0代表曾经计算过</span><br>        <span class=\"hljs-keyword\">if</span>(res &gt; <span class=\"hljs-number\">0</span>) &#123;<br>    <br>            <span class=\"hljs-keyword\">return</span> res;<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &lt; str.<span class=\"hljs-title function_\">length</span>(); i++) &#123;<br>    <br>            <span class=\"hljs-title class_\">String</span> tmp = str.<span class=\"hljs-title function_\">substring</span>(<span class=\"hljs-number\">0</span>, i) + str.<span class=\"hljs-title function_\">substring</span>(i+<span class=\"hljs-number\">1</span>);<br>            <span class=\"hljs-keyword\">if</span> (hashMap.<span class=\"hljs-title function_\">containsKey</span>(tmp)) &#123;<br>    <br>                res = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(res, <span class=\"hljs-title function_\">dfs</span>(tmp));<br>            &#125;<br>        &#125;<br>        hashMap.<span class=\"hljs-title function_\">put</span>(str, res + <span class=\"hljs-number\">1</span>);<br>        <span class=\"hljs-keyword\">return</span> res + <span class=\"hljs-number\">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ul>\n<li>从短到长，增加字母的话，有多个位置，并且每个位置都有26种选择，正难则反。选择从长到短，删除某个字母。</li>\n<li>删除字母得到的新字符串可能已经计算过，所以将计算的结果都记录一下。</li>\n<li>记忆化搜索： 先查表再计算，先存表再返回。</li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br>    <br>\t<span class=\"hljs-comment\">//记忆化</span><br>    <span class=\"hljs-title class_\">HashMap</span>&lt;<span class=\"hljs-title class_\">String</span>, <span class=\"hljs-title class_\">Integer</span>&gt; hashMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br>    public int <span class=\"hljs-title function_\">longestStrChain</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span>[] words</span>) &#123;<br>    <br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-title class_\">String</span> <span class=\"hljs-attr\">str</span>: words) &#123;<br>    <br>            hashMap.<span class=\"hljs-title function_\">put</span>(str, <span class=\"hljs-number\">0</span>);<br>        &#125;<br>        int ans = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-title class_\">String</span> str : words) &#123;<br>    <br>            ans = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(ans, <span class=\"hljs-title function_\">dfs</span>(str));<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> ans;<br>    &#125;<br><br>    private int <span class=\"hljs-title function_\">dfs</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> str</span>) &#123;<br>    <br>        int res = hashMap.<span class=\"hljs-title function_\">get</span>(str);<br>        <span class=\"hljs-comment\">//大于0代表曾经计算过</span><br>        <span class=\"hljs-keyword\">if</span>(res &gt; <span class=\"hljs-number\">0</span>) &#123;<br>    <br>            <span class=\"hljs-keyword\">return</span> res;<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &lt; str.<span class=\"hljs-title function_\">length</span>(); i++) &#123;<br>    <br>            <span class=\"hljs-title class_\">String</span> tmp = str.<span class=\"hljs-title function_\">substring</span>(<span class=\"hljs-number\">0</span>, i) + str.<span class=\"hljs-title function_\">substring</span>(i+<span class=\"hljs-number\">1</span>);<br>            <span class=\"hljs-keyword\">if</span> (hashMap.<span class=\"hljs-title function_\">containsKey</span>(tmp)) &#123;<br>    <br>                res = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(res, <span class=\"hljs-title function_\">dfs</span>(tmp));<br>            &#125;<br>        &#125;<br>        hashMap.<span class=\"hljs-title function_\">put</span>(str, res + <span class=\"hljs-number\">1</span>);<br>        <span class=\"hljs-keyword\">return</span> res + <span class=\"hljs-number\">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"LeetCode1218 最长定差子序列","author":null,"date":"2023-08-19T05:03:02.000Z","_content":"### 思路\n\n* 因为不能改变顺序，所以后面的元素，直接看它前面的元素就行。\n* 长度为n的数组 = 长度为n - 1的数组 + 第 n 个数\n* 从前向后遍历，对于每个元素，如果能找到它的前一个元素，就在前一个元素的基础上+1，否则就录入1。\n* 同时记录录入的数据的最大值\n\n### 代码\n\n```js \nclass Solution {\n    \n    public int longestSubsequence(int[] arr, int difference) {\n    \n        HashMap<Integer, Integer> hashMap = new HashMap<>();\n        int res = 0;\n        for (int i = 0; i < arr.length; i++) {\n    \n            int temp = hashMap.getOrDefault(arr[i] - difference, 0) + 1;\n            hashMap.put(arr[i], temp);\n            res = Math.max(res, temp);\n        }\n        return res;\n    }\n}\n```","source":"_posts/LeetCode1218 最长定差子序列.md","raw":"---\ntitle: LeetCode1218 最长定差子序列\nauthor: \ntags: \n       - leetcode\n\ncategory: \n       - 算法\n\ndate: 2023-08-19 13:03:02\n---\n### 思路\n\n* 因为不能改变顺序，所以后面的元素，直接看它前面的元素就行。\n* 长度为n的数组 = 长度为n - 1的数组 + 第 n 个数\n* 从前向后遍历，对于每个元素，如果能找到它的前一个元素，就在前一个元素的基础上+1，否则就录入1。\n* 同时记录录入的数据的最大值\n\n### 代码\n\n```js \nclass Solution {\n    \n    public int longestSubsequence(int[] arr, int difference) {\n    \n        HashMap<Integer, Integer> hashMap = new HashMap<>();\n        int res = 0;\n        for (int i = 0; i < arr.length; i++) {\n    \n            int temp = hashMap.getOrDefault(arr[i] - difference, 0) + 1;\n            hashMap.put(arr[i], temp);\n            res = Math.max(res, temp);\n        }\n        return res;\n    }\n}\n```","slug":"LeetCode1218 最长定差子序列","published":1,"updated":"2024-03-15T08:23:27.545Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clttq59bb000izwve7neb3zve","content":"<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ul>\n<li>因为不能改变顺序，所以后面的元素，直接看它前面的元素就行。</li>\n<li>长度为n的数组 &#x3D; 长度为n - 1的数组 + 第 n 个数</li>\n<li>从前向后遍历，对于每个元素，如果能找到它的前一个元素，就在前一个元素的基础上+1，否则就录入1。</li>\n<li>同时记录录入的数据的最大值</li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br>    <br>    public int <span class=\"hljs-title function_\">longestSubsequence</span>(<span class=\"hljs-params\">int[] arr, int difference</span>) &#123;<br>    <br>        <span class=\"hljs-title class_\">HashMap</span>&lt;<span class=\"hljs-title class_\">Integer</span>, <span class=\"hljs-title class_\">Integer</span>&gt; hashMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br>        int res = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &lt; arr.<span class=\"hljs-property\">length</span>; i++) &#123;<br>    <br>            int temp = hashMap.<span class=\"hljs-title function_\">getOrDefault</span>(arr[i] - difference, <span class=\"hljs-number\">0</span>) + <span class=\"hljs-number\">1</span>;<br>            hashMap.<span class=\"hljs-title function_\">put</span>(arr[i], temp);<br>            res = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(res, temp);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ul>\n<li>因为不能改变顺序，所以后面的元素，直接看它前面的元素就行。</li>\n<li>长度为n的数组 &#x3D; 长度为n - 1的数组 + 第 n 个数</li>\n<li>从前向后遍历，对于每个元素，如果能找到它的前一个元素，就在前一个元素的基础上+1，否则就录入1。</li>\n<li>同时记录录入的数据的最大值</li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br>    <br>    public int <span class=\"hljs-title function_\">longestSubsequence</span>(<span class=\"hljs-params\">int[] arr, int difference</span>) &#123;<br>    <br>        <span class=\"hljs-title class_\">HashMap</span>&lt;<span class=\"hljs-title class_\">Integer</span>, <span class=\"hljs-title class_\">Integer</span>&gt; hashMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br>        int res = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &lt; arr.<span class=\"hljs-property\">length</span>; i++) &#123;<br>    <br>            int temp = hashMap.<span class=\"hljs-title function_\">getOrDefault</span>(arr[i] - difference, <span class=\"hljs-number\">0</span>) + <span class=\"hljs-number\">1</span>;<br>            hashMap.<span class=\"hljs-title function_\">put</span>(arr[i], temp);<br>            res = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(res, temp);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"LeetCode1387 将整数按权重排序","author":null,"date":"2023-08-19T05:03:04.000Z","_content":"### 思路\n\n* 首先是这种计算权重的方式很有可能出现重复，所以需要记忆化搜索\n* 记忆化搜索：先查表再计算，先存表再返回。\n* 将整数 x 和计算的权重分别存储数组的0和1的位置\n* 重写compare将数组排序按规则排序\n* 返回结果\n\n### 代码\n\n```js \nclass Solution {\n    \n    private HashMap<Integer, Integer> me = new HashMap<>();\n    public int getKth(int lo, int hi, int k) {\n    \n        int[][] arr = new int[hi - lo + 1][2];\n        for (int i = lo; i <= hi; i++) {\n    \n            int tmp = dfs(i);\n            me.put(i, tmp);\n            arr[i - lo][0] = i;\n            arr[i - lo][1] = tmp;\n        }\n        Arrays.sort(arr, new Comparator<int[]>() {\n    \n            @Override\n            public int compare(int[] o1, int[] o2) {\n    \n                return o1[1] == o2[1] ? o1[0] - o2[0] : o1[1] - o2[1];\n            }\n        });\n\n        return arr[k-1][0];\n    }\n\n    int dfs(int x) {\n    \n        int res = 0;\n        if(me.get(x) != null){\n    \n            res = me.get(x);\n            return res;\n        }else if (x == 1) {\n    \n            res = 0;\n        } else if (x % 2 == 1) {\n    \n            res = 1 + dfs(x * 3 + 1);\n        } else {\n    \n            res = 1 + dfs(x / 2);\n        }\n        me.put(x, res);\n        return res;\n    }\n}\n```","source":"_posts/LeetCode1387 将整数按权重排序.md","raw":"---\ntitle: LeetCode1387 将整数按权重排序\nauthor: \ntags: \n       - java\n\ncategory: \n       - 算法\n\ndate: 2023-08-19 13:03:04\n---\n### 思路\n\n* 首先是这种计算权重的方式很有可能出现重复，所以需要记忆化搜索\n* 记忆化搜索：先查表再计算，先存表再返回。\n* 将整数 x 和计算的权重分别存储数组的0和1的位置\n* 重写compare将数组排序按规则排序\n* 返回结果\n\n### 代码\n\n```js \nclass Solution {\n    \n    private HashMap<Integer, Integer> me = new HashMap<>();\n    public int getKth(int lo, int hi, int k) {\n    \n        int[][] arr = new int[hi - lo + 1][2];\n        for (int i = lo; i <= hi; i++) {\n    \n            int tmp = dfs(i);\n            me.put(i, tmp);\n            arr[i - lo][0] = i;\n            arr[i - lo][1] = tmp;\n        }\n        Arrays.sort(arr, new Comparator<int[]>() {\n    \n            @Override\n            public int compare(int[] o1, int[] o2) {\n    \n                return o1[1] == o2[1] ? o1[0] - o2[0] : o1[1] - o2[1];\n            }\n        });\n\n        return arr[k-1][0];\n    }\n\n    int dfs(int x) {\n    \n        int res = 0;\n        if(me.get(x) != null){\n    \n            res = me.get(x);\n            return res;\n        }else if (x == 1) {\n    \n            res = 0;\n        } else if (x % 2 == 1) {\n    \n            res = 1 + dfs(x * 3 + 1);\n        } else {\n    \n            res = 1 + dfs(x / 2);\n        }\n        me.put(x, res);\n        return res;\n    }\n}\n```","slug":"LeetCode1387 将整数按权重排序","published":1,"updated":"2024-03-15T08:23:26.722Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clttq59bc000jzwvegv0vbxe6","content":"<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ul>\n<li>首先是这种计算权重的方式很有可能出现重复，所以需要记忆化搜索</li>\n<li>记忆化搜索：先查表再计算，先存表再返回。</li>\n<li>将整数 x 和计算的权重分别存储数组的0和1的位置</li>\n<li>重写compare将数组排序按规则排序</li>\n<li>返回结果</li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br>    <br>    private <span class=\"hljs-title class_\">HashMap</span>&lt;<span class=\"hljs-title class_\">Integer</span>, <span class=\"hljs-title class_\">Integer</span>&gt; me = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br>    public int <span class=\"hljs-title function_\">getKth</span>(<span class=\"hljs-params\">int lo, int hi, int k</span>) &#123;<br>    <br>        int[][] arr = <span class=\"hljs-keyword\">new</span> int[hi - lo + <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">2</span>];<br>        <span class=\"hljs-keyword\">for</span> (int i = lo; i &lt;= hi; i++) &#123;<br>    <br>            int tmp = <span class=\"hljs-title function_\">dfs</span>(i);<br>            me.<span class=\"hljs-title function_\">put</span>(i, tmp);<br>            arr[i - lo][<span class=\"hljs-number\">0</span>] = i;<br>            arr[i - lo][<span class=\"hljs-number\">1</span>] = tmp;<br>        &#125;<br>        <span class=\"hljs-title class_\">Arrays</span>.<span class=\"hljs-title function_\">sort</span>(arr, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Comparator</span>&lt;int[]&gt;() &#123;<br>    <br>            @<span class=\"hljs-title class_\">Override</span><br>            public int <span class=\"hljs-title function_\">compare</span>(<span class=\"hljs-params\">int[] o1, int[] o2</span>) &#123;<br>    <br>                <span class=\"hljs-keyword\">return</span> o1[<span class=\"hljs-number\">1</span>] == o2[<span class=\"hljs-number\">1</span>] ? o1[<span class=\"hljs-number\">0</span>] - o2[<span class=\"hljs-number\">0</span>] : o1[<span class=\"hljs-number\">1</span>] - o2[<span class=\"hljs-number\">1</span>];<br>            &#125;<br>        &#125;);<br><br>        <span class=\"hljs-keyword\">return</span> arr[k-<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>];<br>    &#125;<br><br>    int <span class=\"hljs-title function_\">dfs</span>(<span class=\"hljs-params\">int x</span>) &#123;<br>    <br>        int res = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">if</span>(me.<span class=\"hljs-title function_\">get</span>(x) != <span class=\"hljs-literal\">null</span>)&#123;<br>    <br>            res = me.<span class=\"hljs-title function_\">get</span>(x);<br>            <span class=\"hljs-keyword\">return</span> res;<br>        &#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (x == <span class=\"hljs-number\">1</span>) &#123;<br>    <br>            res = <span class=\"hljs-number\">0</span>;<br>        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (x % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span>) &#123;<br>    <br>            res = <span class=\"hljs-number\">1</span> + <span class=\"hljs-title function_\">dfs</span>(x * <span class=\"hljs-number\">3</span> + <span class=\"hljs-number\">1</span>);<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    <br>            res = <span class=\"hljs-number\">1</span> + <span class=\"hljs-title function_\">dfs</span>(x / <span class=\"hljs-number\">2</span>);<br>        &#125;<br>        me.<span class=\"hljs-title function_\">put</span>(x, res);<br>        <span class=\"hljs-keyword\">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ul>\n<li>首先是这种计算权重的方式很有可能出现重复，所以需要记忆化搜索</li>\n<li>记忆化搜索：先查表再计算，先存表再返回。</li>\n<li>将整数 x 和计算的权重分别存储数组的0和1的位置</li>\n<li>重写compare将数组排序按规则排序</li>\n<li>返回结果</li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br>    <br>    private <span class=\"hljs-title class_\">HashMap</span>&lt;<span class=\"hljs-title class_\">Integer</span>, <span class=\"hljs-title class_\">Integer</span>&gt; me = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br>    public int <span class=\"hljs-title function_\">getKth</span>(<span class=\"hljs-params\">int lo, int hi, int k</span>) &#123;<br>    <br>        int[][] arr = <span class=\"hljs-keyword\">new</span> int[hi - lo + <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">2</span>];<br>        <span class=\"hljs-keyword\">for</span> (int i = lo; i &lt;= hi; i++) &#123;<br>    <br>            int tmp = <span class=\"hljs-title function_\">dfs</span>(i);<br>            me.<span class=\"hljs-title function_\">put</span>(i, tmp);<br>            arr[i - lo][<span class=\"hljs-number\">0</span>] = i;<br>            arr[i - lo][<span class=\"hljs-number\">1</span>] = tmp;<br>        &#125;<br>        <span class=\"hljs-title class_\">Arrays</span>.<span class=\"hljs-title function_\">sort</span>(arr, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Comparator</span>&lt;int[]&gt;() &#123;<br>    <br>            @<span class=\"hljs-title class_\">Override</span><br>            public int <span class=\"hljs-title function_\">compare</span>(<span class=\"hljs-params\">int[] o1, int[] o2</span>) &#123;<br>    <br>                <span class=\"hljs-keyword\">return</span> o1[<span class=\"hljs-number\">1</span>] == o2[<span class=\"hljs-number\">1</span>] ? o1[<span class=\"hljs-number\">0</span>] - o2[<span class=\"hljs-number\">0</span>] : o1[<span class=\"hljs-number\">1</span>] - o2[<span class=\"hljs-number\">1</span>];<br>            &#125;<br>        &#125;);<br><br>        <span class=\"hljs-keyword\">return</span> arr[k-<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>];<br>    &#125;<br><br>    int <span class=\"hljs-title function_\">dfs</span>(<span class=\"hljs-params\">int x</span>) &#123;<br>    <br>        int res = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">if</span>(me.<span class=\"hljs-title function_\">get</span>(x) != <span class=\"hljs-literal\">null</span>)&#123;<br>    <br>            res = me.<span class=\"hljs-title function_\">get</span>(x);<br>            <span class=\"hljs-keyword\">return</span> res;<br>        &#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (x == <span class=\"hljs-number\">1</span>) &#123;<br>    <br>            res = <span class=\"hljs-number\">0</span>;<br>        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (x % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span>) &#123;<br>    <br>            res = <span class=\"hljs-number\">1</span> + <span class=\"hljs-title function_\">dfs</span>(x * <span class=\"hljs-number\">3</span> + <span class=\"hljs-number\">1</span>);<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    <br>            res = <span class=\"hljs-number\">1</span> + <span class=\"hljs-title function_\">dfs</span>(x / <span class=\"hljs-number\">2</span>);<br>        &#125;<br>        me.<span class=\"hljs-title function_\">put</span>(x, res);<br>        <span class=\"hljs-keyword\">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"LeetCode1578. 使绳子变成彩色的最短时间","author":null,"date":"2023-08-19T05:21:33.000Z","_content":"### 思路\n\n* 拆除成本 = 全部拆除 - 最大的不拆除\n* 在统计成本的同时，维持一个成本的最大值\n\n### 代码\n\n```js \nclass Solution {\n    \n    public int minCost(String colors, int[] neededTime) {\n    \n        int res = 0;\n        int i = 0;\n        int len = colors.length();\n        while (i < len) {\n    \n            int max = -1;\n            int sum = 0;\n            char ch = colors.charAt(i);\n            while(i < len && colors.charAt(i) == ch) {\n    \n                sum += neededTime[i];\n                max = Math.max(max, neededTime[i]);\n                i++;\n            }\n            res += sum - max;\n        }\n        return res;\n    }\n}\n```","source":"_posts/LeetCode1578. 使绳子变成彩色的最短时间.md","raw":"---\ntitle: LeetCode1578. 使绳子变成彩色的最短时间\nauthor: \ntags: \n       - leetcode\n\ncategory: \n       - 算法\n\ndate: 2023-08-19 13:21:33\n---\n### 思路\n\n* 拆除成本 = 全部拆除 - 最大的不拆除\n* 在统计成本的同时，维持一个成本的最大值\n\n### 代码\n\n```js \nclass Solution {\n    \n    public int minCost(String colors, int[] neededTime) {\n    \n        int res = 0;\n        int i = 0;\n        int len = colors.length();\n        while (i < len) {\n    \n            int max = -1;\n            int sum = 0;\n            char ch = colors.charAt(i);\n            while(i < len && colors.charAt(i) == ch) {\n    \n                sum += neededTime[i];\n                max = Math.max(max, neededTime[i]);\n                i++;\n            }\n            res += sum - max;\n        }\n        return res;\n    }\n}\n```","slug":"LeetCode1578. 使绳子变成彩色的最短时间","published":1,"updated":"2024-03-15T08:23:25.717Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clttq59be000nzwveho5e8fz1","content":"<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ul>\n<li>拆除成本 &#x3D; 全部拆除 - 最大的不拆除</li>\n<li>在统计成本的同时，维持一个成本的最大值</li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br>    <br>    public int <span class=\"hljs-title function_\">minCost</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> colors, int[] neededTime</span>) &#123;<br>    <br>        int res = <span class=\"hljs-number\">0</span>;<br>        int i = <span class=\"hljs-number\">0</span>;<br>        int len = colors.<span class=\"hljs-title function_\">length</span>();<br>        <span class=\"hljs-keyword\">while</span> (i &lt; len) &#123;<br>    <br>            int max = -<span class=\"hljs-number\">1</span>;<br>            int sum = <span class=\"hljs-number\">0</span>;<br>            char ch = colors.<span class=\"hljs-title function_\">charAt</span>(i);<br>            <span class=\"hljs-keyword\">while</span>(i &lt; len &amp;&amp; colors.<span class=\"hljs-title function_\">charAt</span>(i) == ch) &#123;<br>    <br>                sum += neededTime[i];<br>                max = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(max, neededTime[i]);<br>                i++;<br>            &#125;<br>            res += sum - max;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ul>\n<li>拆除成本 &#x3D; 全部拆除 - 最大的不拆除</li>\n<li>在统计成本的同时，维持一个成本的最大值</li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br>    <br>    public int <span class=\"hljs-title function_\">minCost</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> colors, int[] neededTime</span>) &#123;<br>    <br>        int res = <span class=\"hljs-number\">0</span>;<br>        int i = <span class=\"hljs-number\">0</span>;<br>        int len = colors.<span class=\"hljs-title function_\">length</span>();<br>        <span class=\"hljs-keyword\">while</span> (i &lt; len) &#123;<br>    <br>            int max = -<span class=\"hljs-number\">1</span>;<br>            int sum = <span class=\"hljs-number\">0</span>;<br>            char ch = colors.<span class=\"hljs-title function_\">charAt</span>(i);<br>            <span class=\"hljs-keyword\">while</span>(i &lt; len &amp;&amp; colors.<span class=\"hljs-title function_\">charAt</span>(i) == ch) &#123;<br>    <br>                sum += neededTime[i];<br>                max = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(max, neededTime[i]);<br>                i++;<br>            &#125;<br>            res += sum - max;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"Leetcode 779. 第K个语法符号","author":null,"date":"2022-10-21T05:14:05.000Z","_content":"##### 题目来源： Leetcode 779. 第K个语法符号https://leetcode.cn/problems/k-th-symbol-in-grammar/\n\n##### 题目描述\n\n我们构建了一个包含 n 行( 索引从 1 开始 )的表。首先在第一行我们写上一个 0。接下来的每一行，将前一行中的0替换为01，1替换为10。\n\n例如，对于 n = 3 ，第 1 行是 0 ，第 2 行是 01 ，第3行是 0110 。\n给定行数 n 和序数 k，返回第 n 行中第 k 个字符。（ k 从索引 1 开始）\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/k-th-symbol-in-grammar\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\n\n##### 个人思路\n\n* 每一行的前半部分正好为上一行\n* 每一行的后半部分正好为前半部分的反转。\n* 后半部分因为相当于上一行的反转，用1-x来达到这种目的\n\n代码\n```js \nclass Solution {\n    \n    public int kthGrammar(int n, int k) {\n    \n        if(n==1){\n    \n            return 0;\n        }\n\n\t\t//处于前半部分还是后半部分\n        if(k > Math.pow(2,n-2)){\n    \n            return (1-kthGrammar(n-1, k-(int)Math.pow(2,n-2)));\n        }else{\n    \n            return kthGrammar(n-1,k);\n        }\n    }\n}\n```\n \n没想到这辈子还能赶上一次绿的题。","source":"_posts/Leetcode 779. 第K个语法符号.md","raw":"---\ntitle: Leetcode 779. 第K个语法符号\nauthor: \ntags: \n       - 算法\n\ncategory: \n       - 算法\n\ndate: 2022-10-21 13:14:05\n---\n##### 题目来源： Leetcode 779. 第K个语法符号https://leetcode.cn/problems/k-th-symbol-in-grammar/\n\n##### 题目描述\n\n我们构建了一个包含 n 行( 索引从 1 开始 )的表。首先在第一行我们写上一个 0。接下来的每一行，将前一行中的0替换为01，1替换为10。\n\n例如，对于 n = 3 ，第 1 行是 0 ，第 2 行是 01 ，第3行是 0110 。\n给定行数 n 和序数 k，返回第 n 行中第 k 个字符。（ k 从索引 1 开始）\n\n来源：力扣（LeetCode）\n链接：https://leetcode.cn/problems/k-th-symbol-in-grammar\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\n\n##### 个人思路\n\n* 每一行的前半部分正好为上一行\n* 每一行的后半部分正好为前半部分的反转。\n* 后半部分因为相当于上一行的反转，用1-x来达到这种目的\n\n代码\n```js \nclass Solution {\n    \n    public int kthGrammar(int n, int k) {\n    \n        if(n==1){\n    \n            return 0;\n        }\n\n\t\t//处于前半部分还是后半部分\n        if(k > Math.pow(2,n-2)){\n    \n            return (1-kthGrammar(n-1, k-(int)Math.pow(2,n-2)));\n        }else{\n    \n            return kthGrammar(n-1,k);\n        }\n    }\n}\n```\n \n没想到这辈子还能赶上一次绿的题。","slug":"Leetcode 779. 第K个语法符号","published":1,"updated":"2024-03-15T08:23:32.818Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clttq59bf000pzwve6anbf8ie","content":"<h5 id=\"题目来源：-Leetcode-779-第K个语法符号https-leetcode-cn-problems-k-th-symbol-in-grammar\"><a href=\"#题目来源：-Leetcode-779-第K个语法符号https-leetcode-cn-problems-k-th-symbol-in-grammar\" class=\"headerlink\" title=\"题目来源： Leetcode 779. 第K个语法符号https://leetcode.cn/problems/k-th-symbol-in-grammar/\"></a>题目来源： Leetcode 779. 第K个语法符号<a href=\"https://leetcode.cn/problems/k-th-symbol-in-grammar/\">https://leetcode.cn/problems/k-th-symbol-in-grammar/</a></h5><h5 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h5><p>我们构建了一个包含 n 行( 索引从 1 开始 )的表。首先在第一行我们写上一个 0。接下来的每一行，将前一行中的0替换为01，1替换为10。</p>\n<p>例如，对于 n &#x3D; 3 ，第 1 行是 0 ，第 2 行是 01 ，第3行是 0110 。<br>给定行数 n 和序数 k，返回第 n 行中第 k 个字符。（ k 从索引 1 开始）</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/k-th-symbol-in-grammar\">https://leetcode.cn/problems/k-th-symbol-in-grammar</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<h5 id=\"个人思路\"><a href=\"#个人思路\" class=\"headerlink\" title=\"个人思路\"></a>个人思路</h5><ul>\n<li>每一行的前半部分正好为上一行</li>\n<li>每一行的后半部分正好为前半部分的反转。</li>\n<li>后半部分因为相当于上一行的反转，用1-x来达到这种目的</li>\n</ul>\n<p>代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br>    <br>    public int <span class=\"hljs-title function_\">kthGrammar</span>(<span class=\"hljs-params\">int n, int k</span>) &#123;<br>    <br>        <span class=\"hljs-keyword\">if</span>(n==<span class=\"hljs-number\">1</span>)&#123;<br>    <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>        &#125;<br><br>\t\t<span class=\"hljs-comment\">//处于前半部分还是后半部分</span><br>        <span class=\"hljs-keyword\">if</span>(k &gt; <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">pow</span>(<span class=\"hljs-number\">2</span>,n-<span class=\"hljs-number\">2</span>))&#123;<br>    <br>            <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">1</span>-<span class=\"hljs-title function_\">kthGrammar</span>(n-<span class=\"hljs-number\">1</span>, k-(int)<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">pow</span>(<span class=\"hljs-number\">2</span>,n-<span class=\"hljs-number\">2</span>)));<br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>    <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">kthGrammar</span>(n-<span class=\"hljs-number\">1</span>,k);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>没想到这辈子还能赶上一次绿的题。</p>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"题目来源：-Leetcode-779-第K个语法符号https-leetcode-cn-problems-k-th-symbol-in-grammar\"><a href=\"#题目来源：-Leetcode-779-第K个语法符号https-leetcode-cn-problems-k-th-symbol-in-grammar\" class=\"headerlink\" title=\"题目来源： Leetcode 779. 第K个语法符号https://leetcode.cn/problems/k-th-symbol-in-grammar/\"></a>题目来源： Leetcode 779. 第K个语法符号<a href=\"https://leetcode.cn/problems/k-th-symbol-in-grammar/\">https://leetcode.cn/problems/k-th-symbol-in-grammar/</a></h5><h5 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h5><p>我们构建了一个包含 n 行( 索引从 1 开始 )的表。首先在第一行我们写上一个 0。接下来的每一行，将前一行中的0替换为01，1替换为10。</p>\n<p>例如，对于 n &#x3D; 3 ，第 1 行是 0 ，第 2 行是 01 ，第3行是 0110 。<br>给定行数 n 和序数 k，返回第 n 行中第 k 个字符。（ k 从索引 1 开始）</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode.cn/problems/k-th-symbol-in-grammar\">https://leetcode.cn/problems/k-th-symbol-in-grammar</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<h5 id=\"个人思路\"><a href=\"#个人思路\" class=\"headerlink\" title=\"个人思路\"></a>个人思路</h5><ul>\n<li>每一行的前半部分正好为上一行</li>\n<li>每一行的后半部分正好为前半部分的反转。</li>\n<li>后半部分因为相当于上一行的反转，用1-x来达到这种目的</li>\n</ul>\n<p>代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br>    <br>    public int <span class=\"hljs-title function_\">kthGrammar</span>(<span class=\"hljs-params\">int n, int k</span>) &#123;<br>    <br>        <span class=\"hljs-keyword\">if</span>(n==<span class=\"hljs-number\">1</span>)&#123;<br>    <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>        &#125;<br><br>\t\t<span class=\"hljs-comment\">//处于前半部分还是后半部分</span><br>        <span class=\"hljs-keyword\">if</span>(k &gt; <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">pow</span>(<span class=\"hljs-number\">2</span>,n-<span class=\"hljs-number\">2</span>))&#123;<br>    <br>            <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">1</span>-<span class=\"hljs-title function_\">kthGrammar</span>(n-<span class=\"hljs-number\">1</span>, k-(int)<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">pow</span>(<span class=\"hljs-number\">2</span>,n-<span class=\"hljs-number\">2</span>)));<br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>    <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">kthGrammar</span>(n-<span class=\"hljs-number\">1</span>,k);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>没想到这辈子还能赶上一次绿的题。</p>\n"},{"title":"MySQL基本语法","author":null,"date":"2023-08-28T01:55:03.000Z","_content":"## 基础语法\n\n#### 别名\n\n```js \n-- 别名 as 可省略，但中间需要空格\nselect name as 员工姓名, position as 职位名称 from employees;\n```\n\n#### 常量和运算\n\n```js \nselect 200, '篮球' as hobby;\nselect order_id, unit_price, quantity, unit_price * quantity as total_amount from orders;\n```\n\n#### 运算符\n\n```js \nselect name, age, salary from employees where age between 25 and 30;\nselect name, age, salary from employees where salary > 5500;\nselect name, age, salary from employees where name != '小张';\n```\n\n#### 空值\n\n```js \n-- SQL查询语句\nselect name, age from employees where hire_date IS NULL;\n\nselect name, age from employees where hire_date IS NOT NULL;\n```\n\n#### 模糊查询 like, not like _ %\n\n```js \nselect name, age, position from employees where name like '%张%';\n-- 只查询以 \"张\" 开头的数据行\nselect name, age, position from employees where name like '张%';\n\n-- 只查询以 \"张\" 结尾的数据行\nselect name, age, position from employees where name like '%张';\n-- 可以使用 not like 来查询不包含某关键字的信息。\n```\n\n#### 逻辑运算\n\nAND OR NOT\n```js \n-- SQL查询语句\nselect name, age, salary from employees where name like '%李%' and age < 30;\n```\n\n#### 去重\n\n```js \n-- SQL 查询语句 使用DISTINCT关键字来找出不同的班级 ID\nselect distinct class_id from students;\n-- DISTINCT 关键字还支持根据多个字段的组合来进行去重操作，确保多个字段的组合是唯一的。\n```\n\n#### 排序\n\n```js \n-- SQL 查询语句 1\nselect name, age from students order by age asc;\n\n-- SQL 查询语句 2\nselect name, score from students order by score desc;\n```\n\n#### 截断、偏移\n\n```js \n-- LIMIT 后只跟一个整数，表示要截断的数据条数（一次获取几条）\nselect task_name, due_date from tasks limit 2;\n\n-- LIMIT 后跟 2 个整数，依次表示从第几条数据开始、一次获取几条\nselect task_name, due_date from tasks limit 2, 2;\n```\n\n#### 条件分支\n\n```js \nSELECT\n  name,\n  CASE WHEN (name = '鸡哥') THEN '会' ELSE '不会' END AS can_rap\nFROM\n  student;\n```\n \n```js \nCASE WHEN (条件1) THEN 结果1\n\t   WHEN (条件2) THEN 结果2\n\t   ...\n\t   ELSE 其他结果 END\n```\n\n## 函数\n\n#### 时间\n\n```js \n-- 获取当前日期\nSELECT DATE() AS current_date;\n\n-- 获取当前日期时间\nSELECT DATETIME() AS current_datetime;\n\n-- 获取当前时间\nSELECT TIME() AS current_time;\n-- 这里的日期、日期时间和时间将根据当前的系统时间来生成，实际运行结果可能会因为当前时间而不同。\n```\n\n#### 四舍五入\n\n```js \nround(AVG(grade),2)\n```\n\n#### 字符串处理\n\n```js \n-- 将姓名转换为大写\nSELECT name, UPPER(name) AS upper_name\nFROM employees;\n```\n \n```js \n-- 计算姓名长度\nSELECT name, LENGTH(name) AS name_length\nFROM employees;\n```\n \n```js \n-- 将姓名转换为小写并进行条件筛选\nSELECT name, LOWER(name) AS lower_name\nFROM employees;\n```\n\n#### 聚合\n\n* COUNT：计算指定列的行数或非空值的数量。\n当Mysql确认括号内的表达式值不可能为NULL时，实际上就是在统计行数。\n所以使用条件要加一个COUNT(c.action = ‘confirmed’ OR NULL)\n不为confirmed时用NULL代替，NULL不会被COUNT统计\n\n* SUM：计算指定列的数值之和。\n* AVG：计算指定列的数值平均值。\n* MAX：找出指定列的最大值。\n* MIN：找出指定列的最小值。\n```js \n-- 使用聚合函数 COUNT 计算订单表中的总订单数\nSELECT COUNT(*) AS order_num\nFROM orders;\n```\n \n```js \n-- 使用聚合函数 COUNT(DISTINCT 列名) 计算订单表中不同客户的数量\nSELECT COUNT(DISTINCT customer_id) AS customer_num\nFROM orders;\n```\n \n```js \n-- 使用聚合函数 SUM 计算总订单金额\nSELECT SUM(amount) AS total_amount\nFROM orders;\n```\n\n## 分组\n\n#### 字段分组\n\n```js \n-- 使用分组聚合查询中每个客户的编号\nSELECT customer_id\nFROM orders\nGROUP BY customer_id;\n```\n \n```js \n-- 使用分组聚合查询每个客户的下单数\nSELECT customer_id, COUNT(order_id) AS order_num\nFROM orders\nGROUP BY customer_id;\n```\n \n```js \n-- 使用多字段分组查询表中 每个客户 购买的 每种商品 的总金额，相当于按照客户编号和商品编号分组\nSELECT customer_id, product_id, SUM(amount) AS total_amount\nFROM orders\nGROUP BY customer_id, product_id;\n```\n\n#### having 子句\n\n```js \n-- 使用 HAVING 子句查询订单数超过 1 的客户\n\nSELECT customer_id, COUNT(order_id) AS order_num\nFROM orders\nGROUP BY customer_id\nHAVING COUNT(order_id) > 1;\n```\n \n```js \n-- 使用 HAVING 子句查询订单总金额超过 100 的客户\nSELECT customer_id, SUM(amount) AS total_amount\nFROM orders\nGROUP BY customer_id\nHAVING SUM(amount) > 100;\n```\n\n## 关联查询\n\n#### CROSS JOIN\n\n是一种简单的关联查询，不需要任何条件来匹配行，它直接将左表的 每一行 与右表的 每一行 进行组合，返回的结果是两个表的笛卡尔积。\n```js \nSELECT e.emp_name, e.salary, e.department, d.manager\nFROM employees e\nCROSS JOIN departments d;\n```\n\n#### INNER JOIN\n\n只返回两个表中满足关联条件的交集部分，即在两个表中都存在的匹配行。\n```js \nSELECT e.emp_name, e.salary, e.department, d.manager\nFROM employees e\nJOIN departments d ON e.department = d.department;\n```\n\n#### OUTER JOIN\n\n根据指定的关联条件，将两个表中满足条件的行组合在一起，并包含没有匹配的行 。\n包括 LEFT OUTER JOIN 和 RIGHT OUTER JOIN 两种类型，分别表示查询左表和右表的所有行（即使没有被匹配），再加上满足条件的交集部分。有些数据库并不支持 RIGHT JOIN 语法，只需要把主表（from 后面的表）和关联表（LEFT JOIN 后面的表）顺序进行调换即可\n```js \nSELECT e.emp_name, e.salary, e.department, d.manager\nFROM employees e\nLEFT JOIN departments d ON e.department = d.department;\n```\n\n## 子查询\n\n```js \n-- 查询出订单总金额 > 200 的客户的姓名和他们的订单总金额\n-- 主查询\nSELECT name, total_amount\nFROM customers\nWHERE customer_id IN (\n    -- 子查询\n    SELECT DISTINCT customer_id\n    FROM orders\n    WHERE total_amount > 200\n);\n```\n\n**exists**\n用于检查主查询的结果集是否存在满足条件的记录，它返回布尔值（True 或 False），而不返回实际的数据。\n\n```js \n-- 主查询\nSELECT name, total_amount\nFROM customers\nWHERE EXISTS (\n    -- 子查询\n    SELECT 1\n    FROM orders\n    WHERE orders.customer_id = customers.customer_id\n);\n```\n\n#### 组合查询\n\n* **UNION** 操作：将两个或多个查询的结果集合并， 并去除重复的行 。即如果两个查询的结果有相同的行，则只保留一行。\n* **UNION ALL** 操作：将两个或多个查询的结果集合并， 但不去除重复的行 。即如果两个查询的结果有相同的行，则全部保留。\n```js \nSELECT name, age, department\nFROM table1\nUNION\nSELECT name, age, department\nFROM table2;\n```\n\n## 开窗函数\n\n#### sum over\n\nSUM(计算字段名) OVER (PARTITION BY 分组字段名)\n```js \nSELECT \n    order_id, \n    customer_id, \n    order_date, \n    total_amount,\n    SUM(total_amount) OVER (PARTITION BY customer_id) AS customer_total_amount\nFROM\n    orders;\n```\n\n#### sum over order by\n\nSUM(计算字段名) OVER (PARTITION BY 分组字段名 ORDER BY 排序字段 排序规则)\n```js \n-- 计算每个客户的历史订单累计金额，并显示每个订单的详细信息\n\nSELECT \n    order_id, \n    customer_id, \n    order_date, \n    total_amount,\n    SUM(total_amount) OVER (PARTITION BY customer_id ORDER BY order_date ASC) AS cumulative_total_amount\nFROM\n    orders;\n```\n\n#### rank\n\n用于对查询结果集中的行进行 排名 的开窗函数。可以根据指定的列或表达式对结果集中的行进行排序，并为每一行分配一个排名。\n在排名过程中，相同的值将被赋予相同的排名，而不同的值将被赋予不同的排名。\n常见用法是在查询结果中查找前几名（Top N）或排名最高的行。\n \n```js \nRANK() OVER (\n  PARTITION BY 列名1, 列名2, ... -- 可选，用于指定分组列\n  ORDER BY 列名3 [ASC|DESC], 列名4 [ASC|DESC], ... -- 用于指定排序列及排序方式\n) AS rank_column\nPARTITION BY 子句可选，用于指定分组列，将结果集按照指定列进行分组；\nORDER BY 子句用于指定排序列及排序方式，决定了计算 Rank 时的排序规则。\nAS rank_column 用于指定生成的 Rank 排名列的别名。\n```\n \n```js \nSELECT \n    order_id, \n    customer_id, \n    order_date, \n    total_amount,\n    RANK() OVER (PARTITION BY customer_id ORDER BY total_amount DESC) AS customer_rank\nFROM\n    orders;\n```\n\n#### row_number\n\n用于为查询结果集中的每一行分配唯一连续排名。\nRow_Number函数为每一行都分配一个唯一的整数值，不管是否存在并列（相同排序值）的情况。\n每一行都有一个唯一的行号，从 1 开始连续递增。\n\nRow_Number 开窗函数的语法如下（几乎和 Rank 函数一模一样）\n\n```js \nROW_NUMBER() OVER (\n  PARTITION BY column1, column2, ... -- 可选，用于指定分组列\n  ORDER BY column3 [ASC|DESC], column4 [ASC|DESC], ... -- 用于指定排序列及排序方式\n) AS row_number_column\nPARTITION BY子句可选，用于指定分组列，将结果集按照指定列进行分组。ORDER BY 子句用于指定排序列及排序方式，决定了计算 Row_Number 时的排序规则。AS row_number_column 用于指定生成的行号列的别名。\n```\n \n```js \nSELECT \n    order_id, \n    customer_id, \n    order_date, \n    total_amount,\n    ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY total_amount DESC) AS row_number\nFROM\n    orders;\n```\n\n#### lag / lead\n\n在需要比较相邻行数据或进行时间序列分析时非常有用。\n\n* Lag 函数用于获取当前行之前的某一列的值。Lag 函数的语法如下：\nLAG(column_name, offset, default_value) OVER (PARTITION BY partition_column ORDER BY sort_column)\n参数解释：\ncolumn_name：要获取值的列名。\noffset：表示要向上偏移的行数。例如，offset为1表示获取上一行的值，offset为2表示获取上两行的值，以此类推。\ndefault_value：可选参数，用于指定当没有前一行时的默认值。\nPARTITION BY和ORDER BY子句可选，用于分组和排序数据。\n\n* Lead 函数用于获取 当前行之后 的某一列的值。Lead 函数的语法如下：\nLEAD(column_name, offset, default_value) OVER (PARTITION BY partition_column ORDER BY sort_column)\n参数解释：\ncolumn_name：要获取值的列名。\noffset：表示要向下偏移的行数。例如，offset为1表示获取下一行的值，offset为2表示获取下两行的值，以此类推。\ndefault_value：可选参数，用于指定当没有后一行时的默认值。\nPARTITION BY和ORDER BY子句可选，用于分组和排序数据。\n \n```js \nSELECT \n    student_id,\n    exam_date,\n    score,\n    LAG(score, 1, NULL) OVER (PARTITION BY student_id ORDER BY exam_date) AS previous_score,\n    LEAD(score, 1, NULL) OVER (PARTITION BY student_id ORDER BY exam_date) AS next_score\nFROM\n    scores;\n```\n\n整理自网站SQL之母http://sqlmother.yupi.icu/#/learn（学习过，但记不住，单独查看太麻烦，所以整理给自己看）","source":"_posts/MySQL基本语法.md","raw":"---\ntitle: MySQL基本语法\nauthor: \ntags: \n       - 数据库\n\ncategory: \n       - mysql\n\ndate: 2023-08-28 09:55:03\n---\n## 基础语法\n\n#### 别名\n\n```js \n-- 别名 as 可省略，但中间需要空格\nselect name as 员工姓名, position as 职位名称 from employees;\n```\n\n#### 常量和运算\n\n```js \nselect 200, '篮球' as hobby;\nselect order_id, unit_price, quantity, unit_price * quantity as total_amount from orders;\n```\n\n#### 运算符\n\n```js \nselect name, age, salary from employees where age between 25 and 30;\nselect name, age, salary from employees where salary > 5500;\nselect name, age, salary from employees where name != '小张';\n```\n\n#### 空值\n\n```js \n-- SQL查询语句\nselect name, age from employees where hire_date IS NULL;\n\nselect name, age from employees where hire_date IS NOT NULL;\n```\n\n#### 模糊查询 like, not like _ %\n\n```js \nselect name, age, position from employees where name like '%张%';\n-- 只查询以 \"张\" 开头的数据行\nselect name, age, position from employees where name like '张%';\n\n-- 只查询以 \"张\" 结尾的数据行\nselect name, age, position from employees where name like '%张';\n-- 可以使用 not like 来查询不包含某关键字的信息。\n```\n\n#### 逻辑运算\n\nAND OR NOT\n```js \n-- SQL查询语句\nselect name, age, salary from employees where name like '%李%' and age < 30;\n```\n\n#### 去重\n\n```js \n-- SQL 查询语句 使用DISTINCT关键字来找出不同的班级 ID\nselect distinct class_id from students;\n-- DISTINCT 关键字还支持根据多个字段的组合来进行去重操作，确保多个字段的组合是唯一的。\n```\n\n#### 排序\n\n```js \n-- SQL 查询语句 1\nselect name, age from students order by age asc;\n\n-- SQL 查询语句 2\nselect name, score from students order by score desc;\n```\n\n#### 截断、偏移\n\n```js \n-- LIMIT 后只跟一个整数，表示要截断的数据条数（一次获取几条）\nselect task_name, due_date from tasks limit 2;\n\n-- LIMIT 后跟 2 个整数，依次表示从第几条数据开始、一次获取几条\nselect task_name, due_date from tasks limit 2, 2;\n```\n\n#### 条件分支\n\n```js \nSELECT\n  name,\n  CASE WHEN (name = '鸡哥') THEN '会' ELSE '不会' END AS can_rap\nFROM\n  student;\n```\n \n```js \nCASE WHEN (条件1) THEN 结果1\n\t   WHEN (条件2) THEN 结果2\n\t   ...\n\t   ELSE 其他结果 END\n```\n\n## 函数\n\n#### 时间\n\n```js \n-- 获取当前日期\nSELECT DATE() AS current_date;\n\n-- 获取当前日期时间\nSELECT DATETIME() AS current_datetime;\n\n-- 获取当前时间\nSELECT TIME() AS current_time;\n-- 这里的日期、日期时间和时间将根据当前的系统时间来生成，实际运行结果可能会因为当前时间而不同。\n```\n\n#### 四舍五入\n\n```js \nround(AVG(grade),2)\n```\n\n#### 字符串处理\n\n```js \n-- 将姓名转换为大写\nSELECT name, UPPER(name) AS upper_name\nFROM employees;\n```\n \n```js \n-- 计算姓名长度\nSELECT name, LENGTH(name) AS name_length\nFROM employees;\n```\n \n```js \n-- 将姓名转换为小写并进行条件筛选\nSELECT name, LOWER(name) AS lower_name\nFROM employees;\n```\n\n#### 聚合\n\n* COUNT：计算指定列的行数或非空值的数量。\n当Mysql确认括号内的表达式值不可能为NULL时，实际上就是在统计行数。\n所以使用条件要加一个COUNT(c.action = ‘confirmed’ OR NULL)\n不为confirmed时用NULL代替，NULL不会被COUNT统计\n\n* SUM：计算指定列的数值之和。\n* AVG：计算指定列的数值平均值。\n* MAX：找出指定列的最大值。\n* MIN：找出指定列的最小值。\n```js \n-- 使用聚合函数 COUNT 计算订单表中的总订单数\nSELECT COUNT(*) AS order_num\nFROM orders;\n```\n \n```js \n-- 使用聚合函数 COUNT(DISTINCT 列名) 计算订单表中不同客户的数量\nSELECT COUNT(DISTINCT customer_id) AS customer_num\nFROM orders;\n```\n \n```js \n-- 使用聚合函数 SUM 计算总订单金额\nSELECT SUM(amount) AS total_amount\nFROM orders;\n```\n\n## 分组\n\n#### 字段分组\n\n```js \n-- 使用分组聚合查询中每个客户的编号\nSELECT customer_id\nFROM orders\nGROUP BY customer_id;\n```\n \n```js \n-- 使用分组聚合查询每个客户的下单数\nSELECT customer_id, COUNT(order_id) AS order_num\nFROM orders\nGROUP BY customer_id;\n```\n \n```js \n-- 使用多字段分组查询表中 每个客户 购买的 每种商品 的总金额，相当于按照客户编号和商品编号分组\nSELECT customer_id, product_id, SUM(amount) AS total_amount\nFROM orders\nGROUP BY customer_id, product_id;\n```\n\n#### having 子句\n\n```js \n-- 使用 HAVING 子句查询订单数超过 1 的客户\n\nSELECT customer_id, COUNT(order_id) AS order_num\nFROM orders\nGROUP BY customer_id\nHAVING COUNT(order_id) > 1;\n```\n \n```js \n-- 使用 HAVING 子句查询订单总金额超过 100 的客户\nSELECT customer_id, SUM(amount) AS total_amount\nFROM orders\nGROUP BY customer_id\nHAVING SUM(amount) > 100;\n```\n\n## 关联查询\n\n#### CROSS JOIN\n\n是一种简单的关联查询，不需要任何条件来匹配行，它直接将左表的 每一行 与右表的 每一行 进行组合，返回的结果是两个表的笛卡尔积。\n```js \nSELECT e.emp_name, e.salary, e.department, d.manager\nFROM employees e\nCROSS JOIN departments d;\n```\n\n#### INNER JOIN\n\n只返回两个表中满足关联条件的交集部分，即在两个表中都存在的匹配行。\n```js \nSELECT e.emp_name, e.salary, e.department, d.manager\nFROM employees e\nJOIN departments d ON e.department = d.department;\n```\n\n#### OUTER JOIN\n\n根据指定的关联条件，将两个表中满足条件的行组合在一起，并包含没有匹配的行 。\n包括 LEFT OUTER JOIN 和 RIGHT OUTER JOIN 两种类型，分别表示查询左表和右表的所有行（即使没有被匹配），再加上满足条件的交集部分。有些数据库并不支持 RIGHT JOIN 语法，只需要把主表（from 后面的表）和关联表（LEFT JOIN 后面的表）顺序进行调换即可\n```js \nSELECT e.emp_name, e.salary, e.department, d.manager\nFROM employees e\nLEFT JOIN departments d ON e.department = d.department;\n```\n\n## 子查询\n\n```js \n-- 查询出订单总金额 > 200 的客户的姓名和他们的订单总金额\n-- 主查询\nSELECT name, total_amount\nFROM customers\nWHERE customer_id IN (\n    -- 子查询\n    SELECT DISTINCT customer_id\n    FROM orders\n    WHERE total_amount > 200\n);\n```\n\n**exists**\n用于检查主查询的结果集是否存在满足条件的记录，它返回布尔值（True 或 False），而不返回实际的数据。\n\n```js \n-- 主查询\nSELECT name, total_amount\nFROM customers\nWHERE EXISTS (\n    -- 子查询\n    SELECT 1\n    FROM orders\n    WHERE orders.customer_id = customers.customer_id\n);\n```\n\n#### 组合查询\n\n* **UNION** 操作：将两个或多个查询的结果集合并， 并去除重复的行 。即如果两个查询的结果有相同的行，则只保留一行。\n* **UNION ALL** 操作：将两个或多个查询的结果集合并， 但不去除重复的行 。即如果两个查询的结果有相同的行，则全部保留。\n```js \nSELECT name, age, department\nFROM table1\nUNION\nSELECT name, age, department\nFROM table2;\n```\n\n## 开窗函数\n\n#### sum over\n\nSUM(计算字段名) OVER (PARTITION BY 分组字段名)\n```js \nSELECT \n    order_id, \n    customer_id, \n    order_date, \n    total_amount,\n    SUM(total_amount) OVER (PARTITION BY customer_id) AS customer_total_amount\nFROM\n    orders;\n```\n\n#### sum over order by\n\nSUM(计算字段名) OVER (PARTITION BY 分组字段名 ORDER BY 排序字段 排序规则)\n```js \n-- 计算每个客户的历史订单累计金额，并显示每个订单的详细信息\n\nSELECT \n    order_id, \n    customer_id, \n    order_date, \n    total_amount,\n    SUM(total_amount) OVER (PARTITION BY customer_id ORDER BY order_date ASC) AS cumulative_total_amount\nFROM\n    orders;\n```\n\n#### rank\n\n用于对查询结果集中的行进行 排名 的开窗函数。可以根据指定的列或表达式对结果集中的行进行排序，并为每一行分配一个排名。\n在排名过程中，相同的值将被赋予相同的排名，而不同的值将被赋予不同的排名。\n常见用法是在查询结果中查找前几名（Top N）或排名最高的行。\n \n```js \nRANK() OVER (\n  PARTITION BY 列名1, 列名2, ... -- 可选，用于指定分组列\n  ORDER BY 列名3 [ASC|DESC], 列名4 [ASC|DESC], ... -- 用于指定排序列及排序方式\n) AS rank_column\nPARTITION BY 子句可选，用于指定分组列，将结果集按照指定列进行分组；\nORDER BY 子句用于指定排序列及排序方式，决定了计算 Rank 时的排序规则。\nAS rank_column 用于指定生成的 Rank 排名列的别名。\n```\n \n```js \nSELECT \n    order_id, \n    customer_id, \n    order_date, \n    total_amount,\n    RANK() OVER (PARTITION BY customer_id ORDER BY total_amount DESC) AS customer_rank\nFROM\n    orders;\n```\n\n#### row_number\n\n用于为查询结果集中的每一行分配唯一连续排名。\nRow_Number函数为每一行都分配一个唯一的整数值，不管是否存在并列（相同排序值）的情况。\n每一行都有一个唯一的行号，从 1 开始连续递增。\n\nRow_Number 开窗函数的语法如下（几乎和 Rank 函数一模一样）\n\n```js \nROW_NUMBER() OVER (\n  PARTITION BY column1, column2, ... -- 可选，用于指定分组列\n  ORDER BY column3 [ASC|DESC], column4 [ASC|DESC], ... -- 用于指定排序列及排序方式\n) AS row_number_column\nPARTITION BY子句可选，用于指定分组列，将结果集按照指定列进行分组。ORDER BY 子句用于指定排序列及排序方式，决定了计算 Row_Number 时的排序规则。AS row_number_column 用于指定生成的行号列的别名。\n```\n \n```js \nSELECT \n    order_id, \n    customer_id, \n    order_date, \n    total_amount,\n    ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY total_amount DESC) AS row_number\nFROM\n    orders;\n```\n\n#### lag / lead\n\n在需要比较相邻行数据或进行时间序列分析时非常有用。\n\n* Lag 函数用于获取当前行之前的某一列的值。Lag 函数的语法如下：\nLAG(column_name, offset, default_value) OVER (PARTITION BY partition_column ORDER BY sort_column)\n参数解释：\ncolumn_name：要获取值的列名。\noffset：表示要向上偏移的行数。例如，offset为1表示获取上一行的值，offset为2表示获取上两行的值，以此类推。\ndefault_value：可选参数，用于指定当没有前一行时的默认值。\nPARTITION BY和ORDER BY子句可选，用于分组和排序数据。\n\n* Lead 函数用于获取 当前行之后 的某一列的值。Lead 函数的语法如下：\nLEAD(column_name, offset, default_value) OVER (PARTITION BY partition_column ORDER BY sort_column)\n参数解释：\ncolumn_name：要获取值的列名。\noffset：表示要向下偏移的行数。例如，offset为1表示获取下一行的值，offset为2表示获取下两行的值，以此类推。\ndefault_value：可选参数，用于指定当没有后一行时的默认值。\nPARTITION BY和ORDER BY子句可选，用于分组和排序数据。\n \n```js \nSELECT \n    student_id,\n    exam_date,\n    score,\n    LAG(score, 1, NULL) OVER (PARTITION BY student_id ORDER BY exam_date) AS previous_score,\n    LEAD(score, 1, NULL) OVER (PARTITION BY student_id ORDER BY exam_date) AS next_score\nFROM\n    scores;\n```\n\n整理自网站SQL之母http://sqlmother.yupi.icu/#/learn（学习过，但记不住，单独查看太麻烦，所以整理给自己看）","slug":"MySQL基本语法","published":1,"updated":"2024-03-15T08:23:23.476Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clttq59bh000uzwvef62u0xaw","content":"<h2 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h2><h4 id=\"别名\"><a href=\"#别名\" class=\"headerlink\" title=\"别名\"></a>别名</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- 别名 <span class=\"hljs-keyword\">as</span> 可省略，但中间需要空格<br>select name <span class=\"hljs-keyword\">as</span> 员工姓名, position <span class=\"hljs-keyword\">as</span> 职位名称 <span class=\"hljs-keyword\">from</span> employees;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"常量和运算\"><a href=\"#常量和运算\" class=\"headerlink\" title=\"常量和运算\"></a>常量和运算</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">select <span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">&#x27;篮球&#x27;</span> <span class=\"hljs-keyword\">as</span> hobby;<br>select order_id, unit_price, quantity, unit_price * quantity <span class=\"hljs-keyword\">as</span> total_amount <span class=\"hljs-keyword\">from</span> orders;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">select name, age, salary <span class=\"hljs-keyword\">from</span> employees where age between <span class=\"hljs-number\">25</span> and <span class=\"hljs-number\">30</span>;<br>select name, age, salary <span class=\"hljs-keyword\">from</span> employees where salary &gt; <span class=\"hljs-number\">5500</span>;<br>select name, age, salary <span class=\"hljs-keyword\">from</span> employees where name != <span class=\"hljs-string\">&#x27;小张&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"空值\"><a href=\"#空值\" class=\"headerlink\" title=\"空值\"></a>空值</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- <span class=\"hljs-variable constant_\">SQL</span>查询语句<br>select name, age <span class=\"hljs-keyword\">from</span> employees where hire_date <span class=\"hljs-variable constant_\">IS</span> <span class=\"hljs-variable constant_\">NULL</span>;<br><br>select name, age <span class=\"hljs-keyword\">from</span> employees where hire_date <span class=\"hljs-variable constant_\">IS</span> <span class=\"hljs-variable constant_\">NOT</span> <span class=\"hljs-variable constant_\">NULL</span>;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"模糊查询-like-not-like\"><a href=\"#模糊查询-like-not-like\" class=\"headerlink\" title=\"模糊查询 like, not like _ %\"></a>模糊查询 like, not like _ %</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">select name, age, position <span class=\"hljs-keyword\">from</span> employees where name like <span class=\"hljs-string\">&#x27;%张%&#x27;</span>;<br>-- 只查询以 <span class=\"hljs-string\">&quot;张&quot;</span> 开头的数据行<br>select name, age, position <span class=\"hljs-keyword\">from</span> employees where name like <span class=\"hljs-string\">&#x27;张%&#x27;</span>;<br><br>-- 只查询以 <span class=\"hljs-string\">&quot;张&quot;</span> 结尾的数据行<br>select name, age, position <span class=\"hljs-keyword\">from</span> employees where name like <span class=\"hljs-string\">&#x27;%张&#x27;</span>;<br>-- 可以使用 not like 来查询不包含某关键字的信息。<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"逻辑运算\"><a href=\"#逻辑运算\" class=\"headerlink\" title=\"逻辑运算\"></a>逻辑运算</h4><p>AND OR NOT</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- <span class=\"hljs-variable constant_\">SQL</span>查询语句<br>select name, age, salary <span class=\"hljs-keyword\">from</span> employees where name like <span class=\"hljs-string\">&#x27;%李%&#x27;</span> and age &lt; <span class=\"hljs-number\">30</span>;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"去重\"><a href=\"#去重\" class=\"headerlink\" title=\"去重\"></a>去重</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- <span class=\"hljs-variable constant_\">SQL</span> 查询语句 使用<span class=\"hljs-variable constant_\">DISTINCT</span>关键字来找出不同的班级 <span class=\"hljs-variable constant_\">ID</span><br>select distinct class_id <span class=\"hljs-keyword\">from</span> students;<br>-- <span class=\"hljs-variable constant_\">DISTINCT</span> 关键字还支持根据多个字段的组合来进行去重操作，确保多个字段的组合是唯一的。<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- <span class=\"hljs-variable constant_\">SQL</span> 查询语句 <span class=\"hljs-number\">1</span><br>select name, age <span class=\"hljs-keyword\">from</span> students order by age asc;<br><br>-- <span class=\"hljs-variable constant_\">SQL</span> 查询语句 <span class=\"hljs-number\">2</span><br>select name, score <span class=\"hljs-keyword\">from</span> students order by score desc;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"截断、偏移\"><a href=\"#截断、偏移\" class=\"headerlink\" title=\"截断、偏移\"></a>截断、偏移</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- <span class=\"hljs-variable constant_\">LIMIT</span> 后只跟一个整数，表示要截断的数据条数（一次获取几条）<br>select task_name, due_date <span class=\"hljs-keyword\">from</span> tasks limit <span class=\"hljs-number\">2</span>;<br><br>-- <span class=\"hljs-variable constant_\">LIMIT</span> 后跟 <span class=\"hljs-number\">2</span> 个整数，依次表示从第几条数据开始、一次获取几条<br>select task_name, due_date <span class=\"hljs-keyword\">from</span> tasks limit <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"条件分支\"><a href=\"#条件分支\" class=\"headerlink\" title=\"条件分支\"></a>条件分支</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable constant_\">SELECT</span><br>  name,<br>  <span class=\"hljs-variable constant_\">CASE</span> <span class=\"hljs-variable constant_\">WHEN</span> (name = <span class=\"hljs-string\">&#x27;鸡哥&#x27;</span>) <span class=\"hljs-variable constant_\">THEN</span> <span class=\"hljs-string\">&#x27;会&#x27;</span> <span class=\"hljs-variable constant_\">ELSE</span> <span class=\"hljs-string\">&#x27;不会&#x27;</span> <span class=\"hljs-variable constant_\">END</span> <span class=\"hljs-variable constant_\">AS</span> can_rap<br><span class=\"hljs-variable constant_\">FROM</span><br>  student;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable constant_\">CASE</span> <span class=\"hljs-variable constant_\">WHEN</span> (条件<span class=\"hljs-number\">1</span>) <span class=\"hljs-variable constant_\">THEN</span> 结果<span class=\"hljs-number\">1</span><br>\t   <span class=\"hljs-variable constant_\">WHEN</span> (条件<span class=\"hljs-number\">2</span>) <span class=\"hljs-variable constant_\">THEN</span> 结果<span class=\"hljs-number\">2</span><br>\t   ...<br>\t   <span class=\"hljs-variable constant_\">ELSE</span> 其他结果 <span class=\"hljs-variable constant_\">END</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><h4 id=\"时间\"><a href=\"#时间\" class=\"headerlink\" title=\"时间\"></a>时间</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- 获取当前日期<br><span class=\"hljs-variable constant_\">SELECT</span> <span class=\"hljs-title function_\">DATE</span>() <span class=\"hljs-variable constant_\">AS</span> current_date;<br><br>-- 获取当前日期时间<br><span class=\"hljs-variable constant_\">SELECT</span> <span class=\"hljs-title function_\">DATETIME</span>() <span class=\"hljs-variable constant_\">AS</span> current_datetime;<br><br>-- 获取当前时间<br><span class=\"hljs-variable constant_\">SELECT</span> <span class=\"hljs-title function_\">TIME</span>() <span class=\"hljs-variable constant_\">AS</span> current_time;<br>-- 这里的日期、日期时间和时间将根据当前的系统时间来生成，实际运行结果可能会因为当前时间而不同。<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"四舍五入\"><a href=\"#四舍五入\" class=\"headerlink\" title=\"四舍五入\"></a>四舍五入</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">round</span>(<span class=\"hljs-title function_\">AVG</span>(grade),<span class=\"hljs-number\">2</span>)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"字符串处理\"><a href=\"#字符串处理\" class=\"headerlink\" title=\"字符串处理\"></a>字符串处理</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- 将姓名转换为大写<br><span class=\"hljs-variable constant_\">SELECT</span> name, <span class=\"hljs-title function_\">UPPER</span>(name) <span class=\"hljs-variable constant_\">AS</span> upper_name<br><span class=\"hljs-variable constant_\">FROM</span> employees;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- 计算姓名长度<br><span class=\"hljs-variable constant_\">SELECT</span> name, <span class=\"hljs-title function_\">LENGTH</span>(name) <span class=\"hljs-variable constant_\">AS</span> name_length<br><span class=\"hljs-variable constant_\">FROM</span> employees;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- 将姓名转换为小写并进行条件筛选<br><span class=\"hljs-variable constant_\">SELECT</span> name, <span class=\"hljs-title function_\">LOWER</span>(name) <span class=\"hljs-variable constant_\">AS</span> lower_name<br><span class=\"hljs-variable constant_\">FROM</span> employees;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"聚合\"><a href=\"#聚合\" class=\"headerlink\" title=\"聚合\"></a>聚合</h4><ul>\n<li><p>COUNT：计算指定列的行数或非空值的数量。<br>当Mysql确认括号内的表达式值不可能为NULL时，实际上就是在统计行数。<br>所以使用条件要加一个COUNT(c.action &#x3D; ‘confirmed’ OR NULL)<br>不为confirmed时用NULL代替，NULL不会被COUNT统计</p>\n</li>\n<li><p>SUM：计算指定列的数值之和。</p>\n</li>\n<li><p>AVG：计算指定列的数值平均值。</p>\n</li>\n<li><p>MAX：找出指定列的最大值。</p>\n</li>\n<li><p>MIN：找出指定列的最小值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- 使用聚合函数 <span class=\"hljs-variable constant_\">COUNT</span> 计算订单表中的总订单数<br><span class=\"hljs-variable constant_\">SELECT</span> <span class=\"hljs-title function_\">COUNT</span>(*) <span class=\"hljs-variable constant_\">AS</span> order_num<br><span class=\"hljs-variable constant_\">FROM</span> orders;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- 使用聚合函数 <span class=\"hljs-title function_\">COUNT</span>(<span class=\"hljs-variable constant_\">DISTINCT</span> 列名) 计算订单表中不同客户的数量<br><span class=\"hljs-variable constant_\">SELECT</span> <span class=\"hljs-title function_\">COUNT</span>(<span class=\"hljs-variable constant_\">DISTINCT</span> customer_id) <span class=\"hljs-variable constant_\">AS</span> customer_num<br><span class=\"hljs-variable constant_\">FROM</span> orders;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- 使用聚合函数 <span class=\"hljs-variable constant_\">SUM</span> 计算总订单金额<br><span class=\"hljs-variable constant_\">SELECT</span> <span class=\"hljs-title function_\">SUM</span>(amount) <span class=\"hljs-variable constant_\">AS</span> total_amount<br><span class=\"hljs-variable constant_\">FROM</span> orders;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h2><h4 id=\"字段分组\"><a href=\"#字段分组\" class=\"headerlink\" title=\"字段分组\"></a>字段分组</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- 使用分组聚合查询中每个客户的编号<br><span class=\"hljs-variable constant_\">SELECT</span> customer_id<br><span class=\"hljs-variable constant_\">FROM</span> orders<br><span class=\"hljs-variable constant_\">GROUP</span> <span class=\"hljs-variable constant_\">BY</span> customer_id;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- 使用分组聚合查询每个客户的下单数<br><span class=\"hljs-variable constant_\">SELECT</span> customer_id, <span class=\"hljs-title function_\">COUNT</span>(order_id) <span class=\"hljs-variable constant_\">AS</span> order_num<br><span class=\"hljs-variable constant_\">FROM</span> orders<br><span class=\"hljs-variable constant_\">GROUP</span> <span class=\"hljs-variable constant_\">BY</span> customer_id;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- 使用多字段分组查询表中 每个客户 购买的 每种商品 的总金额，相当于按照客户编号和商品编号分组<br><span class=\"hljs-variable constant_\">SELECT</span> customer_id, product_id, <span class=\"hljs-title function_\">SUM</span>(amount) <span class=\"hljs-variable constant_\">AS</span> total_amount<br><span class=\"hljs-variable constant_\">FROM</span> orders<br><span class=\"hljs-variable constant_\">GROUP</span> <span class=\"hljs-variable constant_\">BY</span> customer_id, product_id;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"having-子句\"><a href=\"#having-子句\" class=\"headerlink\" title=\"having 子句\"></a>having 子句</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- 使用 <span class=\"hljs-variable constant_\">HAVING</span> 子句查询订单数超过 <span class=\"hljs-number\">1</span> 的客户<br><br><span class=\"hljs-variable constant_\">SELECT</span> customer_id, <span class=\"hljs-title function_\">COUNT</span>(order_id) <span class=\"hljs-variable constant_\">AS</span> order_num<br><span class=\"hljs-variable constant_\">FROM</span> orders<br><span class=\"hljs-variable constant_\">GROUP</span> <span class=\"hljs-variable constant_\">BY</span> customer_id<br><span class=\"hljs-variable constant_\">HAVING</span> <span class=\"hljs-title function_\">COUNT</span>(order_id) &gt; <span class=\"hljs-number\">1</span>;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- 使用 <span class=\"hljs-variable constant_\">HAVING</span> 子句查询订单总金额超过 <span class=\"hljs-number\">100</span> 的客户<br><span class=\"hljs-variable constant_\">SELECT</span> customer_id, <span class=\"hljs-title function_\">SUM</span>(amount) <span class=\"hljs-variable constant_\">AS</span> total_amount<br><span class=\"hljs-variable constant_\">FROM</span> orders<br><span class=\"hljs-variable constant_\">GROUP</span> <span class=\"hljs-variable constant_\">BY</span> customer_id<br><span class=\"hljs-variable constant_\">HAVING</span> <span class=\"hljs-title function_\">SUM</span>(amount) &gt; <span class=\"hljs-number\">100</span>;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"关联查询\"><a href=\"#关联查询\" class=\"headerlink\" title=\"关联查询\"></a>关联查询</h2><h4 id=\"CROSS-JOIN\"><a href=\"#CROSS-JOIN\" class=\"headerlink\" title=\"CROSS JOIN\"></a>CROSS JOIN</h4><p>是一种简单的关联查询，不需要任何条件来匹配行，它直接将左表的 每一行 与右表的 每一行 进行组合，返回的结果是两个表的笛卡尔积。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable constant_\">SELECT</span> e.<span class=\"hljs-property\">emp_name</span>, e.<span class=\"hljs-property\">salary</span>, e.<span class=\"hljs-property\">department</span>, d.<span class=\"hljs-property\">manager</span><br><span class=\"hljs-variable constant_\">FROM</span> employees e<br><span class=\"hljs-variable constant_\">CROSS</span> <span class=\"hljs-variable constant_\">JOIN</span> departments d;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"INNER-JOIN\"><a href=\"#INNER-JOIN\" class=\"headerlink\" title=\"INNER JOIN\"></a>INNER JOIN</h4><p>只返回两个表中满足关联条件的交集部分，即在两个表中都存在的匹配行。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable constant_\">SELECT</span> e.<span class=\"hljs-property\">emp_name</span>, e.<span class=\"hljs-property\">salary</span>, e.<span class=\"hljs-property\">department</span>, d.<span class=\"hljs-property\">manager</span><br><span class=\"hljs-variable constant_\">FROM</span> employees e<br><span class=\"hljs-variable constant_\">JOIN</span> departments d <span class=\"hljs-variable constant_\">ON</span> e.<span class=\"hljs-property\">department</span> = d.<span class=\"hljs-property\">department</span>;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"OUTER-JOIN\"><a href=\"#OUTER-JOIN\" class=\"headerlink\" title=\"OUTER JOIN\"></a>OUTER JOIN</h4><p>根据指定的关联条件，将两个表中满足条件的行组合在一起，并包含没有匹配的行 。<br>包括 LEFT OUTER JOIN 和 RIGHT OUTER JOIN 两种类型，分别表示查询左表和右表的所有行（即使没有被匹配），再加上满足条件的交集部分。有些数据库并不支持 RIGHT JOIN 语法，只需要把主表（from 后面的表）和关联表（LEFT JOIN 后面的表）顺序进行调换即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable constant_\">SELECT</span> e.<span class=\"hljs-property\">emp_name</span>, e.<span class=\"hljs-property\">salary</span>, e.<span class=\"hljs-property\">department</span>, d.<span class=\"hljs-property\">manager</span><br><span class=\"hljs-variable constant_\">FROM</span> employees e<br><span class=\"hljs-variable constant_\">LEFT</span> <span class=\"hljs-variable constant_\">JOIN</span> departments d <span class=\"hljs-variable constant_\">ON</span> e.<span class=\"hljs-property\">department</span> = d.<span class=\"hljs-property\">department</span>;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"子查询\"><a href=\"#子查询\" class=\"headerlink\" title=\"子查询\"></a>子查询</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- 查询出订单总金额 &gt; <span class=\"hljs-number\">200</span> 的客户的姓名和他们的订单总金额<br>-- 主查询<br><span class=\"hljs-variable constant_\">SELECT</span> name, total_amount<br><span class=\"hljs-variable constant_\">FROM</span> customers<br><span class=\"hljs-variable constant_\">WHERE</span> customer_id <span class=\"hljs-variable constant_\">IN</span> (<br>    -- 子查询<br>    <span class=\"hljs-variable constant_\">SELECT</span> <span class=\"hljs-variable constant_\">DISTINCT</span> customer_id<br>    <span class=\"hljs-variable constant_\">FROM</span> orders<br>    <span class=\"hljs-variable constant_\">WHERE</span> total_amount &gt; <span class=\"hljs-number\">200</span><br>);<br></code></pre></td></tr></table></figure>\n\n<p><strong>exists</strong><br>用于检查主查询的结果集是否存在满足条件的记录，它返回布尔值（True 或 False），而不返回实际的数据。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- 主查询<br><span class=\"hljs-variable constant_\">SELECT</span> name, total_amount<br><span class=\"hljs-variable constant_\">FROM</span> customers<br><span class=\"hljs-variable constant_\">WHERE</span> <span class=\"hljs-variable constant_\">EXISTS</span> (<br>    -- 子查询<br>    <span class=\"hljs-variable constant_\">SELECT</span> <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-variable constant_\">FROM</span> orders<br>    <span class=\"hljs-variable constant_\">WHERE</span> orders.<span class=\"hljs-property\">customer_id</span> = customers.<span class=\"hljs-property\">customer_id</span><br>);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"组合查询\"><a href=\"#组合查询\" class=\"headerlink\" title=\"组合查询\"></a>组合查询</h4><ul>\n<li><strong>UNION</strong> 操作：将两个或多个查询的结果集合并， 并去除重复的行 。即如果两个查询的结果有相同的行，则只保留一行。</li>\n<li><strong>UNION ALL</strong> 操作：将两个或多个查询的结果集合并， 但不去除重复的行 。即如果两个查询的结果有相同的行，则全部保留。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable constant_\">SELECT</span> name, age, department<br><span class=\"hljs-variable constant_\">FROM</span> table1<br><span class=\"hljs-variable constant_\">UNION</span><br><span class=\"hljs-variable constant_\">SELECT</span> name, age, department<br><span class=\"hljs-variable constant_\">FROM</span> table2;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"开窗函数\"><a href=\"#开窗函数\" class=\"headerlink\" title=\"开窗函数\"></a>开窗函数</h2><h4 id=\"sum-over\"><a href=\"#sum-over\" class=\"headerlink\" title=\"sum over\"></a>sum over</h4><p>SUM(计算字段名) OVER (PARTITION BY 分组字段名)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable constant_\">SELECT</span> <br>    order_id, <br>    customer_id, <br>    order_date, <br>    total_amount,<br>    <span class=\"hljs-title function_\">SUM</span>(total_amount) <span class=\"hljs-variable constant_\">OVER</span> (<span class=\"hljs-variable constant_\">PARTITION</span> <span class=\"hljs-variable constant_\">BY</span> customer_id) <span class=\"hljs-variable constant_\">AS</span> customer_total_amount<br><span class=\"hljs-variable constant_\">FROM</span><br>    orders;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"sum-over-order-by\"><a href=\"#sum-over-order-by\" class=\"headerlink\" title=\"sum over order by\"></a>sum over order by</h4><p>SUM(计算字段名) OVER (PARTITION BY 分组字段名 ORDER BY 排序字段 排序规则)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- 计算每个客户的历史订单累计金额，并显示每个订单的详细信息<br><br><span class=\"hljs-variable constant_\">SELECT</span> <br>    order_id, <br>    customer_id, <br>    order_date, <br>    total_amount,<br>    <span class=\"hljs-title function_\">SUM</span>(total_amount) <span class=\"hljs-variable constant_\">OVER</span> (<span class=\"hljs-variable constant_\">PARTITION</span> <span class=\"hljs-variable constant_\">BY</span> customer_id <span class=\"hljs-variable constant_\">ORDER</span> <span class=\"hljs-variable constant_\">BY</span> order_date <span class=\"hljs-variable constant_\">ASC</span>) <span class=\"hljs-variable constant_\">AS</span> cumulative_total_amount<br><span class=\"hljs-variable constant_\">FROM</span><br>    orders;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"rank\"><a href=\"#rank\" class=\"headerlink\" title=\"rank\"></a>rank</h4><p>用于对查询结果集中的行进行 排名 的开窗函数。可以根据指定的列或表达式对结果集中的行进行排序，并为每一行分配一个排名。<br>在排名过程中，相同的值将被赋予相同的排名，而不同的值将被赋予不同的排名。<br>常见用法是在查询结果中查找前几名（Top N）或排名最高的行。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">RANK</span>() <span class=\"hljs-variable constant_\">OVER</span> (<br>  <span class=\"hljs-variable constant_\">PARTITION</span> <span class=\"hljs-variable constant_\">BY</span> 列名<span class=\"hljs-number\">1</span>, 列名<span class=\"hljs-number\">2</span>, ... -- 可选，用于指定分组列<br>  <span class=\"hljs-variable constant_\">ORDER</span> <span class=\"hljs-variable constant_\">BY</span> 列名<span class=\"hljs-number\">3</span> [<span class=\"hljs-variable constant_\">ASC</span>|<span class=\"hljs-variable constant_\">DESC</span>], 列名<span class=\"hljs-number\">4</span> [<span class=\"hljs-variable constant_\">ASC</span>|<span class=\"hljs-variable constant_\">DESC</span>], ... -- 用于指定排序列及排序方式<br>) <span class=\"hljs-variable constant_\">AS</span> rank_column<br><span class=\"hljs-variable constant_\">PARTITION</span> <span class=\"hljs-variable constant_\">BY</span> 子句可选，用于指定分组列，将结果集按照指定列进行分组；<br><span class=\"hljs-variable constant_\">ORDER</span> <span class=\"hljs-variable constant_\">BY</span> 子句用于指定排序列及排序方式，决定了计算 <span class=\"hljs-title class_\">Rank</span> 时的排序规则。<br><span class=\"hljs-variable constant_\">AS</span> rank_column 用于指定生成的 <span class=\"hljs-title class_\">Rank</span> 排名列的别名。<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable constant_\">SELECT</span> <br>    order_id, <br>    customer_id, <br>    order_date, <br>    total_amount,<br>    <span class=\"hljs-title function_\">RANK</span>() <span class=\"hljs-variable constant_\">OVER</span> (<span class=\"hljs-variable constant_\">PARTITION</span> <span class=\"hljs-variable constant_\">BY</span> customer_id <span class=\"hljs-variable constant_\">ORDER</span> <span class=\"hljs-variable constant_\">BY</span> total_amount <span class=\"hljs-variable constant_\">DESC</span>) <span class=\"hljs-variable constant_\">AS</span> customer_rank<br><span class=\"hljs-variable constant_\">FROM</span><br>    orders;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"row-number\"><a href=\"#row-number\" class=\"headerlink\" title=\"row_number\"></a>row_number</h4><p>用于为查询结果集中的每一行分配唯一连续排名。<br>Row_Number函数为每一行都分配一个唯一的整数值，不管是否存在并列（相同排序值）的情况。<br>每一行都有一个唯一的行号，从 1 开始连续递增。</p>\n<p>Row_Number 开窗函数的语法如下（几乎和 Rank 函数一模一样）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">ROW_NUMBER</span>() <span class=\"hljs-variable constant_\">OVER</span> (<br>  <span class=\"hljs-variable constant_\">PARTITION</span> <span class=\"hljs-variable constant_\">BY</span> column1, column2, ... -- 可选，用于指定分组列<br>  <span class=\"hljs-variable constant_\">ORDER</span> <span class=\"hljs-variable constant_\">BY</span> column3 [<span class=\"hljs-variable constant_\">ASC</span>|<span class=\"hljs-variable constant_\">DESC</span>], column4 [<span class=\"hljs-variable constant_\">ASC</span>|<span class=\"hljs-variable constant_\">DESC</span>], ... -- 用于指定排序列及排序方式<br>) <span class=\"hljs-variable constant_\">AS</span> row_number_column<br><span class=\"hljs-variable constant_\">PARTITION</span> <span class=\"hljs-variable constant_\">BY</span>子句可选，用于指定分组列，将结果集按照指定列进行分组。<span class=\"hljs-variable constant_\">ORDER</span> <span class=\"hljs-variable constant_\">BY</span> 子句用于指定排序列及排序方式，决定了计算 <span class=\"hljs-title class_\">Row</span>_Number 时的排序规则。<span class=\"hljs-variable constant_\">AS</span> row_number_column 用于指定生成的行号列的别名。<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable constant_\">SELECT</span> <br>    order_id, <br>    customer_id, <br>    order_date, <br>    total_amount,<br>    <span class=\"hljs-title function_\">ROW_NUMBER</span>() <span class=\"hljs-variable constant_\">OVER</span> (<span class=\"hljs-variable constant_\">PARTITION</span> <span class=\"hljs-variable constant_\">BY</span> customer_id <span class=\"hljs-variable constant_\">ORDER</span> <span class=\"hljs-variable constant_\">BY</span> total_amount <span class=\"hljs-variable constant_\">DESC</span>) <span class=\"hljs-variable constant_\">AS</span> row_number<br><span class=\"hljs-variable constant_\">FROM</span><br>    orders;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"lag-lead\"><a href=\"#lag-lead\" class=\"headerlink\" title=\"lag &#x2F; lead\"></a>lag &#x2F; lead</h4><p>在需要比较相邻行数据或进行时间序列分析时非常有用。</p>\n<ul>\n<li><p>Lag 函数用于获取当前行之前的某一列的值。Lag 函数的语法如下：<br>LAG(column_name, offset, default_value) OVER (PARTITION BY partition_column ORDER BY sort_column)<br>参数解释：<br>column_name：要获取值的列名。<br>offset：表示要向上偏移的行数。例如，offset为1表示获取上一行的值，offset为2表示获取上两行的值，以此类推。<br>default_value：可选参数，用于指定当没有前一行时的默认值。<br>PARTITION BY和ORDER BY子句可选，用于分组和排序数据。</p>\n</li>\n<li><p>Lead 函数用于获取 当前行之后 的某一列的值。Lead 函数的语法如下：<br>LEAD(column_name, offset, default_value) OVER (PARTITION BY partition_column ORDER BY sort_column)<br>参数解释：<br>column_name：要获取值的列名。<br>offset：表示要向下偏移的行数。例如，offset为1表示获取下一行的值，offset为2表示获取下两行的值，以此类推。<br>default_value：可选参数，用于指定当没有后一行时的默认值。<br>PARTITION BY和ORDER BY子句可选，用于分组和排序数据。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable constant_\">SELECT</span> <br>    student_id,<br>    exam_date,<br>    score,<br>    <span class=\"hljs-title function_\">LAG</span>(score, <span class=\"hljs-number\">1</span>, <span class=\"hljs-variable constant_\">NULL</span>) <span class=\"hljs-variable constant_\">OVER</span> (<span class=\"hljs-variable constant_\">PARTITION</span> <span class=\"hljs-variable constant_\">BY</span> student_id <span class=\"hljs-variable constant_\">ORDER</span> <span class=\"hljs-variable constant_\">BY</span> exam_date) <span class=\"hljs-variable constant_\">AS</span> previous_score,<br>    <span class=\"hljs-title function_\">LEAD</span>(score, <span class=\"hljs-number\">1</span>, <span class=\"hljs-variable constant_\">NULL</span>) <span class=\"hljs-variable constant_\">OVER</span> (<span class=\"hljs-variable constant_\">PARTITION</span> <span class=\"hljs-variable constant_\">BY</span> student_id <span class=\"hljs-variable constant_\">ORDER</span> <span class=\"hljs-variable constant_\">BY</span> exam_date) <span class=\"hljs-variable constant_\">AS</span> next_score<br><span class=\"hljs-variable constant_\">FROM</span><br>    scores;<br></code></pre></td></tr></table></figure>\n\n<p>整理自网站SQL之母<a href=\"http://sqlmother.yupi.icu/#/learn%EF%BC%88%E5%AD%A6%E4%B9%A0%E8%BF%87%EF%BC%8C%E4%BD%86%E8%AE%B0%E4%B8%8D%E4%BD%8F%EF%BC%8C%E5%8D%95%E7%8B%AC%E6%9F%A5%E7%9C%8B%E5%A4%AA%E9%BA%BB%E7%83%A6%EF%BC%8C%E6%89%80%E4%BB%A5%E6%95%B4%E7%90%86%E7%BB%99%E8%87%AA%E5%B7%B1%E7%9C%8B%EF%BC%89\">http://sqlmother.yupi.icu/#/learn（学习过，但记不住，单独查看太麻烦，所以整理给自己看）</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h2><h4 id=\"别名\"><a href=\"#别名\" class=\"headerlink\" title=\"别名\"></a>别名</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- 别名 <span class=\"hljs-keyword\">as</span> 可省略，但中间需要空格<br>select name <span class=\"hljs-keyword\">as</span> 员工姓名, position <span class=\"hljs-keyword\">as</span> 职位名称 <span class=\"hljs-keyword\">from</span> employees;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"常量和运算\"><a href=\"#常量和运算\" class=\"headerlink\" title=\"常量和运算\"></a>常量和运算</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">select <span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">&#x27;篮球&#x27;</span> <span class=\"hljs-keyword\">as</span> hobby;<br>select order_id, unit_price, quantity, unit_price * quantity <span class=\"hljs-keyword\">as</span> total_amount <span class=\"hljs-keyword\">from</span> orders;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">select name, age, salary <span class=\"hljs-keyword\">from</span> employees where age between <span class=\"hljs-number\">25</span> and <span class=\"hljs-number\">30</span>;<br>select name, age, salary <span class=\"hljs-keyword\">from</span> employees where salary &gt; <span class=\"hljs-number\">5500</span>;<br>select name, age, salary <span class=\"hljs-keyword\">from</span> employees where name != <span class=\"hljs-string\">&#x27;小张&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"空值\"><a href=\"#空值\" class=\"headerlink\" title=\"空值\"></a>空值</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- <span class=\"hljs-variable constant_\">SQL</span>查询语句<br>select name, age <span class=\"hljs-keyword\">from</span> employees where hire_date <span class=\"hljs-variable constant_\">IS</span> <span class=\"hljs-variable constant_\">NULL</span>;<br><br>select name, age <span class=\"hljs-keyword\">from</span> employees where hire_date <span class=\"hljs-variable constant_\">IS</span> <span class=\"hljs-variable constant_\">NOT</span> <span class=\"hljs-variable constant_\">NULL</span>;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"模糊查询-like-not-like\"><a href=\"#模糊查询-like-not-like\" class=\"headerlink\" title=\"模糊查询 like, not like _ %\"></a>模糊查询 like, not like _ %</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">select name, age, position <span class=\"hljs-keyword\">from</span> employees where name like <span class=\"hljs-string\">&#x27;%张%&#x27;</span>;<br>-- 只查询以 <span class=\"hljs-string\">&quot;张&quot;</span> 开头的数据行<br>select name, age, position <span class=\"hljs-keyword\">from</span> employees where name like <span class=\"hljs-string\">&#x27;张%&#x27;</span>;<br><br>-- 只查询以 <span class=\"hljs-string\">&quot;张&quot;</span> 结尾的数据行<br>select name, age, position <span class=\"hljs-keyword\">from</span> employees where name like <span class=\"hljs-string\">&#x27;%张&#x27;</span>;<br>-- 可以使用 not like 来查询不包含某关键字的信息。<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"逻辑运算\"><a href=\"#逻辑运算\" class=\"headerlink\" title=\"逻辑运算\"></a>逻辑运算</h4><p>AND OR NOT</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- <span class=\"hljs-variable constant_\">SQL</span>查询语句<br>select name, age, salary <span class=\"hljs-keyword\">from</span> employees where name like <span class=\"hljs-string\">&#x27;%李%&#x27;</span> and age &lt; <span class=\"hljs-number\">30</span>;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"去重\"><a href=\"#去重\" class=\"headerlink\" title=\"去重\"></a>去重</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- <span class=\"hljs-variable constant_\">SQL</span> 查询语句 使用<span class=\"hljs-variable constant_\">DISTINCT</span>关键字来找出不同的班级 <span class=\"hljs-variable constant_\">ID</span><br>select distinct class_id <span class=\"hljs-keyword\">from</span> students;<br>-- <span class=\"hljs-variable constant_\">DISTINCT</span> 关键字还支持根据多个字段的组合来进行去重操作，确保多个字段的组合是唯一的。<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- <span class=\"hljs-variable constant_\">SQL</span> 查询语句 <span class=\"hljs-number\">1</span><br>select name, age <span class=\"hljs-keyword\">from</span> students order by age asc;<br><br>-- <span class=\"hljs-variable constant_\">SQL</span> 查询语句 <span class=\"hljs-number\">2</span><br>select name, score <span class=\"hljs-keyword\">from</span> students order by score desc;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"截断、偏移\"><a href=\"#截断、偏移\" class=\"headerlink\" title=\"截断、偏移\"></a>截断、偏移</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- <span class=\"hljs-variable constant_\">LIMIT</span> 后只跟一个整数，表示要截断的数据条数（一次获取几条）<br>select task_name, due_date <span class=\"hljs-keyword\">from</span> tasks limit <span class=\"hljs-number\">2</span>;<br><br>-- <span class=\"hljs-variable constant_\">LIMIT</span> 后跟 <span class=\"hljs-number\">2</span> 个整数，依次表示从第几条数据开始、一次获取几条<br>select task_name, due_date <span class=\"hljs-keyword\">from</span> tasks limit <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"条件分支\"><a href=\"#条件分支\" class=\"headerlink\" title=\"条件分支\"></a>条件分支</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable constant_\">SELECT</span><br>  name,<br>  <span class=\"hljs-variable constant_\">CASE</span> <span class=\"hljs-variable constant_\">WHEN</span> (name = <span class=\"hljs-string\">&#x27;鸡哥&#x27;</span>) <span class=\"hljs-variable constant_\">THEN</span> <span class=\"hljs-string\">&#x27;会&#x27;</span> <span class=\"hljs-variable constant_\">ELSE</span> <span class=\"hljs-string\">&#x27;不会&#x27;</span> <span class=\"hljs-variable constant_\">END</span> <span class=\"hljs-variable constant_\">AS</span> can_rap<br><span class=\"hljs-variable constant_\">FROM</span><br>  student;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable constant_\">CASE</span> <span class=\"hljs-variable constant_\">WHEN</span> (条件<span class=\"hljs-number\">1</span>) <span class=\"hljs-variable constant_\">THEN</span> 结果<span class=\"hljs-number\">1</span><br>\t   <span class=\"hljs-variable constant_\">WHEN</span> (条件<span class=\"hljs-number\">2</span>) <span class=\"hljs-variable constant_\">THEN</span> 结果<span class=\"hljs-number\">2</span><br>\t   ...<br>\t   <span class=\"hljs-variable constant_\">ELSE</span> 其他结果 <span class=\"hljs-variable constant_\">END</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><h4 id=\"时间\"><a href=\"#时间\" class=\"headerlink\" title=\"时间\"></a>时间</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- 获取当前日期<br><span class=\"hljs-variable constant_\">SELECT</span> <span class=\"hljs-title function_\">DATE</span>() <span class=\"hljs-variable constant_\">AS</span> current_date;<br><br>-- 获取当前日期时间<br><span class=\"hljs-variable constant_\">SELECT</span> <span class=\"hljs-title function_\">DATETIME</span>() <span class=\"hljs-variable constant_\">AS</span> current_datetime;<br><br>-- 获取当前时间<br><span class=\"hljs-variable constant_\">SELECT</span> <span class=\"hljs-title function_\">TIME</span>() <span class=\"hljs-variable constant_\">AS</span> current_time;<br>-- 这里的日期、日期时间和时间将根据当前的系统时间来生成，实际运行结果可能会因为当前时间而不同。<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"四舍五入\"><a href=\"#四舍五入\" class=\"headerlink\" title=\"四舍五入\"></a>四舍五入</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">round</span>(<span class=\"hljs-title function_\">AVG</span>(grade),<span class=\"hljs-number\">2</span>)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"字符串处理\"><a href=\"#字符串处理\" class=\"headerlink\" title=\"字符串处理\"></a>字符串处理</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- 将姓名转换为大写<br><span class=\"hljs-variable constant_\">SELECT</span> name, <span class=\"hljs-title function_\">UPPER</span>(name) <span class=\"hljs-variable constant_\">AS</span> upper_name<br><span class=\"hljs-variable constant_\">FROM</span> employees;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- 计算姓名长度<br><span class=\"hljs-variable constant_\">SELECT</span> name, <span class=\"hljs-title function_\">LENGTH</span>(name) <span class=\"hljs-variable constant_\">AS</span> name_length<br><span class=\"hljs-variable constant_\">FROM</span> employees;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- 将姓名转换为小写并进行条件筛选<br><span class=\"hljs-variable constant_\">SELECT</span> name, <span class=\"hljs-title function_\">LOWER</span>(name) <span class=\"hljs-variable constant_\">AS</span> lower_name<br><span class=\"hljs-variable constant_\">FROM</span> employees;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"聚合\"><a href=\"#聚合\" class=\"headerlink\" title=\"聚合\"></a>聚合</h4><ul>\n<li><p>COUNT：计算指定列的行数或非空值的数量。<br>当Mysql确认括号内的表达式值不可能为NULL时，实际上就是在统计行数。<br>所以使用条件要加一个COUNT(c.action &#x3D; ‘confirmed’ OR NULL)<br>不为confirmed时用NULL代替，NULL不会被COUNT统计</p>\n</li>\n<li><p>SUM：计算指定列的数值之和。</p>\n</li>\n<li><p>AVG：计算指定列的数值平均值。</p>\n</li>\n<li><p>MAX：找出指定列的最大值。</p>\n</li>\n<li><p>MIN：找出指定列的最小值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- 使用聚合函数 <span class=\"hljs-variable constant_\">COUNT</span> 计算订单表中的总订单数<br><span class=\"hljs-variable constant_\">SELECT</span> <span class=\"hljs-title function_\">COUNT</span>(*) <span class=\"hljs-variable constant_\">AS</span> order_num<br><span class=\"hljs-variable constant_\">FROM</span> orders;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- 使用聚合函数 <span class=\"hljs-title function_\">COUNT</span>(<span class=\"hljs-variable constant_\">DISTINCT</span> 列名) 计算订单表中不同客户的数量<br><span class=\"hljs-variable constant_\">SELECT</span> <span class=\"hljs-title function_\">COUNT</span>(<span class=\"hljs-variable constant_\">DISTINCT</span> customer_id) <span class=\"hljs-variable constant_\">AS</span> customer_num<br><span class=\"hljs-variable constant_\">FROM</span> orders;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- 使用聚合函数 <span class=\"hljs-variable constant_\">SUM</span> 计算总订单金额<br><span class=\"hljs-variable constant_\">SELECT</span> <span class=\"hljs-title function_\">SUM</span>(amount) <span class=\"hljs-variable constant_\">AS</span> total_amount<br><span class=\"hljs-variable constant_\">FROM</span> orders;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h2><h4 id=\"字段分组\"><a href=\"#字段分组\" class=\"headerlink\" title=\"字段分组\"></a>字段分组</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- 使用分组聚合查询中每个客户的编号<br><span class=\"hljs-variable constant_\">SELECT</span> customer_id<br><span class=\"hljs-variable constant_\">FROM</span> orders<br><span class=\"hljs-variable constant_\">GROUP</span> <span class=\"hljs-variable constant_\">BY</span> customer_id;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- 使用分组聚合查询每个客户的下单数<br><span class=\"hljs-variable constant_\">SELECT</span> customer_id, <span class=\"hljs-title function_\">COUNT</span>(order_id) <span class=\"hljs-variable constant_\">AS</span> order_num<br><span class=\"hljs-variable constant_\">FROM</span> orders<br><span class=\"hljs-variable constant_\">GROUP</span> <span class=\"hljs-variable constant_\">BY</span> customer_id;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- 使用多字段分组查询表中 每个客户 购买的 每种商品 的总金额，相当于按照客户编号和商品编号分组<br><span class=\"hljs-variable constant_\">SELECT</span> customer_id, product_id, <span class=\"hljs-title function_\">SUM</span>(amount) <span class=\"hljs-variable constant_\">AS</span> total_amount<br><span class=\"hljs-variable constant_\">FROM</span> orders<br><span class=\"hljs-variable constant_\">GROUP</span> <span class=\"hljs-variable constant_\">BY</span> customer_id, product_id;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"having-子句\"><a href=\"#having-子句\" class=\"headerlink\" title=\"having 子句\"></a>having 子句</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- 使用 <span class=\"hljs-variable constant_\">HAVING</span> 子句查询订单数超过 <span class=\"hljs-number\">1</span> 的客户<br><br><span class=\"hljs-variable constant_\">SELECT</span> customer_id, <span class=\"hljs-title function_\">COUNT</span>(order_id) <span class=\"hljs-variable constant_\">AS</span> order_num<br><span class=\"hljs-variable constant_\">FROM</span> orders<br><span class=\"hljs-variable constant_\">GROUP</span> <span class=\"hljs-variable constant_\">BY</span> customer_id<br><span class=\"hljs-variable constant_\">HAVING</span> <span class=\"hljs-title function_\">COUNT</span>(order_id) &gt; <span class=\"hljs-number\">1</span>;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- 使用 <span class=\"hljs-variable constant_\">HAVING</span> 子句查询订单总金额超过 <span class=\"hljs-number\">100</span> 的客户<br><span class=\"hljs-variable constant_\">SELECT</span> customer_id, <span class=\"hljs-title function_\">SUM</span>(amount) <span class=\"hljs-variable constant_\">AS</span> total_amount<br><span class=\"hljs-variable constant_\">FROM</span> orders<br><span class=\"hljs-variable constant_\">GROUP</span> <span class=\"hljs-variable constant_\">BY</span> customer_id<br><span class=\"hljs-variable constant_\">HAVING</span> <span class=\"hljs-title function_\">SUM</span>(amount) &gt; <span class=\"hljs-number\">100</span>;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"关联查询\"><a href=\"#关联查询\" class=\"headerlink\" title=\"关联查询\"></a>关联查询</h2><h4 id=\"CROSS-JOIN\"><a href=\"#CROSS-JOIN\" class=\"headerlink\" title=\"CROSS JOIN\"></a>CROSS JOIN</h4><p>是一种简单的关联查询，不需要任何条件来匹配行，它直接将左表的 每一行 与右表的 每一行 进行组合，返回的结果是两个表的笛卡尔积。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable constant_\">SELECT</span> e.<span class=\"hljs-property\">emp_name</span>, e.<span class=\"hljs-property\">salary</span>, e.<span class=\"hljs-property\">department</span>, d.<span class=\"hljs-property\">manager</span><br><span class=\"hljs-variable constant_\">FROM</span> employees e<br><span class=\"hljs-variable constant_\">CROSS</span> <span class=\"hljs-variable constant_\">JOIN</span> departments d;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"INNER-JOIN\"><a href=\"#INNER-JOIN\" class=\"headerlink\" title=\"INNER JOIN\"></a>INNER JOIN</h4><p>只返回两个表中满足关联条件的交集部分，即在两个表中都存在的匹配行。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable constant_\">SELECT</span> e.<span class=\"hljs-property\">emp_name</span>, e.<span class=\"hljs-property\">salary</span>, e.<span class=\"hljs-property\">department</span>, d.<span class=\"hljs-property\">manager</span><br><span class=\"hljs-variable constant_\">FROM</span> employees e<br><span class=\"hljs-variable constant_\">JOIN</span> departments d <span class=\"hljs-variable constant_\">ON</span> e.<span class=\"hljs-property\">department</span> = d.<span class=\"hljs-property\">department</span>;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"OUTER-JOIN\"><a href=\"#OUTER-JOIN\" class=\"headerlink\" title=\"OUTER JOIN\"></a>OUTER JOIN</h4><p>根据指定的关联条件，将两个表中满足条件的行组合在一起，并包含没有匹配的行 。<br>包括 LEFT OUTER JOIN 和 RIGHT OUTER JOIN 两种类型，分别表示查询左表和右表的所有行（即使没有被匹配），再加上满足条件的交集部分。有些数据库并不支持 RIGHT JOIN 语法，只需要把主表（from 后面的表）和关联表（LEFT JOIN 后面的表）顺序进行调换即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable constant_\">SELECT</span> e.<span class=\"hljs-property\">emp_name</span>, e.<span class=\"hljs-property\">salary</span>, e.<span class=\"hljs-property\">department</span>, d.<span class=\"hljs-property\">manager</span><br><span class=\"hljs-variable constant_\">FROM</span> employees e<br><span class=\"hljs-variable constant_\">LEFT</span> <span class=\"hljs-variable constant_\">JOIN</span> departments d <span class=\"hljs-variable constant_\">ON</span> e.<span class=\"hljs-property\">department</span> = d.<span class=\"hljs-property\">department</span>;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"子查询\"><a href=\"#子查询\" class=\"headerlink\" title=\"子查询\"></a>子查询</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- 查询出订单总金额 &gt; <span class=\"hljs-number\">200</span> 的客户的姓名和他们的订单总金额<br>-- 主查询<br><span class=\"hljs-variable constant_\">SELECT</span> name, total_amount<br><span class=\"hljs-variable constant_\">FROM</span> customers<br><span class=\"hljs-variable constant_\">WHERE</span> customer_id <span class=\"hljs-variable constant_\">IN</span> (<br>    -- 子查询<br>    <span class=\"hljs-variable constant_\">SELECT</span> <span class=\"hljs-variable constant_\">DISTINCT</span> customer_id<br>    <span class=\"hljs-variable constant_\">FROM</span> orders<br>    <span class=\"hljs-variable constant_\">WHERE</span> total_amount &gt; <span class=\"hljs-number\">200</span><br>);<br></code></pre></td></tr></table></figure>\n\n<p><strong>exists</strong><br>用于检查主查询的结果集是否存在满足条件的记录，它返回布尔值（True 或 False），而不返回实际的数据。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- 主查询<br><span class=\"hljs-variable constant_\">SELECT</span> name, total_amount<br><span class=\"hljs-variable constant_\">FROM</span> customers<br><span class=\"hljs-variable constant_\">WHERE</span> <span class=\"hljs-variable constant_\">EXISTS</span> (<br>    -- 子查询<br>    <span class=\"hljs-variable constant_\">SELECT</span> <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-variable constant_\">FROM</span> orders<br>    <span class=\"hljs-variable constant_\">WHERE</span> orders.<span class=\"hljs-property\">customer_id</span> = customers.<span class=\"hljs-property\">customer_id</span><br>);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"组合查询\"><a href=\"#组合查询\" class=\"headerlink\" title=\"组合查询\"></a>组合查询</h4><ul>\n<li><strong>UNION</strong> 操作：将两个或多个查询的结果集合并， 并去除重复的行 。即如果两个查询的结果有相同的行，则只保留一行。</li>\n<li><strong>UNION ALL</strong> 操作：将两个或多个查询的结果集合并， 但不去除重复的行 。即如果两个查询的结果有相同的行，则全部保留。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable constant_\">SELECT</span> name, age, department<br><span class=\"hljs-variable constant_\">FROM</span> table1<br><span class=\"hljs-variable constant_\">UNION</span><br><span class=\"hljs-variable constant_\">SELECT</span> name, age, department<br><span class=\"hljs-variable constant_\">FROM</span> table2;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"开窗函数\"><a href=\"#开窗函数\" class=\"headerlink\" title=\"开窗函数\"></a>开窗函数</h2><h4 id=\"sum-over\"><a href=\"#sum-over\" class=\"headerlink\" title=\"sum over\"></a>sum over</h4><p>SUM(计算字段名) OVER (PARTITION BY 分组字段名)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable constant_\">SELECT</span> <br>    order_id, <br>    customer_id, <br>    order_date, <br>    total_amount,<br>    <span class=\"hljs-title function_\">SUM</span>(total_amount) <span class=\"hljs-variable constant_\">OVER</span> (<span class=\"hljs-variable constant_\">PARTITION</span> <span class=\"hljs-variable constant_\">BY</span> customer_id) <span class=\"hljs-variable constant_\">AS</span> customer_total_amount<br><span class=\"hljs-variable constant_\">FROM</span><br>    orders;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"sum-over-order-by\"><a href=\"#sum-over-order-by\" class=\"headerlink\" title=\"sum over order by\"></a>sum over order by</h4><p>SUM(计算字段名) OVER (PARTITION BY 分组字段名 ORDER BY 排序字段 排序规则)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">-- 计算每个客户的历史订单累计金额，并显示每个订单的详细信息<br><br><span class=\"hljs-variable constant_\">SELECT</span> <br>    order_id, <br>    customer_id, <br>    order_date, <br>    total_amount,<br>    <span class=\"hljs-title function_\">SUM</span>(total_amount) <span class=\"hljs-variable constant_\">OVER</span> (<span class=\"hljs-variable constant_\">PARTITION</span> <span class=\"hljs-variable constant_\">BY</span> customer_id <span class=\"hljs-variable constant_\">ORDER</span> <span class=\"hljs-variable constant_\">BY</span> order_date <span class=\"hljs-variable constant_\">ASC</span>) <span class=\"hljs-variable constant_\">AS</span> cumulative_total_amount<br><span class=\"hljs-variable constant_\">FROM</span><br>    orders;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"rank\"><a href=\"#rank\" class=\"headerlink\" title=\"rank\"></a>rank</h4><p>用于对查询结果集中的行进行 排名 的开窗函数。可以根据指定的列或表达式对结果集中的行进行排序，并为每一行分配一个排名。<br>在排名过程中，相同的值将被赋予相同的排名，而不同的值将被赋予不同的排名。<br>常见用法是在查询结果中查找前几名（Top N）或排名最高的行。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">RANK</span>() <span class=\"hljs-variable constant_\">OVER</span> (<br>  <span class=\"hljs-variable constant_\">PARTITION</span> <span class=\"hljs-variable constant_\">BY</span> 列名<span class=\"hljs-number\">1</span>, 列名<span class=\"hljs-number\">2</span>, ... -- 可选，用于指定分组列<br>  <span class=\"hljs-variable constant_\">ORDER</span> <span class=\"hljs-variable constant_\">BY</span> 列名<span class=\"hljs-number\">3</span> [<span class=\"hljs-variable constant_\">ASC</span>|<span class=\"hljs-variable constant_\">DESC</span>], 列名<span class=\"hljs-number\">4</span> [<span class=\"hljs-variable constant_\">ASC</span>|<span class=\"hljs-variable constant_\">DESC</span>], ... -- 用于指定排序列及排序方式<br>) <span class=\"hljs-variable constant_\">AS</span> rank_column<br><span class=\"hljs-variable constant_\">PARTITION</span> <span class=\"hljs-variable constant_\">BY</span> 子句可选，用于指定分组列，将结果集按照指定列进行分组；<br><span class=\"hljs-variable constant_\">ORDER</span> <span class=\"hljs-variable constant_\">BY</span> 子句用于指定排序列及排序方式，决定了计算 <span class=\"hljs-title class_\">Rank</span> 时的排序规则。<br><span class=\"hljs-variable constant_\">AS</span> rank_column 用于指定生成的 <span class=\"hljs-title class_\">Rank</span> 排名列的别名。<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable constant_\">SELECT</span> <br>    order_id, <br>    customer_id, <br>    order_date, <br>    total_amount,<br>    <span class=\"hljs-title function_\">RANK</span>() <span class=\"hljs-variable constant_\">OVER</span> (<span class=\"hljs-variable constant_\">PARTITION</span> <span class=\"hljs-variable constant_\">BY</span> customer_id <span class=\"hljs-variable constant_\">ORDER</span> <span class=\"hljs-variable constant_\">BY</span> total_amount <span class=\"hljs-variable constant_\">DESC</span>) <span class=\"hljs-variable constant_\">AS</span> customer_rank<br><span class=\"hljs-variable constant_\">FROM</span><br>    orders;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"row-number\"><a href=\"#row-number\" class=\"headerlink\" title=\"row_number\"></a>row_number</h4><p>用于为查询结果集中的每一行分配唯一连续排名。<br>Row_Number函数为每一行都分配一个唯一的整数值，不管是否存在并列（相同排序值）的情况。<br>每一行都有一个唯一的行号，从 1 开始连续递增。</p>\n<p>Row_Number 开窗函数的语法如下（几乎和 Rank 函数一模一样）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">ROW_NUMBER</span>() <span class=\"hljs-variable constant_\">OVER</span> (<br>  <span class=\"hljs-variable constant_\">PARTITION</span> <span class=\"hljs-variable constant_\">BY</span> column1, column2, ... -- 可选，用于指定分组列<br>  <span class=\"hljs-variable constant_\">ORDER</span> <span class=\"hljs-variable constant_\">BY</span> column3 [<span class=\"hljs-variable constant_\">ASC</span>|<span class=\"hljs-variable constant_\">DESC</span>], column4 [<span class=\"hljs-variable constant_\">ASC</span>|<span class=\"hljs-variable constant_\">DESC</span>], ... -- 用于指定排序列及排序方式<br>) <span class=\"hljs-variable constant_\">AS</span> row_number_column<br><span class=\"hljs-variable constant_\">PARTITION</span> <span class=\"hljs-variable constant_\">BY</span>子句可选，用于指定分组列，将结果集按照指定列进行分组。<span class=\"hljs-variable constant_\">ORDER</span> <span class=\"hljs-variable constant_\">BY</span> 子句用于指定排序列及排序方式，决定了计算 <span class=\"hljs-title class_\">Row</span>_Number 时的排序规则。<span class=\"hljs-variable constant_\">AS</span> row_number_column 用于指定生成的行号列的别名。<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable constant_\">SELECT</span> <br>    order_id, <br>    customer_id, <br>    order_date, <br>    total_amount,<br>    <span class=\"hljs-title function_\">ROW_NUMBER</span>() <span class=\"hljs-variable constant_\">OVER</span> (<span class=\"hljs-variable constant_\">PARTITION</span> <span class=\"hljs-variable constant_\">BY</span> customer_id <span class=\"hljs-variable constant_\">ORDER</span> <span class=\"hljs-variable constant_\">BY</span> total_amount <span class=\"hljs-variable constant_\">DESC</span>) <span class=\"hljs-variable constant_\">AS</span> row_number<br><span class=\"hljs-variable constant_\">FROM</span><br>    orders;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"lag-lead\"><a href=\"#lag-lead\" class=\"headerlink\" title=\"lag &#x2F; lead\"></a>lag &#x2F; lead</h4><p>在需要比较相邻行数据或进行时间序列分析时非常有用。</p>\n<ul>\n<li><p>Lag 函数用于获取当前行之前的某一列的值。Lag 函数的语法如下：<br>LAG(column_name, offset, default_value) OVER (PARTITION BY partition_column ORDER BY sort_column)<br>参数解释：<br>column_name：要获取值的列名。<br>offset：表示要向上偏移的行数。例如，offset为1表示获取上一行的值，offset为2表示获取上两行的值，以此类推。<br>default_value：可选参数，用于指定当没有前一行时的默认值。<br>PARTITION BY和ORDER BY子句可选，用于分组和排序数据。</p>\n</li>\n<li><p>Lead 函数用于获取 当前行之后 的某一列的值。Lead 函数的语法如下：<br>LEAD(column_name, offset, default_value) OVER (PARTITION BY partition_column ORDER BY sort_column)<br>参数解释：<br>column_name：要获取值的列名。<br>offset：表示要向下偏移的行数。例如，offset为1表示获取下一行的值，offset为2表示获取下两行的值，以此类推。<br>default_value：可选参数，用于指定当没有后一行时的默认值。<br>PARTITION BY和ORDER BY子句可选，用于分组和排序数据。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable constant_\">SELECT</span> <br>    student_id,<br>    exam_date,<br>    score,<br>    <span class=\"hljs-title function_\">LAG</span>(score, <span class=\"hljs-number\">1</span>, <span class=\"hljs-variable constant_\">NULL</span>) <span class=\"hljs-variable constant_\">OVER</span> (<span class=\"hljs-variable constant_\">PARTITION</span> <span class=\"hljs-variable constant_\">BY</span> student_id <span class=\"hljs-variable constant_\">ORDER</span> <span class=\"hljs-variable constant_\">BY</span> exam_date) <span class=\"hljs-variable constant_\">AS</span> previous_score,<br>    <span class=\"hljs-title function_\">LEAD</span>(score, <span class=\"hljs-number\">1</span>, <span class=\"hljs-variable constant_\">NULL</span>) <span class=\"hljs-variable constant_\">OVER</span> (<span class=\"hljs-variable constant_\">PARTITION</span> <span class=\"hljs-variable constant_\">BY</span> student_id <span class=\"hljs-variable constant_\">ORDER</span> <span class=\"hljs-variable constant_\">BY</span> exam_date) <span class=\"hljs-variable constant_\">AS</span> next_score<br><span class=\"hljs-variable constant_\">FROM</span><br>    scores;<br></code></pre></td></tr></table></figure>\n\n<p>整理自网站SQL之母<a href=\"http://sqlmother.yupi.icu/#/learn%EF%BC%88%E5%AD%A6%E4%B9%A0%E8%BF%87%EF%BC%8C%E4%BD%86%E8%AE%B0%E4%B8%8D%E4%BD%8F%EF%BC%8C%E5%8D%95%E7%8B%AC%E6%9F%A5%E7%9C%8B%E5%A4%AA%E9%BA%BB%E7%83%A6%EF%BC%8C%E6%89%80%E4%BB%A5%E6%95%B4%E7%90%86%E7%BB%99%E8%87%AA%E5%B7%B1%E7%9C%8B%EF%BC%89\">http://sqlmother.yupi.icu/#/learn（学习过，但记不住，单独查看太麻烦，所以整理给自己看）</a></p>\n"},{"title":"OS Expe 02 线程的同步","author":null,"date":"2020-04-21T13:42:31.000Z","_content":"## 实验二:线程的同步\n\n### 一、实验目的\n\n1）进一步掌握windows系统环境下线程的创建和撤销\n2）熟悉windows系统提供的线程同步API（是WINDOWS提供给应用程序与操作系统的接口）\n3）使用windows系统提供的线程同步API解决实际问题\n\n### 二、实验准备\n\n##### 1. 进程同步机制的主要任务：\n\n对多个相关进程在执行次序上进行协调，使并发执行的诸进程之间能够按照一定的规则（或时序）共享系统资源，并能很好地相互合作，从而使程序执行具有可再现性。\n\n##### 2. 线程和进程的发展历程\n\n```js \n在20世纪60年代中期，人们在设计多道程序OS时，引入了进程的概念，从而解决了在单处理机环境下的程序并发执行问题。此后在长达20年的时间里，在多道程序OS中一直以进程作为能拥有资源和独立调度的（运行）的基本单位。\n\n直到80年代中期，人们又提出了比进程更小的基本单位 线程 的概念，试图用它来提高程序并发执行的程度，以进一步改善系统的服务质量。特别是在进入20世纪90年代后，多处理机系统得到迅速发展，由于线程能更好的提高程序的并发执行程度，因而近几年推出的多处理机OS无一例外地都引入了进程，用以改善OS的性能。\n```\n\n由于**线程具有许多传统进程所具有的特征**，所以又称之为轻型进程或进程元，相应的，把传统进程称之为重型进程。传统进程相当于只有一个线程的任务，\n\n##### 3. 等待对象函数\n\n等待一个对象 等待多个对象 WaitForSingleObject() WaitForMultipleObjects() 在指定时间内等待一个对象 在指定时间内等待多个对象\n\n**原型：**\n\n```js \nDWORD WaitForSingleObject(\n\tHANDLE hHandle,\t//对象句柄\n\tDWORD dwMilliseconds //等待时间，以毫秒为单位\n);\n```\n\n**原型：**\n\n```js \nDWORD WaitForMultipleObjects(\n\tDWORD nCount,\t\t\t\t//句柄数组中的句柄数\n\tconst HANDLE *lpHandles,\t//指向对象句柄数组的指针\n\tBOOL fWaitAll\t\t\t\t//等待类型 1/true表示等待所有的任务完成后进行下一个操作，0/flase 只等待任何一个的完成\n\tDWORD dwMilliseconds \t\t//等待时间，以毫秒为单位\n);\n```\n\n**可等待的对象列表**\n\n* Change notification：变化通知\n* Console input：控制台输入\n* Events：事件\n* Job：作业\n* Mutex：互斥信号量\n* Process：进程\n* **Semaphore：计数信号量** （*本次主要用到）*\n* **Thread：线程** *（本次主要用到）*\n* Wait-able timer：定时器\n\n#### 如何去等待一个对象\n\n1. 我们需要立一个Flag，用于在主子线程之间相互告知运行状态。\n1. Flag = 信号量\n1. 创建一个信号量\n```js \nhHandle1 = CreateSemaphore(NULL, 0，1, \"SemaphoreName1\");//创建一个信号量（安全标识符，信号量初始态，信号量最大值，信号量名称）\n```\n\n1. 打开一个信号量\n```js \nhHandle1 = OpenSemaphore( SYNCHRONIZE ISEMAPHORE_ MODIFY_ STATE, NULL,\"SemaphoreName1\" );//（访问标志，继承标志，信号量名）\n```\n\n1. 释放信号量\n```js \nrc = ReleaseSemaphore (hHandle1, 1, NULL)（我们需要释放哪一个信号量，对信号量进行增几的操作，信号量要增加数值地址）;\n```\n\n1. 等待单个对象\n```js \ndRes = WaitForSingleObject(hHandle1 , INFINITE); // 主线程无限期地等待子线程结束（信号量的句柄，如果没有释放无限运行）  如果对操作时长有限制，可在第二个参数设置等待的最大值\n```\n\n1. 等待多个对象\n```js \ndRes = WaitForMultiple0bjects(3, hHandles, 1, INFINITE); //第三个参数为1或true时，等待数组中所有对象完成，为0或者false时满足一个任务结束就可继续执行\n```\n\n### 三、实验内容\n\n**实验一 线程的同步之等待单个对象**\n子线程 主线程 用于制作麻辣香锅，制作用时5秒 等待子线程执行完毕，打印“麻辣香锅上菜完毕，请开动吧！”\n\n**实验二 线程的同步之等待多个对象**\n\n子线程1 子线程2 子线程3 主线程 用于制作麻辣香锅，制作用时5秒 用于制作什锦菇，制作用时3秒 用于制作米饭，制作用时6秒 等待多个子线程执行完毕，打印”所有菜品上菜完毕，请开动吧！“\n\n#### 实验要求\n\n能正确使用等待对象、WaitForSingleObject（）或WaitForMultipleObject（)及信号量对象CreateSemaphore（）、OpenSemaphore（）、ReleaseSemaphore（）等系统调用，进一步理解线程的同步。\n\n#### 实验指导\n\n1.在Microsoft visual C++6.0环境下建立一个MFC支持的控制台文件，编写C程序。\n2.在程序中使用CreateSemaphore（NULL，0，1，”SemaphoreName1”）创建一个名为“SemaphoreName1”的信号量，信号量的初始值为0。\n之后使用\n```js \nOpenSemaphore（SYNCHRONIZE|SEMAPHORE_MODIFY_STARTE,NULL, ”SemaphoreName1）\n```\n\n打开该信号量，这里访问标志使用“SYNCHRONIZE|SEMAPHORE_MODIFY_STARTE”，\n以便之后可以使用WaitForSingleObject（）等待该信号量及使用ReleaseSemaphore（）释放该信号量，然后创建一个子线程。\n\n3.主线程创建子线程后调用WaitForSingleObject（hHandle1，INFINITE），这里等待时间设置为INFINITE表示一直等待下去，直到该信号量被唤醒为止。\n\n4.子线程结束，调用ReleaseSemaphore（hHandle1，1，NULL）释放信号量，使信号量的值加1。\n\n#### 源程序\n\n**实验一主要内容及代码**\n\n* 创建一个信号量并打开，创建一个线程，主线程等待子线程结束，释放信号量。\n```js \nstatic HANDLE hHandle1 = NULL;\n\nvoid chef()\n{\n    \n\tprintf(\"麻辣香锅开始制作，预计等待时间5秒。\\n\");\n\tSleep(5000);\n\tprintf(\"麻辣香锅制作完成！\\n\");\n\n\tBOOL rc;\n\tDWORD err;\n\n\trc = ReleaseSemaphore(hHandle1,1,NULL);\n\terr = GetLastError();\n\t\n\tprintf(\"ReleaseSemaphore err=%d\\n\",err);\n\tif(rc == 0){\n    \t\n\t\tprintf(\"Semaphore Release Fail!\\n\");\n\t}else{\n    \t\n\t\tprintf(\"Semaphore Release Success! rc=%d\\n\",rc);\t\n\t}\n}\n\n\nint _tmain(int argc, TCHAR* argv[], TCHAR* envp[])\n{\n    \n\n\tint nRetCode = 0;\n\n\tDWORD dRes,err;\n\n\thHandle1 = CreateSemaphore(NULL,0,1,\"SemaphoreName1\");//创建一个信号量\n\tif(hHandle1 == NULL){\n    \n\t\tprintf(\"Semaphore Create Fail!\\n\");\n\t}else{\n    \n\t\tprintf(\"Semaphore Create Success!\\n\");\n\t}\n\t\n\thHandle1 = OpenSemaphore(SYNCHRONIZE|SEMAPHORE_MODIFY_STATE,\n\t\tNULL,\n\t\t\"SemaphoreName1\");\n\tif(hHandle1 == NULL){\n    \n\t\tprintf(\"Semaphor Open Fail!\\n\");\n\t}\n\telse{\n    \n\t\tprintf(\"Semaphor Open Success!\\n\");\n\t}\n\n\tHANDLE handle1 = NULL;\n\tDWORD ThreadID1 = NULL;\n\n\thandle1 = CreateThread((LPSECURITY_ATTRIBUTES) NULL,\n\t\t\t\t0,\n\t\t\t\t(LPTHREAD_START_ROUTINE) chef,\n\t\t\t\t(LPVOID) NULL,\n\t\t\t\t0,\n\t\t\t\t&ThreadID1);\n\n\tdRes = WaitForSingleObject(hHandle1,INFINITE);\n\n\terr = GetLastError();\n\n\tif(err == 0){\n    \n\t\tprintf(\"麻辣香锅上菜完毕，请开动吧。\\n\");\n\t}\n\telse{\n    \n\t\tprintf(\"WaitForSingleObject err = %d\\n\",err);\n\t}\n\n\treturn nRetCode;\n}\n```\n\n**效果图**\n![在这里插入图片描述](https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151953256.png)\n\n**实验二主要内容及代码**\n\n* 创建三个线程，当三个线程都执行完毕时，执行主线程\n```js \nvoid chef(int meal_code)\n{\n    \n\n\tif(meal_code == 0){\n    \n\t\tSleep(5000);\n\t\tprintf(\"麻辣香锅制作完成！\\n\");\n\t}\n\telse if(meal_code == 1){\n    \n\t\tSleep(3000);\n\t\tprintf(\"什锦菇制作完成！\\n\");\n\t}\n\telse if(meal_code == 2){\n    \n\t\tSleep(6000);\n\t\tprintf(\"米饭制作完成！\\n\");\n\t}\n\t\n}\n\n\nint _tmain(int argc, TCHAR* argv[], TCHAR* envp[])\n{\n    \n\n\tint nRetCode = 0;\n\n\tDWORD dRes,err;\n\n\tHANDLE handle1 = NULL;\n\tHANDLE handle2 = NULL;\n\tHANDLE handle3 = NULL;\n\n\tDWORD ThreadID1 = NULL;\n\tDWORD ThreadID2 = NULL;\n\tDWORD ThreadID3 = NULL;\n\n\tint a = 0;\n\tint b = 1;\n\tint c = 2;\n\n\thandle1 = CreateThread((LPSECURITY_ATTRIBUTES) NULL,\n\t\t\t\t0,\n\t\t\t\t(LPTHREAD_START_ROUTINE) chef,\n\t\t\t\t(LPVOID) a,\n\t\t\t\t0,\n\t\t\t\t&ThreadID1);\n\n\thandle2 = CreateThread((LPSECURITY_ATTRIBUTES) NULL,\n\t\t\t\t0,\n\t\t\t\t(LPTHREAD_START_ROUTINE) chef,\n\t\t\t\t(LPVOID) b,\n\t\t\t\t0,\n\t\t\t\t&ThreadID2);\n\n\thandle3 = CreateThread((LPSECURITY_ATTRIBUTES) NULL,\n\t\t\t\t0,\n\t\t\t\t(LPTHREAD_START_ROUTINE) chef,\n\t\t\t\t(LPVOID) c,\n\t\t\t\t0,\n\t\t\t\t&ThreadID3);\n\n\tHANDLE hHandles[3];\n\thHandles[0] = handle1;\n\thHandles[1] = handle2;\n\thHandles[2] = handle3;\n\n\tdRes = WaitForMultipleObjects(3,hHandles,0,INFINITE);\n\n\terr = GetLastError();\n\n\tif(err == 0){\n    \n\t\tprintf(\"所有菜品上菜完毕，请开动吧。\\n\");\n\t}\n\telse{\n    \n\t\tprintf(\"WaitForSingleObject err = %d\\n\",err);\n\t}\n\n\treturn nRetCode;\n}\n```\n\n**效果图**\n![在这里插入图片描述](https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151953257.png)\n但是当我们的选择等待的对象为任意一个，即第三个参数为0时\n\n```js \ndRes = WaitForMultipleObjects(3,hHandles,0,INFINITE);\n```\n\n**效果图为：**\n![在这里插入图片描述](https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151953258.png)\n\n### 四、实验总结\n\n实验完成了主、子线程的同步，主线程创建子线程后，主线程塞，让子线程先执行，等子线程执行完后，由子线程唤醒主线程。是使我们了解如何使用使用等待对象WaitForSingleObject（）或WaitForMultipleObjects（)及信号量对象CreateSemaphore（）、OpenSemaphore（）、ReleaseSemaphore（）等系统调用，进一步理解线程的同步。","source":"_posts/OS Expe 02 线程的同步.md","raw":"---\ntitle: OS Expe 02 线程的同步\nauthor: \ntags: \n       - c++\n\ncategory: \n       - 其它\n\ndate: 2020-04-21 21:42:31\n---\n## 实验二:线程的同步\n\n### 一、实验目的\n\n1）进一步掌握windows系统环境下线程的创建和撤销\n2）熟悉windows系统提供的线程同步API（是WINDOWS提供给应用程序与操作系统的接口）\n3）使用windows系统提供的线程同步API解决实际问题\n\n### 二、实验准备\n\n##### 1. 进程同步机制的主要任务：\n\n对多个相关进程在执行次序上进行协调，使并发执行的诸进程之间能够按照一定的规则（或时序）共享系统资源，并能很好地相互合作，从而使程序执行具有可再现性。\n\n##### 2. 线程和进程的发展历程\n\n```js \n在20世纪60年代中期，人们在设计多道程序OS时，引入了进程的概念，从而解决了在单处理机环境下的程序并发执行问题。此后在长达20年的时间里，在多道程序OS中一直以进程作为能拥有资源和独立调度的（运行）的基本单位。\n\n直到80年代中期，人们又提出了比进程更小的基本单位 线程 的概念，试图用它来提高程序并发执行的程度，以进一步改善系统的服务质量。特别是在进入20世纪90年代后，多处理机系统得到迅速发展，由于线程能更好的提高程序的并发执行程度，因而近几年推出的多处理机OS无一例外地都引入了进程，用以改善OS的性能。\n```\n\n由于**线程具有许多传统进程所具有的特征**，所以又称之为轻型进程或进程元，相应的，把传统进程称之为重型进程。传统进程相当于只有一个线程的任务，\n\n##### 3. 等待对象函数\n\n等待一个对象 等待多个对象 WaitForSingleObject() WaitForMultipleObjects() 在指定时间内等待一个对象 在指定时间内等待多个对象\n\n**原型：**\n\n```js \nDWORD WaitForSingleObject(\n\tHANDLE hHandle,\t//对象句柄\n\tDWORD dwMilliseconds //等待时间，以毫秒为单位\n);\n```\n\n**原型：**\n\n```js \nDWORD WaitForMultipleObjects(\n\tDWORD nCount,\t\t\t\t//句柄数组中的句柄数\n\tconst HANDLE *lpHandles,\t//指向对象句柄数组的指针\n\tBOOL fWaitAll\t\t\t\t//等待类型 1/true表示等待所有的任务完成后进行下一个操作，0/flase 只等待任何一个的完成\n\tDWORD dwMilliseconds \t\t//等待时间，以毫秒为单位\n);\n```\n\n**可等待的对象列表**\n\n* Change notification：变化通知\n* Console input：控制台输入\n* Events：事件\n* Job：作业\n* Mutex：互斥信号量\n* Process：进程\n* **Semaphore：计数信号量** （*本次主要用到）*\n* **Thread：线程** *（本次主要用到）*\n* Wait-able timer：定时器\n\n#### 如何去等待一个对象\n\n1. 我们需要立一个Flag，用于在主子线程之间相互告知运行状态。\n1. Flag = 信号量\n1. 创建一个信号量\n```js \nhHandle1 = CreateSemaphore(NULL, 0，1, \"SemaphoreName1\");//创建一个信号量（安全标识符，信号量初始态，信号量最大值，信号量名称）\n```\n\n1. 打开一个信号量\n```js \nhHandle1 = OpenSemaphore( SYNCHRONIZE ISEMAPHORE_ MODIFY_ STATE, NULL,\"SemaphoreName1\" );//（访问标志，继承标志，信号量名）\n```\n\n1. 释放信号量\n```js \nrc = ReleaseSemaphore (hHandle1, 1, NULL)（我们需要释放哪一个信号量，对信号量进行增几的操作，信号量要增加数值地址）;\n```\n\n1. 等待单个对象\n```js \ndRes = WaitForSingleObject(hHandle1 , INFINITE); // 主线程无限期地等待子线程结束（信号量的句柄，如果没有释放无限运行）  如果对操作时长有限制，可在第二个参数设置等待的最大值\n```\n\n1. 等待多个对象\n```js \ndRes = WaitForMultiple0bjects(3, hHandles, 1, INFINITE); //第三个参数为1或true时，等待数组中所有对象完成，为0或者false时满足一个任务结束就可继续执行\n```\n\n### 三、实验内容\n\n**实验一 线程的同步之等待单个对象**\n子线程 主线程 用于制作麻辣香锅，制作用时5秒 等待子线程执行完毕，打印“麻辣香锅上菜完毕，请开动吧！”\n\n**实验二 线程的同步之等待多个对象**\n\n子线程1 子线程2 子线程3 主线程 用于制作麻辣香锅，制作用时5秒 用于制作什锦菇，制作用时3秒 用于制作米饭，制作用时6秒 等待多个子线程执行完毕，打印”所有菜品上菜完毕，请开动吧！“\n\n#### 实验要求\n\n能正确使用等待对象、WaitForSingleObject（）或WaitForMultipleObject（)及信号量对象CreateSemaphore（）、OpenSemaphore（）、ReleaseSemaphore（）等系统调用，进一步理解线程的同步。\n\n#### 实验指导\n\n1.在Microsoft visual C++6.0环境下建立一个MFC支持的控制台文件，编写C程序。\n2.在程序中使用CreateSemaphore（NULL，0，1，”SemaphoreName1”）创建一个名为“SemaphoreName1”的信号量，信号量的初始值为0。\n之后使用\n```js \nOpenSemaphore（SYNCHRONIZE|SEMAPHORE_MODIFY_STARTE,NULL, ”SemaphoreName1）\n```\n\n打开该信号量，这里访问标志使用“SYNCHRONIZE|SEMAPHORE_MODIFY_STARTE”，\n以便之后可以使用WaitForSingleObject（）等待该信号量及使用ReleaseSemaphore（）释放该信号量，然后创建一个子线程。\n\n3.主线程创建子线程后调用WaitForSingleObject（hHandle1，INFINITE），这里等待时间设置为INFINITE表示一直等待下去，直到该信号量被唤醒为止。\n\n4.子线程结束，调用ReleaseSemaphore（hHandle1，1，NULL）释放信号量，使信号量的值加1。\n\n#### 源程序\n\n**实验一主要内容及代码**\n\n* 创建一个信号量并打开，创建一个线程，主线程等待子线程结束，释放信号量。\n```js \nstatic HANDLE hHandle1 = NULL;\n\nvoid chef()\n{\n    \n\tprintf(\"麻辣香锅开始制作，预计等待时间5秒。\\n\");\n\tSleep(5000);\n\tprintf(\"麻辣香锅制作完成！\\n\");\n\n\tBOOL rc;\n\tDWORD err;\n\n\trc = ReleaseSemaphore(hHandle1,1,NULL);\n\terr = GetLastError();\n\t\n\tprintf(\"ReleaseSemaphore err=%d\\n\",err);\n\tif(rc == 0){\n    \t\n\t\tprintf(\"Semaphore Release Fail!\\n\");\n\t}else{\n    \t\n\t\tprintf(\"Semaphore Release Success! rc=%d\\n\",rc);\t\n\t}\n}\n\n\nint _tmain(int argc, TCHAR* argv[], TCHAR* envp[])\n{\n    \n\n\tint nRetCode = 0;\n\n\tDWORD dRes,err;\n\n\thHandle1 = CreateSemaphore(NULL,0,1,\"SemaphoreName1\");//创建一个信号量\n\tif(hHandle1 == NULL){\n    \n\t\tprintf(\"Semaphore Create Fail!\\n\");\n\t}else{\n    \n\t\tprintf(\"Semaphore Create Success!\\n\");\n\t}\n\t\n\thHandle1 = OpenSemaphore(SYNCHRONIZE|SEMAPHORE_MODIFY_STATE,\n\t\tNULL,\n\t\t\"SemaphoreName1\");\n\tif(hHandle1 == NULL){\n    \n\t\tprintf(\"Semaphor Open Fail!\\n\");\n\t}\n\telse{\n    \n\t\tprintf(\"Semaphor Open Success!\\n\");\n\t}\n\n\tHANDLE handle1 = NULL;\n\tDWORD ThreadID1 = NULL;\n\n\thandle1 = CreateThread((LPSECURITY_ATTRIBUTES) NULL,\n\t\t\t\t0,\n\t\t\t\t(LPTHREAD_START_ROUTINE) chef,\n\t\t\t\t(LPVOID) NULL,\n\t\t\t\t0,\n\t\t\t\t&ThreadID1);\n\n\tdRes = WaitForSingleObject(hHandle1,INFINITE);\n\n\terr = GetLastError();\n\n\tif(err == 0){\n    \n\t\tprintf(\"麻辣香锅上菜完毕，请开动吧。\\n\");\n\t}\n\telse{\n    \n\t\tprintf(\"WaitForSingleObject err = %d\\n\",err);\n\t}\n\n\treturn nRetCode;\n}\n```\n\n**效果图**\n![在这里插入图片描述](https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151953256.png)\n\n**实验二主要内容及代码**\n\n* 创建三个线程，当三个线程都执行完毕时，执行主线程\n```js \nvoid chef(int meal_code)\n{\n    \n\n\tif(meal_code == 0){\n    \n\t\tSleep(5000);\n\t\tprintf(\"麻辣香锅制作完成！\\n\");\n\t}\n\telse if(meal_code == 1){\n    \n\t\tSleep(3000);\n\t\tprintf(\"什锦菇制作完成！\\n\");\n\t}\n\telse if(meal_code == 2){\n    \n\t\tSleep(6000);\n\t\tprintf(\"米饭制作完成！\\n\");\n\t}\n\t\n}\n\n\nint _tmain(int argc, TCHAR* argv[], TCHAR* envp[])\n{\n    \n\n\tint nRetCode = 0;\n\n\tDWORD dRes,err;\n\n\tHANDLE handle1 = NULL;\n\tHANDLE handle2 = NULL;\n\tHANDLE handle3 = NULL;\n\n\tDWORD ThreadID1 = NULL;\n\tDWORD ThreadID2 = NULL;\n\tDWORD ThreadID3 = NULL;\n\n\tint a = 0;\n\tint b = 1;\n\tint c = 2;\n\n\thandle1 = CreateThread((LPSECURITY_ATTRIBUTES) NULL,\n\t\t\t\t0,\n\t\t\t\t(LPTHREAD_START_ROUTINE) chef,\n\t\t\t\t(LPVOID) a,\n\t\t\t\t0,\n\t\t\t\t&ThreadID1);\n\n\thandle2 = CreateThread((LPSECURITY_ATTRIBUTES) NULL,\n\t\t\t\t0,\n\t\t\t\t(LPTHREAD_START_ROUTINE) chef,\n\t\t\t\t(LPVOID) b,\n\t\t\t\t0,\n\t\t\t\t&ThreadID2);\n\n\thandle3 = CreateThread((LPSECURITY_ATTRIBUTES) NULL,\n\t\t\t\t0,\n\t\t\t\t(LPTHREAD_START_ROUTINE) chef,\n\t\t\t\t(LPVOID) c,\n\t\t\t\t0,\n\t\t\t\t&ThreadID3);\n\n\tHANDLE hHandles[3];\n\thHandles[0] = handle1;\n\thHandles[1] = handle2;\n\thHandles[2] = handle3;\n\n\tdRes = WaitForMultipleObjects(3,hHandles,0,INFINITE);\n\n\terr = GetLastError();\n\n\tif(err == 0){\n    \n\t\tprintf(\"所有菜品上菜完毕，请开动吧。\\n\");\n\t}\n\telse{\n    \n\t\tprintf(\"WaitForSingleObject err = %d\\n\",err);\n\t}\n\n\treturn nRetCode;\n}\n```\n\n**效果图**\n![在这里插入图片描述](https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151953257.png)\n但是当我们的选择等待的对象为任意一个，即第三个参数为0时\n\n```js \ndRes = WaitForMultipleObjects(3,hHandles,0,INFINITE);\n```\n\n**效果图为：**\n![在这里插入图片描述](https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151953258.png)\n\n### 四、实验总结\n\n实验完成了主、子线程的同步，主线程创建子线程后，主线程塞，让子线程先执行，等子线程执行完后，由子线程唤醒主线程。是使我们了解如何使用使用等待对象WaitForSingleObject（）或WaitForMultipleObjects（)及信号量对象CreateSemaphore（）、OpenSemaphore（）、ReleaseSemaphore（）等系统调用，进一步理解线程的同步。","slug":"OS Expe 02 线程的同步","published":1,"updated":"2024-03-15T11:53:37.341Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clttq59bi000wzwvefmxq8eo1","content":"<h2 id=\"实验二-线程的同步\"><a href=\"#实验二-线程的同步\" class=\"headerlink\" title=\"实验二:线程的同步\"></a>实验二:线程的同步</h2><h3 id=\"一、实验目的\"><a href=\"#一、实验目的\" class=\"headerlink\" title=\"一、实验目的\"></a>一、实验目的</h3><p>1）进一步掌握windows系统环境下线程的创建和撤销<br>2）熟悉windows系统提供的线程同步API（是WINDOWS提供给应用程序与操作系统的接口）<br>3）使用windows系统提供的线程同步API解决实际问题</p>\n<h3 id=\"二、实验准备\"><a href=\"#二、实验准备\" class=\"headerlink\" title=\"二、实验准备\"></a>二、实验准备</h3><h5 id=\"1-进程同步机制的主要任务：\"><a href=\"#1-进程同步机制的主要任务：\" class=\"headerlink\" title=\"1. 进程同步机制的主要任务：\"></a>1. 进程同步机制的主要任务：</h5><p>对多个相关进程在执行次序上进行协调，使并发执行的诸进程之间能够按照一定的规则（或时序）共享系统资源，并能很好地相互合作，从而使程序执行具有可再现性。</p>\n<h5 id=\"2-线程和进程的发展历程\"><a href=\"#2-线程和进程的发展历程\" class=\"headerlink\" title=\"2. 线程和进程的发展历程\"></a>2. 线程和进程的发展历程</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">在<span class=\"hljs-number\">20</span>世纪<span class=\"hljs-number\">60</span>年代中期，人们在设计多道程序<span class=\"hljs-variable constant_\">OS</span>时，引入了进程的概念，从而解决了在单处理机环境下的程序并发执行问题。此后在长达<span class=\"hljs-number\">20</span>年的时间里，在多道程序<span class=\"hljs-variable constant_\">OS</span>中一直以进程作为能拥有资源和独立调度的（运行）的基本单位。<br><br>直到<span class=\"hljs-number\">80</span>年代中期，人们又提出了比进程更小的基本单位 线程 的概念，试图用它来提高程序并发执行的程度，以进一步改善系统的服务质量。特别是在进入<span class=\"hljs-number\">20</span>世纪<span class=\"hljs-number\">90</span>年代后，多处理机系统得到迅速发展，由于线程能更好的提高程序的并发执行程度，因而近几年推出的多处理机<span class=\"hljs-variable constant_\">OS</span>无一例外地都引入了进程，用以改善<span class=\"hljs-variable constant_\">OS</span>的性能。<br></code></pre></td></tr></table></figure>\n\n<p>由于<strong>线程具有许多传统进程所具有的特征</strong>，所以又称之为轻型进程或进程元，相应的，把传统进程称之为重型进程。传统进程相当于只有一个线程的任务，</p>\n<h5 id=\"3-等待对象函数\"><a href=\"#3-等待对象函数\" class=\"headerlink\" title=\"3. 等待对象函数\"></a>3. 等待对象函数</h5><p>等待一个对象 等待多个对象 WaitForSingleObject() WaitForMultipleObjects() 在指定时间内等待一个对象 在指定时间内等待多个对象</p>\n<p><strong>原型：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable constant_\">DWORD</span> <span class=\"hljs-title class_\">WaitForSingleObject</span>(<br>\t<span class=\"hljs-variable constant_\">HANDLE</span> hHandle,\t<span class=\"hljs-comment\">//对象句柄</span><br>\t<span class=\"hljs-variable constant_\">DWORD</span> dwMilliseconds <span class=\"hljs-comment\">//等待时间，以毫秒为单位</span><br>);<br></code></pre></td></tr></table></figure>\n\n<p><strong>原型：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable constant_\">DWORD</span> <span class=\"hljs-title class_\">WaitForMultipleObjects</span>(<br>\t<span class=\"hljs-variable constant_\">DWORD</span> nCount,\t\t\t\t<span class=\"hljs-comment\">//句柄数组中的句柄数</span><br>\t<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">HANDLE</span> *lpHandles,\t<span class=\"hljs-comment\">//指向对象句柄数组的指针</span><br>\t<span class=\"hljs-variable constant_\">BOOL</span> fWaitAll\t\t\t\t<span class=\"hljs-comment\">//等待类型 1/true表示等待所有的任务完成后进行下一个操作，0/flase 只等待任何一个的完成</span><br>\t<span class=\"hljs-variable constant_\">DWORD</span> dwMilliseconds \t\t<span class=\"hljs-comment\">//等待时间，以毫秒为单位</span><br>);<br></code></pre></td></tr></table></figure>\n\n<p><strong>可等待的对象列表</strong></p>\n<ul>\n<li>Change notification：变化通知</li>\n<li>Console input：控制台输入</li>\n<li>Events：事件</li>\n<li>Job：作业</li>\n<li>Mutex：互斥信号量</li>\n<li>Process：进程</li>\n<li><strong>Semaphore：计数信号量</strong> （<em>本次主要用到）</em></li>\n<li><strong>Thread：线程</strong> <em>（本次主要用到）</em></li>\n<li>Wait-able timer：定时器</li>\n</ul>\n<h4 id=\"如何去等待一个对象\"><a href=\"#如何去等待一个对象\" class=\"headerlink\" title=\"如何去等待一个对象\"></a>如何去等待一个对象</h4><ol>\n<li><p>我们需要立一个Flag，用于在主子线程之间相互告知运行状态。</p>\n</li>\n<li><p>Flag &#x3D; 信号量</p>\n</li>\n<li><p>创建一个信号量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">hHandle1 = <span class=\"hljs-title class_\">CreateSemaphore</span>(<span class=\"hljs-variable constant_\">NULL</span>, <span class=\"hljs-number\">0</span>，<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;SemaphoreName1&quot;</span>);<span class=\"hljs-comment\">//创建一个信号量（安全标识符，信号量初始态，信号量最大值，信号量名称）</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>打开一个信号量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">hHandle1 = <span class=\"hljs-title class_\">OpenSemaphore</span>( <span class=\"hljs-variable constant_\">SYNCHRONIZE</span> <span class=\"hljs-variable constant_\">ISEMAPHORE_</span> <span class=\"hljs-variable constant_\">MODIFY_</span> <span class=\"hljs-variable constant_\">STATE</span>, <span class=\"hljs-variable constant_\">NULL</span>,<span class=\"hljs-string\">&quot;SemaphoreName1&quot;</span> );<span class=\"hljs-comment\">//（访问标志，继承标志，信号量名）</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>释放信号量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">rc = <span class=\"hljs-title class_\">ReleaseSemaphore</span> (hHandle1, <span class=\"hljs-number\">1</span>, <span class=\"hljs-variable constant_\">NULL</span>)（我们需要释放哪一个信号量，对信号量进行增几的操作，信号量要增加数值地址）;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>等待单个对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">dRes = <span class=\"hljs-title class_\">WaitForSingleObject</span>(hHandle1 , <span class=\"hljs-variable constant_\">INFINITE</span>); <span class=\"hljs-comment\">// 主线程无限期地等待子线程结束（信号量的句柄，如果没有释放无限运行）  如果对操作时长有限制，可在第二个参数设置等待的最大值</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>等待多个对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">dRes = <span class=\"hljs-title class_\">WaitForMultiple0</span>bjects(<span class=\"hljs-number\">3</span>, hHandles, <span class=\"hljs-number\">1</span>, <span class=\"hljs-variable constant_\">INFINITE</span>); <span class=\"hljs-comment\">//第三个参数为1或true时，等待数组中所有对象完成，为0或者false时满足一个任务结束就可继续执行</span><br></code></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"三、实验内容\"><a href=\"#三、实验内容\" class=\"headerlink\" title=\"三、实验内容\"></a>三、实验内容</h3><p><strong>实验一 线程的同步之等待单个对象</strong><br>子线程 主线程 用于制作麻辣香锅，制作用时5秒 等待子线程执行完毕，打印“麻辣香锅上菜完毕，请开动吧！”</p>\n<p><strong>实验二 线程的同步之等待多个对象</strong></p>\n<p>子线程1 子线程2 子线程3 主线程 用于制作麻辣香锅，制作用时5秒 用于制作什锦菇，制作用时3秒 用于制作米饭，制作用时6秒 等待多个子线程执行完毕，打印”所有菜品上菜完毕，请开动吧！“</p>\n<h4 id=\"实验要求\"><a href=\"#实验要求\" class=\"headerlink\" title=\"实验要求\"></a>实验要求</h4><p>能正确使用等待对象、WaitForSingleObject（）或WaitForMultipleObject（)及信号量对象CreateSemaphore（）、OpenSemaphore（）、ReleaseSemaphore（）等系统调用，进一步理解线程的同步。</p>\n<h4 id=\"实验指导\"><a href=\"#实验指导\" class=\"headerlink\" title=\"实验指导\"></a>实验指导</h4><p>1.在Microsoft visual C++6.0环境下建立一个MFC支持的控制台文件，编写C程序。<br>2.在程序中使用CreateSemaphore（NULL，0，1，”SemaphoreName1”）创建一个名为“SemaphoreName1”的信号量，信号量的初始值为0。<br>之后使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title class_\">OpenSemaphore</span>（<span class=\"hljs-variable constant_\">SYNCHRONIZE</span>|<span class=\"hljs-variable constant_\">SEMAPHORE_MODIFY_STARTE</span>,<span class=\"hljs-variable constant_\">NULL</span>, ”<span class=\"hljs-title class_\">SemaphoreName1</span>）<br></code></pre></td></tr></table></figure>\n\n<p>打开该信号量，这里访问标志使用“SYNCHRONIZE|SEMAPHORE_MODIFY_STARTE”，<br>以便之后可以使用WaitForSingleObject（）等待该信号量及使用ReleaseSemaphore（）释放该信号量，然后创建一个子线程。</p>\n<p>3.主线程创建子线程后调用WaitForSingleObject（hHandle1，INFINITE），这里等待时间设置为INFINITE表示一直等待下去，直到该信号量被唤醒为止。</p>\n<p>4.子线程结束，调用ReleaseSemaphore（hHandle1，1，NULL）释放信号量，使信号量的值加1。</p>\n<h4 id=\"源程序\"><a href=\"#源程序\" class=\"headerlink\" title=\"源程序\"></a>源程序</h4><p><strong>实验一主要内容及代码</strong></p>\n<ul>\n<li>创建一个信号量并打开，创建一个线程，主线程等待子线程结束，释放信号量。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-variable constant_\">HANDLE</span> hHandle1 = <span class=\"hljs-variable constant_\">NULL</span>;<br><br><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">chef</span>(<span class=\"hljs-params\"></span>)<br>&#123;<br>    <br>\t<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">&quot;麻辣香锅开始制作，预计等待时间5秒。\\n&quot;</span>);<br>\t<span class=\"hljs-title class_\">Sleep</span>(<span class=\"hljs-number\">5000</span>);<br>\t<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">&quot;麻辣香锅制作完成！\\n&quot;</span>);<br><br>\t<span class=\"hljs-variable constant_\">BOOL</span> rc;<br>\t<span class=\"hljs-variable constant_\">DWORD</span> err;<br><br>\trc = <span class=\"hljs-title class_\">ReleaseSemaphore</span>(hHandle1,<span class=\"hljs-number\">1</span>,<span class=\"hljs-variable constant_\">NULL</span>);<br>\terr = <span class=\"hljs-title class_\">GetLastError</span>();<br>\t<br>\t<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">&quot;ReleaseSemaphore err=%d\\n&quot;</span>,err);<br>\t<span class=\"hljs-keyword\">if</span>(rc == <span class=\"hljs-number\">0</span>)&#123;<br>    \t<br>\t\t<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">&quot;Semaphore Release Fail!\\n&quot;</span>);<br>\t&#125;<span class=\"hljs-keyword\">else</span>&#123;<br>    \t<br>\t\t<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">&quot;Semaphore Release Success! rc=%d\\n&quot;</span>,rc);\t<br>\t&#125;<br>&#125;<br><br><br>int <span class=\"hljs-title function_\">_tmain</span>(<span class=\"hljs-params\">int argc, TCHAR* argv[], TCHAR* envp[]</span>)<br>&#123;<br>    <br><br>\tint nRetCode = <span class=\"hljs-number\">0</span>;<br><br>\t<span class=\"hljs-variable constant_\">DWORD</span> dRes,err;<br><br>\thHandle1 = <span class=\"hljs-title class_\">CreateSemaphore</span>(<span class=\"hljs-variable constant_\">NULL</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">&quot;SemaphoreName1&quot;</span>);<span class=\"hljs-comment\">//创建一个信号量</span><br>\t<span class=\"hljs-keyword\">if</span>(hHandle1 == <span class=\"hljs-variable constant_\">NULL</span>)&#123;<br>    <br>\t\t<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">&quot;Semaphore Create Fail!\\n&quot;</span>);<br>\t&#125;<span class=\"hljs-keyword\">else</span>&#123;<br>    <br>\t\t<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">&quot;Semaphore Create Success!\\n&quot;</span>);<br>\t&#125;<br>\t<br>\thHandle1 = <span class=\"hljs-title class_\">OpenSemaphore</span>(<span class=\"hljs-variable constant_\">SYNCHRONIZE</span>|<span class=\"hljs-variable constant_\">SEMAPHORE_MODIFY_STATE</span>,<br>\t\t<span class=\"hljs-variable constant_\">NULL</span>,<br>\t\t<span class=\"hljs-string\">&quot;SemaphoreName1&quot;</span>);<br>\t<span class=\"hljs-keyword\">if</span>(hHandle1 == <span class=\"hljs-variable constant_\">NULL</span>)&#123;<br>    <br>\t\t<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">&quot;Semaphor Open Fail!\\n&quot;</span>);<br>\t&#125;<br>\t<span class=\"hljs-keyword\">else</span>&#123;<br>    <br>\t\t<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">&quot;Semaphor Open Success!\\n&quot;</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-variable constant_\">HANDLE</span> handle1 = <span class=\"hljs-variable constant_\">NULL</span>;<br>\t<span class=\"hljs-variable constant_\">DWORD</span> <span class=\"hljs-title class_\">ThreadID1</span> = <span class=\"hljs-variable constant_\">NULL</span>;<br><br>\thandle1 = <span class=\"hljs-title class_\">CreateThread</span>((<span class=\"hljs-variable constant_\">LPSECURITY_ATTRIBUTES</span>) <span class=\"hljs-variable constant_\">NULL</span>,<br>\t\t\t\t<span class=\"hljs-number\">0</span>,<br>\t\t\t\t(<span class=\"hljs-variable constant_\">LPTHREAD_START_ROUTINE</span>) chef,<br>\t\t\t\t(<span class=\"hljs-variable constant_\">LPVOID</span>) <span class=\"hljs-variable constant_\">NULL</span>,<br>\t\t\t\t<span class=\"hljs-number\">0</span>,<br>\t\t\t\t&amp;<span class=\"hljs-title class_\">ThreadID1</span>);<br><br>\tdRes = <span class=\"hljs-title class_\">WaitForSingleObject</span>(hHandle1,<span class=\"hljs-variable constant_\">INFINITE</span>);<br><br>\terr = <span class=\"hljs-title class_\">GetLastError</span>();<br><br>\t<span class=\"hljs-keyword\">if</span>(err == <span class=\"hljs-number\">0</span>)&#123;<br>    <br>\t\t<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">&quot;麻辣香锅上菜完毕，请开动吧。\\n&quot;</span>);<br>\t&#125;<br>\t<span class=\"hljs-keyword\">else</span>&#123;<br>    <br>\t\t<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">&quot;WaitForSingleObject err = %d\\n&quot;</span>,err);<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> nRetCode;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>效果图</strong><br><img src=\"https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151953256.png\" alt=\"在这里插入图片描述\"></p>\n<p><strong>实验二主要内容及代码</strong></p>\n<ul>\n<li>创建三个线程，当三个线程都执行完毕时，执行主线程<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">chef</span>(<span class=\"hljs-params\">int meal_code</span>)<br>&#123;<br>    <br><br>\t<span class=\"hljs-keyword\">if</span>(meal_code == <span class=\"hljs-number\">0</span>)&#123;<br>    <br>\t\t<span class=\"hljs-title class_\">Sleep</span>(<span class=\"hljs-number\">5000</span>);<br>\t\t<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">&quot;麻辣香锅制作完成！\\n&quot;</span>);<br>\t&#125;<br>\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(meal_code == <span class=\"hljs-number\">1</span>)&#123;<br>    <br>\t\t<span class=\"hljs-title class_\">Sleep</span>(<span class=\"hljs-number\">3000</span>);<br>\t\t<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">&quot;什锦菇制作完成！\\n&quot;</span>);<br>\t&#125;<br>\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(meal_code == <span class=\"hljs-number\">2</span>)&#123;<br>    <br>\t\t<span class=\"hljs-title class_\">Sleep</span>(<span class=\"hljs-number\">6000</span>);<br>\t\t<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">&quot;米饭制作完成！\\n&quot;</span>);<br>\t&#125;<br>\t<br>&#125;<br><br><br>int <span class=\"hljs-title function_\">_tmain</span>(<span class=\"hljs-params\">int argc, TCHAR* argv[], TCHAR* envp[]</span>)<br>&#123;<br>    <br><br>\tint nRetCode = <span class=\"hljs-number\">0</span>;<br><br>\t<span class=\"hljs-variable constant_\">DWORD</span> dRes,err;<br><br>\t<span class=\"hljs-variable constant_\">HANDLE</span> handle1 = <span class=\"hljs-variable constant_\">NULL</span>;<br>\t<span class=\"hljs-variable constant_\">HANDLE</span> handle2 = <span class=\"hljs-variable constant_\">NULL</span>;<br>\t<span class=\"hljs-variable constant_\">HANDLE</span> handle3 = <span class=\"hljs-variable constant_\">NULL</span>;<br><br>\t<span class=\"hljs-variable constant_\">DWORD</span> <span class=\"hljs-title class_\">ThreadID1</span> = <span class=\"hljs-variable constant_\">NULL</span>;<br>\t<span class=\"hljs-variable constant_\">DWORD</span> <span class=\"hljs-title class_\">ThreadID2</span> = <span class=\"hljs-variable constant_\">NULL</span>;<br>\t<span class=\"hljs-variable constant_\">DWORD</span> <span class=\"hljs-title class_\">ThreadID3</span> = <span class=\"hljs-variable constant_\">NULL</span>;<br><br>\tint a = <span class=\"hljs-number\">0</span>;<br>\tint b = <span class=\"hljs-number\">1</span>;<br>\tint c = <span class=\"hljs-number\">2</span>;<br><br>\thandle1 = <span class=\"hljs-title class_\">CreateThread</span>((<span class=\"hljs-variable constant_\">LPSECURITY_ATTRIBUTES</span>) <span class=\"hljs-variable constant_\">NULL</span>,<br>\t\t\t\t<span class=\"hljs-number\">0</span>,<br>\t\t\t\t(<span class=\"hljs-variable constant_\">LPTHREAD_START_ROUTINE</span>) chef,<br>\t\t\t\t(<span class=\"hljs-variable constant_\">LPVOID</span>) a,<br>\t\t\t\t<span class=\"hljs-number\">0</span>,<br>\t\t\t\t&amp;<span class=\"hljs-title class_\">ThreadID1</span>);<br><br>\thandle2 = <span class=\"hljs-title class_\">CreateThread</span>((<span class=\"hljs-variable constant_\">LPSECURITY_ATTRIBUTES</span>) <span class=\"hljs-variable constant_\">NULL</span>,<br>\t\t\t\t<span class=\"hljs-number\">0</span>,<br>\t\t\t\t(<span class=\"hljs-variable constant_\">LPTHREAD_START_ROUTINE</span>) chef,<br>\t\t\t\t(<span class=\"hljs-variable constant_\">LPVOID</span>) b,<br>\t\t\t\t<span class=\"hljs-number\">0</span>,<br>\t\t\t\t&amp;<span class=\"hljs-title class_\">ThreadID2</span>);<br><br>\thandle3 = <span class=\"hljs-title class_\">CreateThread</span>((<span class=\"hljs-variable constant_\">LPSECURITY_ATTRIBUTES</span>) <span class=\"hljs-variable constant_\">NULL</span>,<br>\t\t\t\t<span class=\"hljs-number\">0</span>,<br>\t\t\t\t(<span class=\"hljs-variable constant_\">LPTHREAD_START_ROUTINE</span>) chef,<br>\t\t\t\t(<span class=\"hljs-variable constant_\">LPVOID</span>) c,<br>\t\t\t\t<span class=\"hljs-number\">0</span>,<br>\t\t\t\t&amp;<span class=\"hljs-title class_\">ThreadID3</span>);<br><br>\t<span class=\"hljs-variable constant_\">HANDLE</span> hHandles[<span class=\"hljs-number\">3</span>];<br>\thHandles[<span class=\"hljs-number\">0</span>] = handle1;<br>\thHandles[<span class=\"hljs-number\">1</span>] = handle2;<br>\thHandles[<span class=\"hljs-number\">2</span>] = handle3;<br><br>\tdRes = <span class=\"hljs-title class_\">WaitForMultipleObjects</span>(<span class=\"hljs-number\">3</span>,hHandles,<span class=\"hljs-number\">0</span>,<span class=\"hljs-variable constant_\">INFINITE</span>);<br><br>\terr = <span class=\"hljs-title class_\">GetLastError</span>();<br><br>\t<span class=\"hljs-keyword\">if</span>(err == <span class=\"hljs-number\">0</span>)&#123;<br>    <br>\t\t<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">&quot;所有菜品上菜完毕，请开动吧。\\n&quot;</span>);<br>\t&#125;<br>\t<span class=\"hljs-keyword\">else</span>&#123;<br>    <br>\t\t<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">&quot;WaitForSingleObject err = %d\\n&quot;</span>,err);<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> nRetCode;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>效果图</strong><br><img src=\"https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151953257.png\" alt=\"在这里插入图片描述\"><br>但是当我们的选择等待的对象为任意一个，即第三个参数为0时</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">dRes = <span class=\"hljs-title class_\">WaitForMultipleObjects</span>(<span class=\"hljs-number\">3</span>,hHandles,<span class=\"hljs-number\">0</span>,<span class=\"hljs-variable constant_\">INFINITE</span>);<br></code></pre></td></tr></table></figure>\n\n<p><strong>效果图为：</strong><br><img src=\"https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151953258.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"四、实验总结\"><a href=\"#四、实验总结\" class=\"headerlink\" title=\"四、实验总结\"></a>四、实验总结</h3><p>实验完成了主、子线程的同步，主线程创建子线程后，主线程塞，让子线程先执行，等子线程执行完后，由子线程唤醒主线程。是使我们了解如何使用使用等待对象WaitForSingleObject（）或WaitForMultipleObjects（)及信号量对象CreateSemaphore（）、OpenSemaphore（）、ReleaseSemaphore（）等系统调用，进一步理解线程的同步。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"实验二-线程的同步\"><a href=\"#实验二-线程的同步\" class=\"headerlink\" title=\"实验二:线程的同步\"></a>实验二:线程的同步</h2><h3 id=\"一、实验目的\"><a href=\"#一、实验目的\" class=\"headerlink\" title=\"一、实验目的\"></a>一、实验目的</h3><p>1）进一步掌握windows系统环境下线程的创建和撤销<br>2）熟悉windows系统提供的线程同步API（是WINDOWS提供给应用程序与操作系统的接口）<br>3）使用windows系统提供的线程同步API解决实际问题</p>\n<h3 id=\"二、实验准备\"><a href=\"#二、实验准备\" class=\"headerlink\" title=\"二、实验准备\"></a>二、实验准备</h3><h5 id=\"1-进程同步机制的主要任务：\"><a href=\"#1-进程同步机制的主要任务：\" class=\"headerlink\" title=\"1. 进程同步机制的主要任务：\"></a>1. 进程同步机制的主要任务：</h5><p>对多个相关进程在执行次序上进行协调，使并发执行的诸进程之间能够按照一定的规则（或时序）共享系统资源，并能很好地相互合作，从而使程序执行具有可再现性。</p>\n<h5 id=\"2-线程和进程的发展历程\"><a href=\"#2-线程和进程的发展历程\" class=\"headerlink\" title=\"2. 线程和进程的发展历程\"></a>2. 线程和进程的发展历程</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">在<span class=\"hljs-number\">20</span>世纪<span class=\"hljs-number\">60</span>年代中期，人们在设计多道程序<span class=\"hljs-variable constant_\">OS</span>时，引入了进程的概念，从而解决了在单处理机环境下的程序并发执行问题。此后在长达<span class=\"hljs-number\">20</span>年的时间里，在多道程序<span class=\"hljs-variable constant_\">OS</span>中一直以进程作为能拥有资源和独立调度的（运行）的基本单位。<br><br>直到<span class=\"hljs-number\">80</span>年代中期，人们又提出了比进程更小的基本单位 线程 的概念，试图用它来提高程序并发执行的程度，以进一步改善系统的服务质量。特别是在进入<span class=\"hljs-number\">20</span>世纪<span class=\"hljs-number\">90</span>年代后，多处理机系统得到迅速发展，由于线程能更好的提高程序的并发执行程度，因而近几年推出的多处理机<span class=\"hljs-variable constant_\">OS</span>无一例外地都引入了进程，用以改善<span class=\"hljs-variable constant_\">OS</span>的性能。<br></code></pre></td></tr></table></figure>\n\n<p>由于<strong>线程具有许多传统进程所具有的特征</strong>，所以又称之为轻型进程或进程元，相应的，把传统进程称之为重型进程。传统进程相当于只有一个线程的任务，</p>\n<h5 id=\"3-等待对象函数\"><a href=\"#3-等待对象函数\" class=\"headerlink\" title=\"3. 等待对象函数\"></a>3. 等待对象函数</h5><p>等待一个对象 等待多个对象 WaitForSingleObject() WaitForMultipleObjects() 在指定时间内等待一个对象 在指定时间内等待多个对象</p>\n<p><strong>原型：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable constant_\">DWORD</span> <span class=\"hljs-title class_\">WaitForSingleObject</span>(<br>\t<span class=\"hljs-variable constant_\">HANDLE</span> hHandle,\t<span class=\"hljs-comment\">//对象句柄</span><br>\t<span class=\"hljs-variable constant_\">DWORD</span> dwMilliseconds <span class=\"hljs-comment\">//等待时间，以毫秒为单位</span><br>);<br></code></pre></td></tr></table></figure>\n\n<p><strong>原型：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable constant_\">DWORD</span> <span class=\"hljs-title class_\">WaitForMultipleObjects</span>(<br>\t<span class=\"hljs-variable constant_\">DWORD</span> nCount,\t\t\t\t<span class=\"hljs-comment\">//句柄数组中的句柄数</span><br>\t<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">HANDLE</span> *lpHandles,\t<span class=\"hljs-comment\">//指向对象句柄数组的指针</span><br>\t<span class=\"hljs-variable constant_\">BOOL</span> fWaitAll\t\t\t\t<span class=\"hljs-comment\">//等待类型 1/true表示等待所有的任务完成后进行下一个操作，0/flase 只等待任何一个的完成</span><br>\t<span class=\"hljs-variable constant_\">DWORD</span> dwMilliseconds \t\t<span class=\"hljs-comment\">//等待时间，以毫秒为单位</span><br>);<br></code></pre></td></tr></table></figure>\n\n<p><strong>可等待的对象列表</strong></p>\n<ul>\n<li>Change notification：变化通知</li>\n<li>Console input：控制台输入</li>\n<li>Events：事件</li>\n<li>Job：作业</li>\n<li>Mutex：互斥信号量</li>\n<li>Process：进程</li>\n<li><strong>Semaphore：计数信号量</strong> （<em>本次主要用到）</em></li>\n<li><strong>Thread：线程</strong> <em>（本次主要用到）</em></li>\n<li>Wait-able timer：定时器</li>\n</ul>\n<h4 id=\"如何去等待一个对象\"><a href=\"#如何去等待一个对象\" class=\"headerlink\" title=\"如何去等待一个对象\"></a>如何去等待一个对象</h4><ol>\n<li><p>我们需要立一个Flag，用于在主子线程之间相互告知运行状态。</p>\n</li>\n<li><p>Flag &#x3D; 信号量</p>\n</li>\n<li><p>创建一个信号量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">hHandle1 = <span class=\"hljs-title class_\">CreateSemaphore</span>(<span class=\"hljs-variable constant_\">NULL</span>, <span class=\"hljs-number\">0</span>，<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;SemaphoreName1&quot;</span>);<span class=\"hljs-comment\">//创建一个信号量（安全标识符，信号量初始态，信号量最大值，信号量名称）</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>打开一个信号量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">hHandle1 = <span class=\"hljs-title class_\">OpenSemaphore</span>( <span class=\"hljs-variable constant_\">SYNCHRONIZE</span> <span class=\"hljs-variable constant_\">ISEMAPHORE_</span> <span class=\"hljs-variable constant_\">MODIFY_</span> <span class=\"hljs-variable constant_\">STATE</span>, <span class=\"hljs-variable constant_\">NULL</span>,<span class=\"hljs-string\">&quot;SemaphoreName1&quot;</span> );<span class=\"hljs-comment\">//（访问标志，继承标志，信号量名）</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>释放信号量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">rc = <span class=\"hljs-title class_\">ReleaseSemaphore</span> (hHandle1, <span class=\"hljs-number\">1</span>, <span class=\"hljs-variable constant_\">NULL</span>)（我们需要释放哪一个信号量，对信号量进行增几的操作，信号量要增加数值地址）;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>等待单个对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">dRes = <span class=\"hljs-title class_\">WaitForSingleObject</span>(hHandle1 , <span class=\"hljs-variable constant_\">INFINITE</span>); <span class=\"hljs-comment\">// 主线程无限期地等待子线程结束（信号量的句柄，如果没有释放无限运行）  如果对操作时长有限制，可在第二个参数设置等待的最大值</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>等待多个对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">dRes = <span class=\"hljs-title class_\">WaitForMultiple0</span>bjects(<span class=\"hljs-number\">3</span>, hHandles, <span class=\"hljs-number\">1</span>, <span class=\"hljs-variable constant_\">INFINITE</span>); <span class=\"hljs-comment\">//第三个参数为1或true时，等待数组中所有对象完成，为0或者false时满足一个任务结束就可继续执行</span><br></code></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"三、实验内容\"><a href=\"#三、实验内容\" class=\"headerlink\" title=\"三、实验内容\"></a>三、实验内容</h3><p><strong>实验一 线程的同步之等待单个对象</strong><br>子线程 主线程 用于制作麻辣香锅，制作用时5秒 等待子线程执行完毕，打印“麻辣香锅上菜完毕，请开动吧！”</p>\n<p><strong>实验二 线程的同步之等待多个对象</strong></p>\n<p>子线程1 子线程2 子线程3 主线程 用于制作麻辣香锅，制作用时5秒 用于制作什锦菇，制作用时3秒 用于制作米饭，制作用时6秒 等待多个子线程执行完毕，打印”所有菜品上菜完毕，请开动吧！“</p>\n<h4 id=\"实验要求\"><a href=\"#实验要求\" class=\"headerlink\" title=\"实验要求\"></a>实验要求</h4><p>能正确使用等待对象、WaitForSingleObject（）或WaitForMultipleObject（)及信号量对象CreateSemaphore（）、OpenSemaphore（）、ReleaseSemaphore（）等系统调用，进一步理解线程的同步。</p>\n<h4 id=\"实验指导\"><a href=\"#实验指导\" class=\"headerlink\" title=\"实验指导\"></a>实验指导</h4><p>1.在Microsoft visual C++6.0环境下建立一个MFC支持的控制台文件，编写C程序。<br>2.在程序中使用CreateSemaphore（NULL，0，1，”SemaphoreName1”）创建一个名为“SemaphoreName1”的信号量，信号量的初始值为0。<br>之后使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title class_\">OpenSemaphore</span>（<span class=\"hljs-variable constant_\">SYNCHRONIZE</span>|<span class=\"hljs-variable constant_\">SEMAPHORE_MODIFY_STARTE</span>,<span class=\"hljs-variable constant_\">NULL</span>, ”<span class=\"hljs-title class_\">SemaphoreName1</span>）<br></code></pre></td></tr></table></figure>\n\n<p>打开该信号量，这里访问标志使用“SYNCHRONIZE|SEMAPHORE_MODIFY_STARTE”，<br>以便之后可以使用WaitForSingleObject（）等待该信号量及使用ReleaseSemaphore（）释放该信号量，然后创建一个子线程。</p>\n<p>3.主线程创建子线程后调用WaitForSingleObject（hHandle1，INFINITE），这里等待时间设置为INFINITE表示一直等待下去，直到该信号量被唤醒为止。</p>\n<p>4.子线程结束，调用ReleaseSemaphore（hHandle1，1，NULL）释放信号量，使信号量的值加1。</p>\n<h4 id=\"源程序\"><a href=\"#源程序\" class=\"headerlink\" title=\"源程序\"></a>源程序</h4><p><strong>实验一主要内容及代码</strong></p>\n<ul>\n<li>创建一个信号量并打开，创建一个线程，主线程等待子线程结束，释放信号量。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-variable constant_\">HANDLE</span> hHandle1 = <span class=\"hljs-variable constant_\">NULL</span>;<br><br><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">chef</span>(<span class=\"hljs-params\"></span>)<br>&#123;<br>    <br>\t<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">&quot;麻辣香锅开始制作，预计等待时间5秒。\\n&quot;</span>);<br>\t<span class=\"hljs-title class_\">Sleep</span>(<span class=\"hljs-number\">5000</span>);<br>\t<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">&quot;麻辣香锅制作完成！\\n&quot;</span>);<br><br>\t<span class=\"hljs-variable constant_\">BOOL</span> rc;<br>\t<span class=\"hljs-variable constant_\">DWORD</span> err;<br><br>\trc = <span class=\"hljs-title class_\">ReleaseSemaphore</span>(hHandle1,<span class=\"hljs-number\">1</span>,<span class=\"hljs-variable constant_\">NULL</span>);<br>\terr = <span class=\"hljs-title class_\">GetLastError</span>();<br>\t<br>\t<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">&quot;ReleaseSemaphore err=%d\\n&quot;</span>,err);<br>\t<span class=\"hljs-keyword\">if</span>(rc == <span class=\"hljs-number\">0</span>)&#123;<br>    \t<br>\t\t<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">&quot;Semaphore Release Fail!\\n&quot;</span>);<br>\t&#125;<span class=\"hljs-keyword\">else</span>&#123;<br>    \t<br>\t\t<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">&quot;Semaphore Release Success! rc=%d\\n&quot;</span>,rc);\t<br>\t&#125;<br>&#125;<br><br><br>int <span class=\"hljs-title function_\">_tmain</span>(<span class=\"hljs-params\">int argc, TCHAR* argv[], TCHAR* envp[]</span>)<br>&#123;<br>    <br><br>\tint nRetCode = <span class=\"hljs-number\">0</span>;<br><br>\t<span class=\"hljs-variable constant_\">DWORD</span> dRes,err;<br><br>\thHandle1 = <span class=\"hljs-title class_\">CreateSemaphore</span>(<span class=\"hljs-variable constant_\">NULL</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">&quot;SemaphoreName1&quot;</span>);<span class=\"hljs-comment\">//创建一个信号量</span><br>\t<span class=\"hljs-keyword\">if</span>(hHandle1 == <span class=\"hljs-variable constant_\">NULL</span>)&#123;<br>    <br>\t\t<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">&quot;Semaphore Create Fail!\\n&quot;</span>);<br>\t&#125;<span class=\"hljs-keyword\">else</span>&#123;<br>    <br>\t\t<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">&quot;Semaphore Create Success!\\n&quot;</span>);<br>\t&#125;<br>\t<br>\thHandle1 = <span class=\"hljs-title class_\">OpenSemaphore</span>(<span class=\"hljs-variable constant_\">SYNCHRONIZE</span>|<span class=\"hljs-variable constant_\">SEMAPHORE_MODIFY_STATE</span>,<br>\t\t<span class=\"hljs-variable constant_\">NULL</span>,<br>\t\t<span class=\"hljs-string\">&quot;SemaphoreName1&quot;</span>);<br>\t<span class=\"hljs-keyword\">if</span>(hHandle1 == <span class=\"hljs-variable constant_\">NULL</span>)&#123;<br>    <br>\t\t<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">&quot;Semaphor Open Fail!\\n&quot;</span>);<br>\t&#125;<br>\t<span class=\"hljs-keyword\">else</span>&#123;<br>    <br>\t\t<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">&quot;Semaphor Open Success!\\n&quot;</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-variable constant_\">HANDLE</span> handle1 = <span class=\"hljs-variable constant_\">NULL</span>;<br>\t<span class=\"hljs-variable constant_\">DWORD</span> <span class=\"hljs-title class_\">ThreadID1</span> = <span class=\"hljs-variable constant_\">NULL</span>;<br><br>\thandle1 = <span class=\"hljs-title class_\">CreateThread</span>((<span class=\"hljs-variable constant_\">LPSECURITY_ATTRIBUTES</span>) <span class=\"hljs-variable constant_\">NULL</span>,<br>\t\t\t\t<span class=\"hljs-number\">0</span>,<br>\t\t\t\t(<span class=\"hljs-variable constant_\">LPTHREAD_START_ROUTINE</span>) chef,<br>\t\t\t\t(<span class=\"hljs-variable constant_\">LPVOID</span>) <span class=\"hljs-variable constant_\">NULL</span>,<br>\t\t\t\t<span class=\"hljs-number\">0</span>,<br>\t\t\t\t&amp;<span class=\"hljs-title class_\">ThreadID1</span>);<br><br>\tdRes = <span class=\"hljs-title class_\">WaitForSingleObject</span>(hHandle1,<span class=\"hljs-variable constant_\">INFINITE</span>);<br><br>\terr = <span class=\"hljs-title class_\">GetLastError</span>();<br><br>\t<span class=\"hljs-keyword\">if</span>(err == <span class=\"hljs-number\">0</span>)&#123;<br>    <br>\t\t<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">&quot;麻辣香锅上菜完毕，请开动吧。\\n&quot;</span>);<br>\t&#125;<br>\t<span class=\"hljs-keyword\">else</span>&#123;<br>    <br>\t\t<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">&quot;WaitForSingleObject err = %d\\n&quot;</span>,err);<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> nRetCode;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>效果图</strong><br><img src=\"https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151953256.png\" alt=\"在这里插入图片描述\"></p>\n<p><strong>实验二主要内容及代码</strong></p>\n<ul>\n<li>创建三个线程，当三个线程都执行完毕时，执行主线程<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">chef</span>(<span class=\"hljs-params\">int meal_code</span>)<br>&#123;<br>    <br><br>\t<span class=\"hljs-keyword\">if</span>(meal_code == <span class=\"hljs-number\">0</span>)&#123;<br>    <br>\t\t<span class=\"hljs-title class_\">Sleep</span>(<span class=\"hljs-number\">5000</span>);<br>\t\t<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">&quot;麻辣香锅制作完成！\\n&quot;</span>);<br>\t&#125;<br>\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(meal_code == <span class=\"hljs-number\">1</span>)&#123;<br>    <br>\t\t<span class=\"hljs-title class_\">Sleep</span>(<span class=\"hljs-number\">3000</span>);<br>\t\t<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">&quot;什锦菇制作完成！\\n&quot;</span>);<br>\t&#125;<br>\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(meal_code == <span class=\"hljs-number\">2</span>)&#123;<br>    <br>\t\t<span class=\"hljs-title class_\">Sleep</span>(<span class=\"hljs-number\">6000</span>);<br>\t\t<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">&quot;米饭制作完成！\\n&quot;</span>);<br>\t&#125;<br>\t<br>&#125;<br><br><br>int <span class=\"hljs-title function_\">_tmain</span>(<span class=\"hljs-params\">int argc, TCHAR* argv[], TCHAR* envp[]</span>)<br>&#123;<br>    <br><br>\tint nRetCode = <span class=\"hljs-number\">0</span>;<br><br>\t<span class=\"hljs-variable constant_\">DWORD</span> dRes,err;<br><br>\t<span class=\"hljs-variable constant_\">HANDLE</span> handle1 = <span class=\"hljs-variable constant_\">NULL</span>;<br>\t<span class=\"hljs-variable constant_\">HANDLE</span> handle2 = <span class=\"hljs-variable constant_\">NULL</span>;<br>\t<span class=\"hljs-variable constant_\">HANDLE</span> handle3 = <span class=\"hljs-variable constant_\">NULL</span>;<br><br>\t<span class=\"hljs-variable constant_\">DWORD</span> <span class=\"hljs-title class_\">ThreadID1</span> = <span class=\"hljs-variable constant_\">NULL</span>;<br>\t<span class=\"hljs-variable constant_\">DWORD</span> <span class=\"hljs-title class_\">ThreadID2</span> = <span class=\"hljs-variable constant_\">NULL</span>;<br>\t<span class=\"hljs-variable constant_\">DWORD</span> <span class=\"hljs-title class_\">ThreadID3</span> = <span class=\"hljs-variable constant_\">NULL</span>;<br><br>\tint a = <span class=\"hljs-number\">0</span>;<br>\tint b = <span class=\"hljs-number\">1</span>;<br>\tint c = <span class=\"hljs-number\">2</span>;<br><br>\thandle1 = <span class=\"hljs-title class_\">CreateThread</span>((<span class=\"hljs-variable constant_\">LPSECURITY_ATTRIBUTES</span>) <span class=\"hljs-variable constant_\">NULL</span>,<br>\t\t\t\t<span class=\"hljs-number\">0</span>,<br>\t\t\t\t(<span class=\"hljs-variable constant_\">LPTHREAD_START_ROUTINE</span>) chef,<br>\t\t\t\t(<span class=\"hljs-variable constant_\">LPVOID</span>) a,<br>\t\t\t\t<span class=\"hljs-number\">0</span>,<br>\t\t\t\t&amp;<span class=\"hljs-title class_\">ThreadID1</span>);<br><br>\thandle2 = <span class=\"hljs-title class_\">CreateThread</span>((<span class=\"hljs-variable constant_\">LPSECURITY_ATTRIBUTES</span>) <span class=\"hljs-variable constant_\">NULL</span>,<br>\t\t\t\t<span class=\"hljs-number\">0</span>,<br>\t\t\t\t(<span class=\"hljs-variable constant_\">LPTHREAD_START_ROUTINE</span>) chef,<br>\t\t\t\t(<span class=\"hljs-variable constant_\">LPVOID</span>) b,<br>\t\t\t\t<span class=\"hljs-number\">0</span>,<br>\t\t\t\t&amp;<span class=\"hljs-title class_\">ThreadID2</span>);<br><br>\thandle3 = <span class=\"hljs-title class_\">CreateThread</span>((<span class=\"hljs-variable constant_\">LPSECURITY_ATTRIBUTES</span>) <span class=\"hljs-variable constant_\">NULL</span>,<br>\t\t\t\t<span class=\"hljs-number\">0</span>,<br>\t\t\t\t(<span class=\"hljs-variable constant_\">LPTHREAD_START_ROUTINE</span>) chef,<br>\t\t\t\t(<span class=\"hljs-variable constant_\">LPVOID</span>) c,<br>\t\t\t\t<span class=\"hljs-number\">0</span>,<br>\t\t\t\t&amp;<span class=\"hljs-title class_\">ThreadID3</span>);<br><br>\t<span class=\"hljs-variable constant_\">HANDLE</span> hHandles[<span class=\"hljs-number\">3</span>];<br>\thHandles[<span class=\"hljs-number\">0</span>] = handle1;<br>\thHandles[<span class=\"hljs-number\">1</span>] = handle2;<br>\thHandles[<span class=\"hljs-number\">2</span>] = handle3;<br><br>\tdRes = <span class=\"hljs-title class_\">WaitForMultipleObjects</span>(<span class=\"hljs-number\">3</span>,hHandles,<span class=\"hljs-number\">0</span>,<span class=\"hljs-variable constant_\">INFINITE</span>);<br><br>\terr = <span class=\"hljs-title class_\">GetLastError</span>();<br><br>\t<span class=\"hljs-keyword\">if</span>(err == <span class=\"hljs-number\">0</span>)&#123;<br>    <br>\t\t<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">&quot;所有菜品上菜完毕，请开动吧。\\n&quot;</span>);<br>\t&#125;<br>\t<span class=\"hljs-keyword\">else</span>&#123;<br>    <br>\t\t<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">&quot;WaitForSingleObject err = %d\\n&quot;</span>,err);<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> nRetCode;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>效果图</strong><br><img src=\"https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151953257.png\" alt=\"在这里插入图片描述\"><br>但是当我们的选择等待的对象为任意一个，即第三个参数为0时</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">dRes = <span class=\"hljs-title class_\">WaitForMultipleObjects</span>(<span class=\"hljs-number\">3</span>,hHandles,<span class=\"hljs-number\">0</span>,<span class=\"hljs-variable constant_\">INFINITE</span>);<br></code></pre></td></tr></table></figure>\n\n<p><strong>效果图为：</strong><br><img src=\"https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151953258.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"四、实验总结\"><a href=\"#四、实验总结\" class=\"headerlink\" title=\"四、实验总结\"></a>四、实验总结</h3><p>实验完成了主、子线程的同步，主线程创建子线程后，主线程塞，让子线程先执行，等子线程执行完后，由子线程唤醒主线程。是使我们了解如何使用使用等待对象WaitForSingleObject（）或WaitForMultipleObjects（)及信号量对象CreateSemaphore（）、OpenSemaphore（）、ReleaseSemaphore（）等系统调用，进一步理解线程的同步。</p>\n"},{"title":"Win10在VMware中安装Ubuntu18.04.5","author":null,"date":"2021-04-09T11:56:51.000Z","_content":"##### 首先安装VMware\n\n##### 其次下载Ubuntu18.04.5的iso磁盘。\n\n**没有图片的步骤都选择默认的：**\n![在这里插入图片描述](../images/9df205ad-32fa-438d-b93d-cb5674a54f46.png)\n\n安装完虚拟机之后，编辑虚拟机设置。选择硬件的CD/DVD\n![在这里插入图片描述](../images/04a0e748-c456-4581-98ff-09200464c9b9.png)\n\n##### 开启虚拟机\n\n![在这里插入图片描述](../images/c82716e3-2a00-4b9a-963a-11c0b2710971.png)\n![在这里插入图片描述](../images/8e2de0de-57c3-4630-a0c5-2f4c4c256249.png)\n「正常安装」将安装所有应用程序，包括网络浏览器、办公套件、游戏和媒体播放器。 如果您想要设置完整的桌面，请选择「正常安装」。 如果您只想要最小化的系统，有 Web 浏览器和基本实用程序，请选择「最小安装」。\n![在这里插入图片描述](../images/944f87c5-8b8c-4e3b-ac24-3dede2e042a0.png)\n![在这里插入图片描述](../images/edab931b-a8d1-404f-b964-a0c1800453b4.png)\n![在这里插入图片描述](../images/2654832d-8b94-48d8-8397-6c2fc84824fa.png)\n\n![在这里插入图片描述](../images/2089d9a1-92c8-45f9-96f3-4922de92349b.png)\n选择自己的时区\n![在这里插入图片描述](../images/e0b8adc1-a10b-4cf0-b498-b6ac67e8cc2d.png)\n输入自己的信息后，选择继续\n![在这里插入图片描述](../images/516c9447-96d6-4f42-a7d4-60480c850f40.png)\n此时需要等待系统安装一段时间。\n![在这里插入图片描述](../images/eaeb057a-f41b-4583-9274-502197c74e2f.png)\n\n安装完，就可以使用Ubuntu系统啦。\n\n如果有帮助到你，非常荣幸。\n\n如果大家有心情的话，鼓励一下我也可以的（我是穷逼大学生）。😁\n![在这里插入图片描述](../images/7b6d9d86-100f-445d-aeb1-ffe92391e0f8.png)\n![在这里插入图片描述](../images/5669700c-382d-4d12-b62d-78d52ba127b0.png)","source":"_posts/Win10在VMware中安装Ubuntu18.04.5.md","raw":"---\ntitle: Win10在VMware中安装Ubuntu18.04.5\nauthor: \ntags: \n       - 其它\n\ncategory: \n       - 其它\n\ndate: 2021-04-09 19:56:51\n---\n##### 首先安装VMware\n\n##### 其次下载Ubuntu18.04.5的iso磁盘。\n\n**没有图片的步骤都选择默认的：**\n![在这里插入图片描述](../images/9df205ad-32fa-438d-b93d-cb5674a54f46.png)\n\n安装完虚拟机之后，编辑虚拟机设置。选择硬件的CD/DVD\n![在这里插入图片描述](../images/04a0e748-c456-4581-98ff-09200464c9b9.png)\n\n##### 开启虚拟机\n\n![在这里插入图片描述](../images/c82716e3-2a00-4b9a-963a-11c0b2710971.png)\n![在这里插入图片描述](../images/8e2de0de-57c3-4630-a0c5-2f4c4c256249.png)\n「正常安装」将安装所有应用程序，包括网络浏览器、办公套件、游戏和媒体播放器。 如果您想要设置完整的桌面，请选择「正常安装」。 如果您只想要最小化的系统，有 Web 浏览器和基本实用程序，请选择「最小安装」。\n![在这里插入图片描述](../images/944f87c5-8b8c-4e3b-ac24-3dede2e042a0.png)\n![在这里插入图片描述](../images/edab931b-a8d1-404f-b964-a0c1800453b4.png)\n![在这里插入图片描述](../images/2654832d-8b94-48d8-8397-6c2fc84824fa.png)\n\n![在这里插入图片描述](../images/2089d9a1-92c8-45f9-96f3-4922de92349b.png)\n选择自己的时区\n![在这里插入图片描述](../images/e0b8adc1-a10b-4cf0-b498-b6ac67e8cc2d.png)\n输入自己的信息后，选择继续\n![在这里插入图片描述](../images/516c9447-96d6-4f42-a7d4-60480c850f40.png)\n此时需要等待系统安装一段时间。\n![在这里插入图片描述](../images/eaeb057a-f41b-4583-9274-502197c74e2f.png)\n\n安装完，就可以使用Ubuntu系统啦。\n\n如果有帮助到你，非常荣幸。\n\n如果大家有心情的话，鼓励一下我也可以的（我是穷逼大学生）。😁\n![在这里插入图片描述](../images/7b6d9d86-100f-445d-aeb1-ffe92391e0f8.png)\n![在这里插入图片描述](../images/5669700c-382d-4d12-b62d-78d52ba127b0.png)","slug":"Win10在VMware中安装Ubuntu18.04.5","published":1,"updated":"2024-03-15T08:23:41.194Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clttq59bj0010zwve8mpb6r3d","content":"<h5 id=\"首先安装VMware\"><a href=\"#首先安装VMware\" class=\"headerlink\" title=\"首先安装VMware\"></a>首先安装VMware</h5><h5 id=\"其次下载Ubuntu18-04-5的iso磁盘。\"><a href=\"#其次下载Ubuntu18-04-5的iso磁盘。\" class=\"headerlink\" title=\"其次下载Ubuntu18.04.5的iso磁盘。\"></a>其次下载Ubuntu18.04.5的iso磁盘。</h5><p><strong>没有图片的步骤都选择默认的：</strong><br><img src=\"/../images/9df205ad-32fa-438d-b93d-cb5674a54f46.png\" alt=\"在这里插入图片描述\"></p>\n<p>安装完虚拟机之后，编辑虚拟机设置。选择硬件的CD&#x2F;DVD<br><img src=\"/../images/04a0e748-c456-4581-98ff-09200464c9b9.png\" alt=\"在这里插入图片描述\"></p>\n<h5 id=\"开启虚拟机\"><a href=\"#开启虚拟机\" class=\"headerlink\" title=\"开启虚拟机\"></a>开启虚拟机</h5><p><img src=\"/../images/c82716e3-2a00-4b9a-963a-11c0b2710971.png\" alt=\"在这里插入图片描述\"><br><img src=\"/../images/8e2de0de-57c3-4630-a0c5-2f4c4c256249.png\" alt=\"在这里插入图片描述\"><br>「正常安装」将安装所有应用程序，包括网络浏览器、办公套件、游戏和媒体播放器。 如果您想要设置完整的桌面，请选择「正常安装」。 如果您只想要最小化的系统，有 Web 浏览器和基本实用程序，请选择「最小安装」。<br><img src=\"/../images/944f87c5-8b8c-4e3b-ac24-3dede2e042a0.png\" alt=\"在这里插入图片描述\"><br><img src=\"/../images/edab931b-a8d1-404f-b964-a0c1800453b4.png\" alt=\"在这里插入图片描述\"><br><img src=\"/../images/2654832d-8b94-48d8-8397-6c2fc84824fa.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"/../images/2089d9a1-92c8-45f9-96f3-4922de92349b.png\" alt=\"在这里插入图片描述\"><br>选择自己的时区<br><img src=\"/../images/e0b8adc1-a10b-4cf0-b498-b6ac67e8cc2d.png\" alt=\"在这里插入图片描述\"><br>输入自己的信息后，选择继续<br><img src=\"/../images/516c9447-96d6-4f42-a7d4-60480c850f40.png\" alt=\"在这里插入图片描述\"><br>此时需要等待系统安装一段时间。<br><img src=\"/../images/eaeb057a-f41b-4583-9274-502197c74e2f.png\" alt=\"在这里插入图片描述\"></p>\n<p>安装完，就可以使用Ubuntu系统啦。</p>\n<p>如果有帮助到你，非常荣幸。</p>\n<p>如果大家有心情的话，鼓励一下我也可以的（我是穷逼大学生）。😁<br><img src=\"/../images/7b6d9d86-100f-445d-aeb1-ffe92391e0f8.png\" alt=\"在这里插入图片描述\"><br><img src=\"/../images/5669700c-382d-4d12-b62d-78d52ba127b0.png\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"首先安装VMware\"><a href=\"#首先安装VMware\" class=\"headerlink\" title=\"首先安装VMware\"></a>首先安装VMware</h5><h5 id=\"其次下载Ubuntu18-04-5的iso磁盘。\"><a href=\"#其次下载Ubuntu18-04-5的iso磁盘。\" class=\"headerlink\" title=\"其次下载Ubuntu18.04.5的iso磁盘。\"></a>其次下载Ubuntu18.04.5的iso磁盘。</h5><p><strong>没有图片的步骤都选择默认的：</strong><br><img src=\"/../images/9df205ad-32fa-438d-b93d-cb5674a54f46.png\" alt=\"在这里插入图片描述\"></p>\n<p>安装完虚拟机之后，编辑虚拟机设置。选择硬件的CD&#x2F;DVD<br><img src=\"/../images/04a0e748-c456-4581-98ff-09200464c9b9.png\" alt=\"在这里插入图片描述\"></p>\n<h5 id=\"开启虚拟机\"><a href=\"#开启虚拟机\" class=\"headerlink\" title=\"开启虚拟机\"></a>开启虚拟机</h5><p><img src=\"/../images/c82716e3-2a00-4b9a-963a-11c0b2710971.png\" alt=\"在这里插入图片描述\"><br><img src=\"/../images/8e2de0de-57c3-4630-a0c5-2f4c4c256249.png\" alt=\"在这里插入图片描述\"><br>「正常安装」将安装所有应用程序，包括网络浏览器、办公套件、游戏和媒体播放器。 如果您想要设置完整的桌面，请选择「正常安装」。 如果您只想要最小化的系统，有 Web 浏览器和基本实用程序，请选择「最小安装」。<br><img src=\"/../images/944f87c5-8b8c-4e3b-ac24-3dede2e042a0.png\" alt=\"在这里插入图片描述\"><br><img src=\"/../images/edab931b-a8d1-404f-b964-a0c1800453b4.png\" alt=\"在这里插入图片描述\"><br><img src=\"/../images/2654832d-8b94-48d8-8397-6c2fc84824fa.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"/../images/2089d9a1-92c8-45f9-96f3-4922de92349b.png\" alt=\"在这里插入图片描述\"><br>选择自己的时区<br><img src=\"/../images/e0b8adc1-a10b-4cf0-b498-b6ac67e8cc2d.png\" alt=\"在这里插入图片描述\"><br>输入自己的信息后，选择继续<br><img src=\"/../images/516c9447-96d6-4f42-a7d4-60480c850f40.png\" alt=\"在这里插入图片描述\"><br>此时需要等待系统安装一段时间。<br><img src=\"/../images/eaeb057a-f41b-4583-9274-502197c74e2f.png\" alt=\"在这里插入图片描述\"></p>\n<p>安装完，就可以使用Ubuntu系统啦。</p>\n<p>如果有帮助到你，非常荣幸。</p>\n<p>如果大家有心情的话，鼓励一下我也可以的（我是穷逼大学生）。😁<br><img src=\"/../images/7b6d9d86-100f-445d-aeb1-ffe92391e0f8.png\" alt=\"在这里插入图片描述\"><br><img src=\"/../images/5669700c-382d-4d12-b62d-78d52ba127b0.png\" alt=\"在这里插入图片描述\"></p>\n"},{"title":"Z字变换（Java实现）Leetcode 6","author":null,"date":"2022-03-28T07:36:03.000Z","_content":"### 题目\n\n将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。\n \n比如输入字符串为 “LEETCODEISHIRING” 行数为 3 时，排列如下：\n \nL C I R\nE T O E S I I G\nE D H N\n \n之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：“LCIRETOESIIGEDHN”。\n \n请你实现这个将字符串进行指定行数变换的函数：\n \nstring convert(string s, int numRows);\n \n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/zigzag-conversionhttps://leetcode-cn.com/problems/zigzag-conversion\n\n### 示例1\n\n输入: s = “LEETCODEISHIRING”, numRows = 3\n输出: “LCIRETOESIIGEDHN”\n\n### 示例2\n\n输入: s = “LEETCODEISHIRING”, numRows = 4\n输出: “LDREOEIIECIHNTSG”\n解释:\nL D R\nE O E I I\nE C I H N\nT S G\n\n### 代码思路\n\n1. 一行或两行可以直接返回\n1. 其余情况先从上往下填满，然后向右上方向填满，重复此步骤\n1. 加起来，toString()\n```js \nclass Solution {\n    public String convert(String s, int numRows) {\n        if(numRows <= 2) {\n            return s;\n    \t}\n        char[][] chs = new char[numRows][s.length()];\n        int row = 0,col = 0;\n        for(int i=0; i<s.length();){\n            while(row < numRows && i<s.length())\n            {\n                chs[row][col] = s.charAt(i++);\n                row++;\n            }\n            row--;\n            while(row >= 1 && i<s.length()) {\n                chs[--row][++col] = s.charAt(i++);\n            }\n            row++;\n        }\n        StringBuilder stringBuilder = new StringBuilder();\n        for(int i=0; i<numRows; i++){\n            for(int j=0; j< chs[0].length; j++){\n            \tif(chs[i][j] != 0) {\n                    stringBuilder.append(chs[i][j]);\n            \t}\n            }\n        }\n        return stringBuilder.toString();\n    }\n}\n```","source":"_posts/Z字变换（Java实现）Leetcode 6.md","raw":"---\ntitle: Z字变换（Java实现）Leetcode 6\nauthor: \ntags: \n       - leetcode\n\ncategory: \n       - 算法\n\ndate: 2022-03-28 15:36:03\n---\n### 题目\n\n将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。\n \n比如输入字符串为 “LEETCODEISHIRING” 行数为 3 时，排列如下：\n \nL C I R\nE T O E S I I G\nE D H N\n \n之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：“LCIRETOESIIGEDHN”。\n \n请你实现这个将字符串进行指定行数变换的函数：\n \nstring convert(string s, int numRows);\n \n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/zigzag-conversionhttps://leetcode-cn.com/problems/zigzag-conversion\n\n### 示例1\n\n输入: s = “LEETCODEISHIRING”, numRows = 3\n输出: “LCIRETOESIIGEDHN”\n\n### 示例2\n\n输入: s = “LEETCODEISHIRING”, numRows = 4\n输出: “LDREOEIIECIHNTSG”\n解释:\nL D R\nE O E I I\nE C I H N\nT S G\n\n### 代码思路\n\n1. 一行或两行可以直接返回\n1. 其余情况先从上往下填满，然后向右上方向填满，重复此步骤\n1. 加起来，toString()\n```js \nclass Solution {\n    public String convert(String s, int numRows) {\n        if(numRows <= 2) {\n            return s;\n    \t}\n        char[][] chs = new char[numRows][s.length()];\n        int row = 0,col = 0;\n        for(int i=0; i<s.length();){\n            while(row < numRows && i<s.length())\n            {\n                chs[row][col] = s.charAt(i++);\n                row++;\n            }\n            row--;\n            while(row >= 1 && i<s.length()) {\n                chs[--row][++col] = s.charAt(i++);\n            }\n            row++;\n        }\n        StringBuilder stringBuilder = new StringBuilder();\n        for(int i=0; i<numRows; i++){\n            for(int j=0; j< chs[0].length; j++){\n            \tif(chs[i][j] != 0) {\n                    stringBuilder.append(chs[i][j]);\n            \t}\n            }\n        }\n        return stringBuilder.toString();\n    }\n}\n```","slug":"Z字变换（Java实现）Leetcode 6","published":1,"updated":"2024-03-15T08:23:51.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clttq59bj0012zwve9kk6hs8b","content":"<h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。</p>\n<p>比如输入字符串为 “LEETCODEISHIRING” 行数为 3 时，排列如下：</p>\n<p>L C I R<br>E T O E S I I G<br>E D H N</p>\n<p>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：“LCIRETOESIIGEDHN”。</p>\n<p>请你实现这个将字符串进行指定行数变换的函数：</p>\n<p>string convert(string s, int numRows);</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/zigzag-conversionhttps://leetcode-cn.com/problems/zigzag-conversion\">https://leetcode-cn.com/problems/zigzag-conversionhttps://leetcode-cn.com/problems/zigzag-conversion</a></p>\n<h3 id=\"示例1\"><a href=\"#示例1\" class=\"headerlink\" title=\"示例1\"></a>示例1</h3><p>输入: s &#x3D; “LEETCODEISHIRING”, numRows &#x3D; 3<br>输出: “LCIRETOESIIGEDHN”</p>\n<h3 id=\"示例2\"><a href=\"#示例2\" class=\"headerlink\" title=\"示例2\"></a>示例2</h3><p>输入: s &#x3D; “LEETCODEISHIRING”, numRows &#x3D; 4<br>输出: “LDREOEIIECIHNTSG”<br>解释:<br>L D R<br>E O E I I<br>E C I H N<br>T S G</p>\n<h3 id=\"代码思路\"><a href=\"#代码思路\" class=\"headerlink\" title=\"代码思路\"></a>代码思路</h3><ol>\n<li>一行或两行可以直接返回</li>\n<li>其余情况先从上往下填满，然后向右上方向填满，重复此步骤</li>\n<li>加起来，toString()<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br>    public <span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">convert</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> s, int numRows</span>) &#123;<br>        <span class=\"hljs-keyword\">if</span>(numRows &lt;= <span class=\"hljs-number\">2</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> s;<br>    \t&#125;<br>        char[][] chs = <span class=\"hljs-keyword\">new</span> char[numRows][s.<span class=\"hljs-title function_\">length</span>()];<br>        int row = <span class=\"hljs-number\">0</span>,col = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span>(int i=<span class=\"hljs-number\">0</span>; i&lt;s.<span class=\"hljs-title function_\">length</span>();)&#123;<br>            <span class=\"hljs-keyword\">while</span>(row &lt; numRows &amp;&amp; i&lt;s.<span class=\"hljs-title function_\">length</span>())<br>            &#123;<br>                chs[row][col] = s.<span class=\"hljs-title function_\">charAt</span>(i++);<br>                row++;<br>            &#125;<br>            row--;<br>            <span class=\"hljs-keyword\">while</span>(row &gt;= <span class=\"hljs-number\">1</span> &amp;&amp; i&lt;s.<span class=\"hljs-title function_\">length</span>()) &#123;<br>                chs[--row][++col] = s.<span class=\"hljs-title function_\">charAt</span>(i++);<br>            &#125;<br>            row++;<br>        &#125;<br>        <span class=\"hljs-title class_\">StringBuilder</span> stringBuilder = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();<br>        <span class=\"hljs-keyword\">for</span>(int i=<span class=\"hljs-number\">0</span>; i&lt;numRows; i++)&#123;<br>            <span class=\"hljs-keyword\">for</span>(int j=<span class=\"hljs-number\">0</span>; j&lt; chs[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">length</span>; j++)&#123;<br>            \t<span class=\"hljs-keyword\">if</span>(chs[i][j] != <span class=\"hljs-number\">0</span>) &#123;<br>                    stringBuilder.<span class=\"hljs-title function_\">append</span>(chs[i][j]);<br>            \t&#125;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> stringBuilder.<span class=\"hljs-title function_\">toString</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。</p>\n<p>比如输入字符串为 “LEETCODEISHIRING” 行数为 3 时，排列如下：</p>\n<p>L C I R<br>E T O E S I I G<br>E D H N</p>\n<p>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：“LCIRETOESIIGEDHN”。</p>\n<p>请你实现这个将字符串进行指定行数变换的函数：</p>\n<p>string convert(string s, int numRows);</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/zigzag-conversionhttps://leetcode-cn.com/problems/zigzag-conversion\">https://leetcode-cn.com/problems/zigzag-conversionhttps://leetcode-cn.com/problems/zigzag-conversion</a></p>\n<h3 id=\"示例1\"><a href=\"#示例1\" class=\"headerlink\" title=\"示例1\"></a>示例1</h3><p>输入: s &#x3D; “LEETCODEISHIRING”, numRows &#x3D; 3<br>输出: “LCIRETOESIIGEDHN”</p>\n<h3 id=\"示例2\"><a href=\"#示例2\" class=\"headerlink\" title=\"示例2\"></a>示例2</h3><p>输入: s &#x3D; “LEETCODEISHIRING”, numRows &#x3D; 4<br>输出: “LDREOEIIECIHNTSG”<br>解释:<br>L D R<br>E O E I I<br>E C I H N<br>T S G</p>\n<h3 id=\"代码思路\"><a href=\"#代码思路\" class=\"headerlink\" title=\"代码思路\"></a>代码思路</h3><ol>\n<li>一行或两行可以直接返回</li>\n<li>其余情况先从上往下填满，然后向右上方向填满，重复此步骤</li>\n<li>加起来，toString()<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br>    public <span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">convert</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> s, int numRows</span>) &#123;<br>        <span class=\"hljs-keyword\">if</span>(numRows &lt;= <span class=\"hljs-number\">2</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> s;<br>    \t&#125;<br>        char[][] chs = <span class=\"hljs-keyword\">new</span> char[numRows][s.<span class=\"hljs-title function_\">length</span>()];<br>        int row = <span class=\"hljs-number\">0</span>,col = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span>(int i=<span class=\"hljs-number\">0</span>; i&lt;s.<span class=\"hljs-title function_\">length</span>();)&#123;<br>            <span class=\"hljs-keyword\">while</span>(row &lt; numRows &amp;&amp; i&lt;s.<span class=\"hljs-title function_\">length</span>())<br>            &#123;<br>                chs[row][col] = s.<span class=\"hljs-title function_\">charAt</span>(i++);<br>                row++;<br>            &#125;<br>            row--;<br>            <span class=\"hljs-keyword\">while</span>(row &gt;= <span class=\"hljs-number\">1</span> &amp;&amp; i&lt;s.<span class=\"hljs-title function_\">length</span>()) &#123;<br>                chs[--row][++col] = s.<span class=\"hljs-title function_\">charAt</span>(i++);<br>            &#125;<br>            row++;<br>        &#125;<br>        <span class=\"hljs-title class_\">StringBuilder</span> stringBuilder = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();<br>        <span class=\"hljs-keyword\">for</span>(int i=<span class=\"hljs-number\">0</span>; i&lt;numRows; i++)&#123;<br>            <span class=\"hljs-keyword\">for</span>(int j=<span class=\"hljs-number\">0</span>; j&lt; chs[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">length</span>; j++)&#123;<br>            \t<span class=\"hljs-keyword\">if</span>(chs[i][j] != <span class=\"hljs-number\">0</span>) &#123;<br>                    stringBuilder.<span class=\"hljs-title function_\">append</span>(chs[i][j]);<br>            \t&#125;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> stringBuilder.<span class=\"hljs-title function_\">toString</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2024-03-16T04:49:10.764Z","updated":"1985-10-26T08:15:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clttq59bk0015zwvedizugu1f","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"mongo的include方法踩坑","author":null,"date":"2023-08-20T16:20:00.000Z","_content":"#### 前言\n\n又是不认识自己代码的一天\n\n### 问题\n\n```js \nQuery query = new Query();\nif(StringUtils.isNotNull(reqVO.getFieldLimitList()) && reqVO.getFieldLimitList().size() > 0){\n    \n\tfor(String filedName : reqVO.getFieldLimitList()){\n    \n\t\tquery.fields().include(filedName);\n\t}\n}\n```\n\n看到 **query.fields().include(filedName);** 这行代码，\n\n**以为效果是**： 如果数据没有这个字段就把这条数据筛掉，加上自己当时写的注释有歧义，所以误解了。\n\n**实际效果是**： include只是对返回的结果集进行了处理，使得只返回结果集的某些字段，并不会减少结果。\n\n如果需要查询时，不返回某字段为空的数据，正确做法是：\n```js \nQuery query = new Query();\nif(StringUtils.isNotNull(reqVO.getFieldLimitList()) && reqVO.getFieldLimitList().size() > 0){\n    \n\tquery.addCriteria(Criteria.where(MongoConsts.fieldName).exists(true));\n}\n```","source":"_posts/mongo的include方法踩坑.md","raw":"---\ntitle: mongo的include方法踩坑\nauthor: \ntags: \n       - mongodb\n\ncategory: \n       - 数据库\n\ndate: 2023-08-21 00:20:00\n---\n#### 前言\n\n又是不认识自己代码的一天\n\n### 问题\n\n```js \nQuery query = new Query();\nif(StringUtils.isNotNull(reqVO.getFieldLimitList()) && reqVO.getFieldLimitList().size() > 0){\n    \n\tfor(String filedName : reqVO.getFieldLimitList()){\n    \n\t\tquery.fields().include(filedName);\n\t}\n}\n```\n\n看到 **query.fields().include(filedName);** 这行代码，\n\n**以为效果是**： 如果数据没有这个字段就把这条数据筛掉，加上自己当时写的注释有歧义，所以误解了。\n\n**实际效果是**： include只是对返回的结果集进行了处理，使得只返回结果集的某些字段，并不会减少结果。\n\n如果需要查询时，不返回某字段为空的数据，正确做法是：\n```js \nQuery query = new Query();\nif(StringUtils.isNotNull(reqVO.getFieldLimitList()) && reqVO.getFieldLimitList().size() > 0){\n    \n\tquery.addCriteria(Criteria.where(MongoConsts.fieldName).exists(true));\n}\n```","slug":"mongo的include方法踩坑","published":1,"updated":"2024-03-15T08:23:24.269Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clttq59bm0018zwve17u92jo7","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>又是不认识自己代码的一天</p>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title class_\">Query</span> query = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Query</span>();<br><span class=\"hljs-keyword\">if</span>(<span class=\"hljs-title class_\">StringUtils</span>.<span class=\"hljs-title function_\">isNotNull</span>(reqVO.<span class=\"hljs-title function_\">getFieldLimitList</span>()) &amp;&amp; reqVO.<span class=\"hljs-title function_\">getFieldLimitList</span>().<span class=\"hljs-title function_\">size</span>() &gt; <span class=\"hljs-number\">0</span>)&#123;<br>    <br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-title class_\">String</span> filedName : reqVO.<span class=\"hljs-title function_\">getFieldLimitList</span>())&#123;<br>    <br>\t\tquery.<span class=\"hljs-title function_\">fields</span>().<span class=\"hljs-title function_\">include</span>(filedName);<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>看到 <strong>query.fields().include(filedName);</strong> 这行代码，</p>\n<p><strong>以为效果是</strong>： 如果数据没有这个字段就把这条数据筛掉，加上自己当时写的注释有歧义，所以误解了。</p>\n<p><strong>实际效果是</strong>： include只是对返回的结果集进行了处理，使得只返回结果集的某些字段，并不会减少结果。</p>\n<p>如果需要查询时，不返回某字段为空的数据，正确做法是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title class_\">Query</span> query = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Query</span>();<br><span class=\"hljs-keyword\">if</span>(<span class=\"hljs-title class_\">StringUtils</span>.<span class=\"hljs-title function_\">isNotNull</span>(reqVO.<span class=\"hljs-title function_\">getFieldLimitList</span>()) &amp;&amp; reqVO.<span class=\"hljs-title function_\">getFieldLimitList</span>().<span class=\"hljs-title function_\">size</span>() &gt; <span class=\"hljs-number\">0</span>)&#123;<br>    <br>\tquery.<span class=\"hljs-title function_\">addCriteria</span>(<span class=\"hljs-title class_\">Criteria</span>.<span class=\"hljs-title function_\">where</span>(<span class=\"hljs-title class_\">MongoConsts</span>.<span class=\"hljs-property\">fieldName</span>).<span class=\"hljs-title function_\">exists</span>(<span class=\"hljs-literal\">true</span>));<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>又是不认识自己代码的一天</p>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title class_\">Query</span> query = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Query</span>();<br><span class=\"hljs-keyword\">if</span>(<span class=\"hljs-title class_\">StringUtils</span>.<span class=\"hljs-title function_\">isNotNull</span>(reqVO.<span class=\"hljs-title function_\">getFieldLimitList</span>()) &amp;&amp; reqVO.<span class=\"hljs-title function_\">getFieldLimitList</span>().<span class=\"hljs-title function_\">size</span>() &gt; <span class=\"hljs-number\">0</span>)&#123;<br>    <br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-title class_\">String</span> filedName : reqVO.<span class=\"hljs-title function_\">getFieldLimitList</span>())&#123;<br>    <br>\t\tquery.<span class=\"hljs-title function_\">fields</span>().<span class=\"hljs-title function_\">include</span>(filedName);<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>看到 <strong>query.fields().include(filedName);</strong> 这行代码，</p>\n<p><strong>以为效果是</strong>： 如果数据没有这个字段就把这条数据筛掉，加上自己当时写的注释有歧义，所以误解了。</p>\n<p><strong>实际效果是</strong>： include只是对返回的结果集进行了处理，使得只返回结果集的某些字段，并不会减少结果。</p>\n<p>如果需要查询时，不返回某字段为空的数据，正确做法是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title class_\">Query</span> query = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Query</span>();<br><span class=\"hljs-keyword\">if</span>(<span class=\"hljs-title class_\">StringUtils</span>.<span class=\"hljs-title function_\">isNotNull</span>(reqVO.<span class=\"hljs-title function_\">getFieldLimitList</span>()) &amp;&amp; reqVO.<span class=\"hljs-title function_\">getFieldLimitList</span>().<span class=\"hljs-title function_\">size</span>() &gt; <span class=\"hljs-number\">0</span>)&#123;<br>    <br>\tquery.<span class=\"hljs-title function_\">addCriteria</span>(<span class=\"hljs-title class_\">Criteria</span>.<span class=\"hljs-title function_\">where</span>(<span class=\"hljs-title class_\">MongoConsts</span>.<span class=\"hljs-property\">fieldName</span>).<span class=\"hljs-title function_\">exists</span>(<span class=\"hljs-literal\">true</span>));<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"python爬取51job的招聘信息","author":null,"date":"2020-04-29T07:55:07.000Z","_content":"**前言**\n最近的脚本课程有了新的作业。爬取51job上的一些招聘信息，包括城市 薪资最大最小值等。\n\n这里示例的是 济南、北京、上海、广州、深圳的招聘信息\n**求助**\n薪资有些招聘信息并没有填写，也就是说薪资所在标签的值为空值，这些空值无法在集合中占位，进而导致薪资和招聘信息不匹配，如果有大佬会，能不能指点一下啊 ，555 -.-||\n\n招聘信息包括\n职位 公司 工作地点 薪水 发布时间 最低薪资 最高薪资 \n```js \nfrom lxml import etree\nimport requests\nimport xlwt\nimport string\n#workbook = xlwt.Workbook(encoding='utf-8')#创建 workbook 即新建 excel 文件/工作簿，\nmyxls = xlwt.Workbook()\n#worksheet = workbook.add_sheet('my_worksheet') #创建工作表，如果想创建多个工作表，直接在后面再 add_sheet\nsheet1 = myxls.add_sheet(u'top250', cell_overwrite_ok=True)\n\n#请求头\nHEADERS = {\n    \n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36',\n}\n\nbase_urls = 'https://search.51job.com/list/120200%252C010000%252C020000%252C030200%252C040000,000000,0000,00,9,99,python,2,{}.html'\nfor x in range(1,51):\n    url = base_urls.format(x)\n    print('第%s页爬取完成' % x)\n    response = requests.get(url,HEADERS)\n    text = response.content.decode('gbk')\n    tree = etree.HTML(text)\n\n    PositionAndCompany = tree.xpath(\"//div[@class='el']//span/a/@title\")\n    positions = PositionAndCompany[::2]\n    companys = PositionAndCompany[1::2]\n    workplaces = tree.xpath('//div[@class=\"el\"]//span[@class=\"t3\"]/text()')\n    salarys = tree.xpath('//div[@class=\"el\"]/span[@class=\"t4\"]/text()')\n    times = tree.xpath('//div[@class=\"el\"]/span[@class=\"t5\"]/text()')\n    sheet1.write(0,1,\"职位\")\n    sheet1.write(0, 5, \"公司\")\n    sheet1.write(0, 8, \"工作地方\")\n    sheet1.write(0, 10, \"薪水\")\n    sheet1.write(0, 12, \"时间\")\n    sheet1.write(0,14,\"最低薪水\")\n    sheet1.write(0, 16, \"最高薪水\")\n    for i in range(1,len(salarys)):\n        pos = positions[i].replace(\" \", \"\").replace(\"\\t\", \"\").replace(\"\\n\", \"\")\n        sheet1.write((x-1)*50 + i, 1, pos)\n        com = companys[i]\n        sheet1.write((x-1)*50 +i, 5, com)\n        workplace = workplaces[i]\n        sheet1.write((x-1)*50 +i, 8, workplace)\n        salary = salarys[i]\n        sheet1.write((x-1)*50 +i, 10, salary)\n        time = times[i]\n        sheet1.write((x-1)*50 +i,12,time)\n        peace = salary.split('-')\n        #将数值与单位分离\n        if(len(peace)> 1):\n            peace[0] = float(peace[0])\n            #unit 是薪资的单位\n            unit = peace[1].replace(\"0\",\"\").replace(\"1\",\"\").replace(\"2\",\"\").replace(\"3\",\"\").replace(\"4\",\"\").replace(\"5\",\"\").replace(\"6\",\"\").replace(\"7\",\"\").replace(\"8\",\"\").replace(\"8\",\"\").replace(\"9\",\"\").replace(\".\",\"\")\n            data1 = peace[1].replace(\"元\",\"\").replace(\"千\", \"\").replace(\"万\", \"\").replace(\"/\", \"\").replace(\"小时\",\"\").replace(\"天\",\"\").replace(\"月\", \"\").replace(\"年\",\"\").replace(\"以上\",\"\")\n            num = float(data1)\n            #这里是将薪资的单位统一为 万/月\n            if (unit == \"元/小时\"):\n                salary_1 = str(round((data2 * 24 * 30 / 10000),2))\n                salary_2 = str(round((num * 24 * 30 / 10000),2))\n            elif (unit == \"元/天\"):\n                salary_1 = str(round((peace[0] * 30 / 10000),2))\n                salary_2 = str(round((num *30 / 10000),2))\n            elif(unit == \"千/月\"):\n                salary_1 = str(round((peace[0]/10),2))\n                salary_2 = str(round((num/10),2))\n            elif (unit == \"万/年\"):\n                salary_1 = str(round((peace[0] / 12),2))\n                salary_2 = str(round((num / 12),2))\n            else:\n                salary_1 = str(peace[0])\n                salary_2 = str(num)\n            sheet1.write((x - 1) * 50 + i, 14, salary_1 + \"万/月\")\n            sheet1.write((x - 1) * 50 + i, 16, salary_2 + \"万/月\")\n        else:\n            #unit 是薪资的单位\n            unit = peace[0].replace(\"0\", \"\").replace(\"1\", \"\").replace(\"2\", \"\").replace(\"3\", \"\").replace(\"4\",\"\").replace(\"5\", \"\").replace(\"6\", \"\").replace(\"7\", \"\").replace(\"8\", \"\").replace(\"8\", \"\").replace(\"9\", \"\").replace(\".\", \"\")\n            data2 = peace[0].replace(\"元\",\"\").replace(\"千\", \"\").replace(\"万\", \"\").replace(\"/\", \"\").replace(\"小时\",\"\").replace(\"天\",\"\").replace(\"月\", \"\").replace(\"年\",\"\").replace(\"以上\",\"\")\n            num = float(data2)\n            if (unit == \"元/小时\"):\n                salary_3 = str(round((num * 24 * 30 / 10000),2))\n\n            elif(unit == \"元/天\"):\n                salary_3 = str(round(num * 30 / 10000))\n\n            elif (unit == \"千/月\"):\n                salary_3 = str(round(num/10))\n\n            elif(unit == \"万/年\" or unit == \"万以上/年\"):\n                salary_3 = str(round(num / 12))\n\n            elif (unit == \"万/月\"):\n                salary_3 = str(num)\n\t\t\t#如果提供的单位不是这几个中的一个，输出标记可自行查看！哈哈哈哈\n            else:\n                print(\"我也没辙了\")\n            sheet1.write((x - 1) * 50 + i, 14, salary_3 + \"万/月\")\n            sheet1.write((x - 1) * 50 + i, 16, salary_3 + \"万/月\")\n\n        #print(len(pos),len(com),len(workplace),len(salary),len(time))\n    myxls.save('爬取结果.xls')\n```","source":"_posts/python爬取51job的招聘信息.md","raw":"---\ntitle: python爬取51job的招聘信息\nauthor: \ntags: \n       - python\n\ncategory: \n       - 其它\n\ndate: 2020-04-29 15:55:07\n---\n**前言**\n最近的脚本课程有了新的作业。爬取51job上的一些招聘信息，包括城市 薪资最大最小值等。\n\n这里示例的是 济南、北京、上海、广州、深圳的招聘信息\n**求助**\n薪资有些招聘信息并没有填写，也就是说薪资所在标签的值为空值，这些空值无法在集合中占位，进而导致薪资和招聘信息不匹配，如果有大佬会，能不能指点一下啊 ，555 -.-||\n\n招聘信息包括\n职位 公司 工作地点 薪水 发布时间 最低薪资 最高薪资 \n```js \nfrom lxml import etree\nimport requests\nimport xlwt\nimport string\n#workbook = xlwt.Workbook(encoding='utf-8')#创建 workbook 即新建 excel 文件/工作簿，\nmyxls = xlwt.Workbook()\n#worksheet = workbook.add_sheet('my_worksheet') #创建工作表，如果想创建多个工作表，直接在后面再 add_sheet\nsheet1 = myxls.add_sheet(u'top250', cell_overwrite_ok=True)\n\n#请求头\nHEADERS = {\n    \n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36',\n}\n\nbase_urls = 'https://search.51job.com/list/120200%252C010000%252C020000%252C030200%252C040000,000000,0000,00,9,99,python,2,{}.html'\nfor x in range(1,51):\n    url = base_urls.format(x)\n    print('第%s页爬取完成' % x)\n    response = requests.get(url,HEADERS)\n    text = response.content.decode('gbk')\n    tree = etree.HTML(text)\n\n    PositionAndCompany = tree.xpath(\"//div[@class='el']//span/a/@title\")\n    positions = PositionAndCompany[::2]\n    companys = PositionAndCompany[1::2]\n    workplaces = tree.xpath('//div[@class=\"el\"]//span[@class=\"t3\"]/text()')\n    salarys = tree.xpath('//div[@class=\"el\"]/span[@class=\"t4\"]/text()')\n    times = tree.xpath('//div[@class=\"el\"]/span[@class=\"t5\"]/text()')\n    sheet1.write(0,1,\"职位\")\n    sheet1.write(0, 5, \"公司\")\n    sheet1.write(0, 8, \"工作地方\")\n    sheet1.write(0, 10, \"薪水\")\n    sheet1.write(0, 12, \"时间\")\n    sheet1.write(0,14,\"最低薪水\")\n    sheet1.write(0, 16, \"最高薪水\")\n    for i in range(1,len(salarys)):\n        pos = positions[i].replace(\" \", \"\").replace(\"\\t\", \"\").replace(\"\\n\", \"\")\n        sheet1.write((x-1)*50 + i, 1, pos)\n        com = companys[i]\n        sheet1.write((x-1)*50 +i, 5, com)\n        workplace = workplaces[i]\n        sheet1.write((x-1)*50 +i, 8, workplace)\n        salary = salarys[i]\n        sheet1.write((x-1)*50 +i, 10, salary)\n        time = times[i]\n        sheet1.write((x-1)*50 +i,12,time)\n        peace = salary.split('-')\n        #将数值与单位分离\n        if(len(peace)> 1):\n            peace[0] = float(peace[0])\n            #unit 是薪资的单位\n            unit = peace[1].replace(\"0\",\"\").replace(\"1\",\"\").replace(\"2\",\"\").replace(\"3\",\"\").replace(\"4\",\"\").replace(\"5\",\"\").replace(\"6\",\"\").replace(\"7\",\"\").replace(\"8\",\"\").replace(\"8\",\"\").replace(\"9\",\"\").replace(\".\",\"\")\n            data1 = peace[1].replace(\"元\",\"\").replace(\"千\", \"\").replace(\"万\", \"\").replace(\"/\", \"\").replace(\"小时\",\"\").replace(\"天\",\"\").replace(\"月\", \"\").replace(\"年\",\"\").replace(\"以上\",\"\")\n            num = float(data1)\n            #这里是将薪资的单位统一为 万/月\n            if (unit == \"元/小时\"):\n                salary_1 = str(round((data2 * 24 * 30 / 10000),2))\n                salary_2 = str(round((num * 24 * 30 / 10000),2))\n            elif (unit == \"元/天\"):\n                salary_1 = str(round((peace[0] * 30 / 10000),2))\n                salary_2 = str(round((num *30 / 10000),2))\n            elif(unit == \"千/月\"):\n                salary_1 = str(round((peace[0]/10),2))\n                salary_2 = str(round((num/10),2))\n            elif (unit == \"万/年\"):\n                salary_1 = str(round((peace[0] / 12),2))\n                salary_2 = str(round((num / 12),2))\n            else:\n                salary_1 = str(peace[0])\n                salary_2 = str(num)\n            sheet1.write((x - 1) * 50 + i, 14, salary_1 + \"万/月\")\n            sheet1.write((x - 1) * 50 + i, 16, salary_2 + \"万/月\")\n        else:\n            #unit 是薪资的单位\n            unit = peace[0].replace(\"0\", \"\").replace(\"1\", \"\").replace(\"2\", \"\").replace(\"3\", \"\").replace(\"4\",\"\").replace(\"5\", \"\").replace(\"6\", \"\").replace(\"7\", \"\").replace(\"8\", \"\").replace(\"8\", \"\").replace(\"9\", \"\").replace(\".\", \"\")\n            data2 = peace[0].replace(\"元\",\"\").replace(\"千\", \"\").replace(\"万\", \"\").replace(\"/\", \"\").replace(\"小时\",\"\").replace(\"天\",\"\").replace(\"月\", \"\").replace(\"年\",\"\").replace(\"以上\",\"\")\n            num = float(data2)\n            if (unit == \"元/小时\"):\n                salary_3 = str(round((num * 24 * 30 / 10000),2))\n\n            elif(unit == \"元/天\"):\n                salary_3 = str(round(num * 30 / 10000))\n\n            elif (unit == \"千/月\"):\n                salary_3 = str(round(num/10))\n\n            elif(unit == \"万/年\" or unit == \"万以上/年\"):\n                salary_3 = str(round(num / 12))\n\n            elif (unit == \"万/月\"):\n                salary_3 = str(num)\n\t\t\t#如果提供的单位不是这几个中的一个，输出标记可自行查看！哈哈哈哈\n            else:\n                print(\"我也没辙了\")\n            sheet1.write((x - 1) * 50 + i, 14, salary_3 + \"万/月\")\n            sheet1.write((x - 1) * 50 + i, 16, salary_3 + \"万/月\")\n\n        #print(len(pos),len(com),len(workplace),len(salary),len(time))\n    myxls.save('爬取结果.xls')\n```","slug":"python爬取51job的招聘信息","published":1,"updated":"2024-03-15T08:23:57.909Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clttq59bn001czwve19o16xj3","content":"<p><strong>前言</strong><br>最近的脚本课程有了新的作业。爬取51job上的一些招聘信息，包括城市 薪资最大最小值等。</p>\n<p>这里示例的是 济南、北京、上海、广州、深圳的招聘信息<br><strong>求助</strong><br>薪资有些招聘信息并没有填写，也就是说薪资所在标签的值为空值，这些空值无法在集合中占位，进而导致薪资和招聘信息不匹配，如果有大佬会，能不能指点一下啊 ，555 -.-||</p>\n<p>招聘信息包括<br>职位 公司 工作地点 薪水 发布时间 最低薪资 最高薪资 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">from</span> lxml <span class=\"hljs-keyword\">import</span> etree<br><span class=\"hljs-keyword\">import</span> requests<br><span class=\"hljs-keyword\">import</span> xlwt<br><span class=\"hljs-keyword\">import</span> string<br>#workbook = xlwt.<span class=\"hljs-title class_\">Workbook</span>(encoding=<span class=\"hljs-string\">&#x27;utf-8&#x27;</span>)#创建 workbook 即新建 excel 文件/工作簿，<br>myxls = xlwt.<span class=\"hljs-title class_\">Workbook</span>()<br>#worksheet = workbook.<span class=\"hljs-title function_\">add_sheet</span>(<span class=\"hljs-string\">&#x27;my_worksheet&#x27;</span>) #创建工作表，如果想创建多个工作表，直接在后面再 add_sheet<br>sheet1 = myxls.<span class=\"hljs-title function_\">add_sheet</span>(u<span class=\"hljs-string\">&#x27;top250&#x27;</span>, cell_overwrite_ok=<span class=\"hljs-title class_\">True</span>)<br><br>#请求头<br><span class=\"hljs-variable constant_\">HEADERS</span> = &#123;<br>    <br>    <span class=\"hljs-string\">&#x27;User-Agent&#x27;</span>: <span class=\"hljs-string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#x27;</span>,<br>&#125;<br><br>base_urls = <span class=\"hljs-string\">&#x27;https://search.51job.com/list/120200%252C010000%252C020000%252C030200%252C040000,000000,0000,00,9,99,python,2,&#123;&#125;.html&#x27;</span><br><span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_\">range</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">51</span>):<br>    url = base_urls.<span class=\"hljs-title function_\">format</span>(x)<br>    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&#x27;第%s页爬取完成&#x27;</span> % x)<br>    response = requests.<span class=\"hljs-title function_\">get</span>(url,<span class=\"hljs-variable constant_\">HEADERS</span>)<br>    text = response.<span class=\"hljs-property\">content</span>.<span class=\"hljs-title function_\">decode</span>(<span class=\"hljs-string\">&#x27;gbk&#x27;</span>)<br>    tree = etree.<span class=\"hljs-title function_\">HTML</span>(text)<br><br>    <span class=\"hljs-title class_\">PositionAndCompany</span> = tree.<span class=\"hljs-title function_\">xpath</span>(<span class=\"hljs-string\">&quot;//div[@class=&#x27;el&#x27;]//span/a/@title&quot;</span>)<br>    positions = <span class=\"hljs-title class_\">PositionAndCompany</span>[::<span class=\"hljs-number\">2</span>]<br>    companys = <span class=\"hljs-title class_\">PositionAndCompany</span>[<span class=\"hljs-number\">1</span>::<span class=\"hljs-number\">2</span>]<br>    workplaces = tree.<span class=\"hljs-title function_\">xpath</span>(<span class=\"hljs-string\">&#x27;//div[@class=&quot;el&quot;]//span[@class=&quot;t3&quot;]/text()&#x27;</span>)<br>    salarys = tree.<span class=\"hljs-title function_\">xpath</span>(<span class=\"hljs-string\">&#x27;//div[@class=&quot;el&quot;]/span[@class=&quot;t4&quot;]/text()&#x27;</span>)<br>    times = tree.<span class=\"hljs-title function_\">xpath</span>(<span class=\"hljs-string\">&#x27;//div[@class=&quot;el&quot;]/span[@class=&quot;t5&quot;]/text()&#x27;</span>)<br>    sheet1.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">&quot;职位&quot;</span>)<br>    sheet1.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-string\">&quot;公司&quot;</span>)<br>    sheet1.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-string\">&quot;工作地方&quot;</span>)<br>    sheet1.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">&quot;薪水&quot;</span>)<br>    sheet1.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-string\">&quot;时间&quot;</span>)<br>    sheet1.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">14</span>,<span class=\"hljs-string\">&quot;最低薪水&quot;</span>)<br>    sheet1.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-string\">&quot;最高薪水&quot;</span>)<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_\">range</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-title function_\">len</span>(salarys)):<br>        pos = positions[i].<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot; &quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;\\t&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>)<br>        sheet1.<span class=\"hljs-title function_\">write</span>((x-<span class=\"hljs-number\">1</span>)*<span class=\"hljs-number\">50</span> + i, <span class=\"hljs-number\">1</span>, pos)<br>        com = companys[i]<br>        sheet1.<span class=\"hljs-title function_\">write</span>((x-<span class=\"hljs-number\">1</span>)*<span class=\"hljs-number\">50</span> +i, <span class=\"hljs-number\">5</span>, com)<br>        workplace = workplaces[i]<br>        sheet1.<span class=\"hljs-title function_\">write</span>((x-<span class=\"hljs-number\">1</span>)*<span class=\"hljs-number\">50</span> +i, <span class=\"hljs-number\">8</span>, workplace)<br>        salary = salarys[i]<br>        sheet1.<span class=\"hljs-title function_\">write</span>((x-<span class=\"hljs-number\">1</span>)*<span class=\"hljs-number\">50</span> +i, <span class=\"hljs-number\">10</span>, salary)<br>        time = times[i]<br>        sheet1.<span class=\"hljs-title function_\">write</span>((x-<span class=\"hljs-number\">1</span>)*<span class=\"hljs-number\">50</span> +i,<span class=\"hljs-number\">12</span>,time)<br>        peace = salary.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27;-&#x27;</span>)<br>        #将数值与单位分离<br>        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-title function_\">len</span>(peace)&gt; <span class=\"hljs-number\">1</span>):<br>            peace[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-title function_\">float</span>(peace[<span class=\"hljs-number\">0</span>])<br>            #unit 是薪资的单位<br>            unit = peace[<span class=\"hljs-number\">1</span>].<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;0&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;1&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;2&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;3&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;4&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;5&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;6&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;7&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;8&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;8&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;9&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;.&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>)<br>            data1 = peace[<span class=\"hljs-number\">1</span>].<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;元&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;千&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;万&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;/&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;小时&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;天&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;月&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;年&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;以上&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>)<br>            num = <span class=\"hljs-title function_\">float</span>(data1)<br>            #这里是将薪资的单位统一为 万/月<br>            <span class=\"hljs-keyword\">if</span> (unit == <span class=\"hljs-string\">&quot;元/小时&quot;</span>):<br>                salary_1 = <span class=\"hljs-title function_\">str</span>(<span class=\"hljs-title function_\">round</span>((data2 * <span class=\"hljs-number\">24</span> * <span class=\"hljs-number\">30</span> / <span class=\"hljs-number\">10000</span>),<span class=\"hljs-number\">2</span>))<br>                salary_2 = <span class=\"hljs-title function_\">str</span>(<span class=\"hljs-title function_\">round</span>((num * <span class=\"hljs-number\">24</span> * <span class=\"hljs-number\">30</span> / <span class=\"hljs-number\">10000</span>),<span class=\"hljs-number\">2</span>))<br>            elif (unit == <span class=\"hljs-string\">&quot;元/天&quot;</span>):<br>                salary_1 = <span class=\"hljs-title function_\">str</span>(<span class=\"hljs-title function_\">round</span>((peace[<span class=\"hljs-number\">0</span>] * <span class=\"hljs-number\">30</span> / <span class=\"hljs-number\">10000</span>),<span class=\"hljs-number\">2</span>))<br>                salary_2 = <span class=\"hljs-title function_\">str</span>(<span class=\"hljs-title function_\">round</span>((num *<span class=\"hljs-number\">30</span> / <span class=\"hljs-number\">10000</span>),<span class=\"hljs-number\">2</span>))<br>            <span class=\"hljs-title function_\">elif</span>(unit == <span class=\"hljs-string\">&quot;千/月&quot;</span>):<br>                salary_1 = <span class=\"hljs-title function_\">str</span>(<span class=\"hljs-title function_\">round</span>((peace[<span class=\"hljs-number\">0</span>]/<span class=\"hljs-number\">10</span>),<span class=\"hljs-number\">2</span>))<br>                salary_2 = <span class=\"hljs-title function_\">str</span>(<span class=\"hljs-title function_\">round</span>((num/<span class=\"hljs-number\">10</span>),<span class=\"hljs-number\">2</span>))<br>            elif (unit == <span class=\"hljs-string\">&quot;万/年&quot;</span>):<br>                salary_1 = <span class=\"hljs-title function_\">str</span>(<span class=\"hljs-title function_\">round</span>((peace[<span class=\"hljs-number\">0</span>] / <span class=\"hljs-number\">12</span>),<span class=\"hljs-number\">2</span>))<br>                salary_2 = <span class=\"hljs-title function_\">str</span>(<span class=\"hljs-title function_\">round</span>((num / <span class=\"hljs-number\">12</span>),<span class=\"hljs-number\">2</span>))<br>            <span class=\"hljs-attr\">else</span>:<br>                salary_1 = <span class=\"hljs-title function_\">str</span>(peace[<span class=\"hljs-number\">0</span>])<br>                salary_2 = <span class=\"hljs-title function_\">str</span>(num)<br>            sheet1.<span class=\"hljs-title function_\">write</span>((x - <span class=\"hljs-number\">1</span>) * <span class=\"hljs-number\">50</span> + i, <span class=\"hljs-number\">14</span>, salary_1 + <span class=\"hljs-string\">&quot;万/月&quot;</span>)<br>            sheet1.<span class=\"hljs-title function_\">write</span>((x - <span class=\"hljs-number\">1</span>) * <span class=\"hljs-number\">50</span> + i, <span class=\"hljs-number\">16</span>, salary_2 + <span class=\"hljs-string\">&quot;万/月&quot;</span>)<br>        <span class=\"hljs-attr\">else</span>:<br>            #unit 是薪资的单位<br>            unit = peace[<span class=\"hljs-number\">0</span>].<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;0&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;1&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;2&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;3&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;4&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;5&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;6&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;7&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;8&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;8&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;9&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;.&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>)<br>            data2 = peace[<span class=\"hljs-number\">0</span>].<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;元&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;千&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;万&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;/&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;小时&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;天&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;月&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;年&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;以上&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>)<br>            num = <span class=\"hljs-title function_\">float</span>(data2)<br>            <span class=\"hljs-keyword\">if</span> (unit == <span class=\"hljs-string\">&quot;元/小时&quot;</span>):<br>                salary_3 = <span class=\"hljs-title function_\">str</span>(<span class=\"hljs-title function_\">round</span>((num * <span class=\"hljs-number\">24</span> * <span class=\"hljs-number\">30</span> / <span class=\"hljs-number\">10000</span>),<span class=\"hljs-number\">2</span>))<br><br>            <span class=\"hljs-title function_\">elif</span>(unit == <span class=\"hljs-string\">&quot;元/天&quot;</span>):<br>                salary_3 = <span class=\"hljs-title function_\">str</span>(<span class=\"hljs-title function_\">round</span>(num * <span class=\"hljs-number\">30</span> / <span class=\"hljs-number\">10000</span>))<br><br>            elif (unit == <span class=\"hljs-string\">&quot;千/月&quot;</span>):<br>                salary_3 = <span class=\"hljs-title function_\">str</span>(<span class=\"hljs-title function_\">round</span>(num/<span class=\"hljs-number\">10</span>))<br><br>            <span class=\"hljs-title function_\">elif</span>(unit == <span class=\"hljs-string\">&quot;万/年&quot;</span> or unit == <span class=\"hljs-string\">&quot;万以上/年&quot;</span>):<br>                salary_3 = <span class=\"hljs-title function_\">str</span>(<span class=\"hljs-title function_\">round</span>(num / <span class=\"hljs-number\">12</span>))<br><br>            elif (unit == <span class=\"hljs-string\">&quot;万/月&quot;</span>):<br>                salary_3 = <span class=\"hljs-title function_\">str</span>(num)<br>\t\t\t#如果提供的单位不是这几个中的一个，输出标记可自行查看！哈哈哈哈<br>            <span class=\"hljs-attr\">else</span>:<br>                <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;我也没辙了&quot;</span>)<br>            sheet1.<span class=\"hljs-title function_\">write</span>((x - <span class=\"hljs-number\">1</span>) * <span class=\"hljs-number\">50</span> + i, <span class=\"hljs-number\">14</span>, salary_3 + <span class=\"hljs-string\">&quot;万/月&quot;</span>)<br>            sheet1.<span class=\"hljs-title function_\">write</span>((x - <span class=\"hljs-number\">1</span>) * <span class=\"hljs-number\">50</span> + i, <span class=\"hljs-number\">16</span>, salary_3 + <span class=\"hljs-string\">&quot;万/月&quot;</span>)<br><br>        #<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">len</span>(pos),<span class=\"hljs-title function_\">len</span>(com),<span class=\"hljs-title function_\">len</span>(workplace),<span class=\"hljs-title function_\">len</span>(salary),<span class=\"hljs-title function_\">len</span>(time))<br>    myxls.<span class=\"hljs-title function_\">save</span>(<span class=\"hljs-string\">&#x27;爬取结果.xls&#x27;</span>)<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><strong>前言</strong><br>最近的脚本课程有了新的作业。爬取51job上的一些招聘信息，包括城市 薪资最大最小值等。</p>\n<p>这里示例的是 济南、北京、上海、广州、深圳的招聘信息<br><strong>求助</strong><br>薪资有些招聘信息并没有填写，也就是说薪资所在标签的值为空值，这些空值无法在集合中占位，进而导致薪资和招聘信息不匹配，如果有大佬会，能不能指点一下啊 ，555 -.-||</p>\n<p>招聘信息包括<br>职位 公司 工作地点 薪水 发布时间 最低薪资 最高薪资 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">from</span> lxml <span class=\"hljs-keyword\">import</span> etree<br><span class=\"hljs-keyword\">import</span> requests<br><span class=\"hljs-keyword\">import</span> xlwt<br><span class=\"hljs-keyword\">import</span> string<br>#workbook = xlwt.<span class=\"hljs-title class_\">Workbook</span>(encoding=<span class=\"hljs-string\">&#x27;utf-8&#x27;</span>)#创建 workbook 即新建 excel 文件/工作簿，<br>myxls = xlwt.<span class=\"hljs-title class_\">Workbook</span>()<br>#worksheet = workbook.<span class=\"hljs-title function_\">add_sheet</span>(<span class=\"hljs-string\">&#x27;my_worksheet&#x27;</span>) #创建工作表，如果想创建多个工作表，直接在后面再 add_sheet<br>sheet1 = myxls.<span class=\"hljs-title function_\">add_sheet</span>(u<span class=\"hljs-string\">&#x27;top250&#x27;</span>, cell_overwrite_ok=<span class=\"hljs-title class_\">True</span>)<br><br>#请求头<br><span class=\"hljs-variable constant_\">HEADERS</span> = &#123;<br>    <br>    <span class=\"hljs-string\">&#x27;User-Agent&#x27;</span>: <span class=\"hljs-string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#x27;</span>,<br>&#125;<br><br>base_urls = <span class=\"hljs-string\">&#x27;https://search.51job.com/list/120200%252C010000%252C020000%252C030200%252C040000,000000,0000,00,9,99,python,2,&#123;&#125;.html&#x27;</span><br><span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_\">range</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">51</span>):<br>    url = base_urls.<span class=\"hljs-title function_\">format</span>(x)<br>    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&#x27;第%s页爬取完成&#x27;</span> % x)<br>    response = requests.<span class=\"hljs-title function_\">get</span>(url,<span class=\"hljs-variable constant_\">HEADERS</span>)<br>    text = response.<span class=\"hljs-property\">content</span>.<span class=\"hljs-title function_\">decode</span>(<span class=\"hljs-string\">&#x27;gbk&#x27;</span>)<br>    tree = etree.<span class=\"hljs-title function_\">HTML</span>(text)<br><br>    <span class=\"hljs-title class_\">PositionAndCompany</span> = tree.<span class=\"hljs-title function_\">xpath</span>(<span class=\"hljs-string\">&quot;//div[@class=&#x27;el&#x27;]//span/a/@title&quot;</span>)<br>    positions = <span class=\"hljs-title class_\">PositionAndCompany</span>[::<span class=\"hljs-number\">2</span>]<br>    companys = <span class=\"hljs-title class_\">PositionAndCompany</span>[<span class=\"hljs-number\">1</span>::<span class=\"hljs-number\">2</span>]<br>    workplaces = tree.<span class=\"hljs-title function_\">xpath</span>(<span class=\"hljs-string\">&#x27;//div[@class=&quot;el&quot;]//span[@class=&quot;t3&quot;]/text()&#x27;</span>)<br>    salarys = tree.<span class=\"hljs-title function_\">xpath</span>(<span class=\"hljs-string\">&#x27;//div[@class=&quot;el&quot;]/span[@class=&quot;t4&quot;]/text()&#x27;</span>)<br>    times = tree.<span class=\"hljs-title function_\">xpath</span>(<span class=\"hljs-string\">&#x27;//div[@class=&quot;el&quot;]/span[@class=&quot;t5&quot;]/text()&#x27;</span>)<br>    sheet1.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">&quot;职位&quot;</span>)<br>    sheet1.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-string\">&quot;公司&quot;</span>)<br>    sheet1.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-string\">&quot;工作地方&quot;</span>)<br>    sheet1.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">&quot;薪水&quot;</span>)<br>    sheet1.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-string\">&quot;时间&quot;</span>)<br>    sheet1.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">14</span>,<span class=\"hljs-string\">&quot;最低薪水&quot;</span>)<br>    sheet1.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-string\">&quot;最高薪水&quot;</span>)<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_\">range</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-title function_\">len</span>(salarys)):<br>        pos = positions[i].<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot; &quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;\\t&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>)<br>        sheet1.<span class=\"hljs-title function_\">write</span>((x-<span class=\"hljs-number\">1</span>)*<span class=\"hljs-number\">50</span> + i, <span class=\"hljs-number\">1</span>, pos)<br>        com = companys[i]<br>        sheet1.<span class=\"hljs-title function_\">write</span>((x-<span class=\"hljs-number\">1</span>)*<span class=\"hljs-number\">50</span> +i, <span class=\"hljs-number\">5</span>, com)<br>        workplace = workplaces[i]<br>        sheet1.<span class=\"hljs-title function_\">write</span>((x-<span class=\"hljs-number\">1</span>)*<span class=\"hljs-number\">50</span> +i, <span class=\"hljs-number\">8</span>, workplace)<br>        salary = salarys[i]<br>        sheet1.<span class=\"hljs-title function_\">write</span>((x-<span class=\"hljs-number\">1</span>)*<span class=\"hljs-number\">50</span> +i, <span class=\"hljs-number\">10</span>, salary)<br>        time = times[i]<br>        sheet1.<span class=\"hljs-title function_\">write</span>((x-<span class=\"hljs-number\">1</span>)*<span class=\"hljs-number\">50</span> +i,<span class=\"hljs-number\">12</span>,time)<br>        peace = salary.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27;-&#x27;</span>)<br>        #将数值与单位分离<br>        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-title function_\">len</span>(peace)&gt; <span class=\"hljs-number\">1</span>):<br>            peace[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-title function_\">float</span>(peace[<span class=\"hljs-number\">0</span>])<br>            #unit 是薪资的单位<br>            unit = peace[<span class=\"hljs-number\">1</span>].<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;0&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;1&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;2&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;3&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;4&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;5&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;6&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;7&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;8&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;8&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;9&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;.&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>)<br>            data1 = peace[<span class=\"hljs-number\">1</span>].<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;元&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;千&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;万&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;/&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;小时&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;天&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;月&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;年&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;以上&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>)<br>            num = <span class=\"hljs-title function_\">float</span>(data1)<br>            #这里是将薪资的单位统一为 万/月<br>            <span class=\"hljs-keyword\">if</span> (unit == <span class=\"hljs-string\">&quot;元/小时&quot;</span>):<br>                salary_1 = <span class=\"hljs-title function_\">str</span>(<span class=\"hljs-title function_\">round</span>((data2 * <span class=\"hljs-number\">24</span> * <span class=\"hljs-number\">30</span> / <span class=\"hljs-number\">10000</span>),<span class=\"hljs-number\">2</span>))<br>                salary_2 = <span class=\"hljs-title function_\">str</span>(<span class=\"hljs-title function_\">round</span>((num * <span class=\"hljs-number\">24</span> * <span class=\"hljs-number\">30</span> / <span class=\"hljs-number\">10000</span>),<span class=\"hljs-number\">2</span>))<br>            elif (unit == <span class=\"hljs-string\">&quot;元/天&quot;</span>):<br>                salary_1 = <span class=\"hljs-title function_\">str</span>(<span class=\"hljs-title function_\">round</span>((peace[<span class=\"hljs-number\">0</span>] * <span class=\"hljs-number\">30</span> / <span class=\"hljs-number\">10000</span>),<span class=\"hljs-number\">2</span>))<br>                salary_2 = <span class=\"hljs-title function_\">str</span>(<span class=\"hljs-title function_\">round</span>((num *<span class=\"hljs-number\">30</span> / <span class=\"hljs-number\">10000</span>),<span class=\"hljs-number\">2</span>))<br>            <span class=\"hljs-title function_\">elif</span>(unit == <span class=\"hljs-string\">&quot;千/月&quot;</span>):<br>                salary_1 = <span class=\"hljs-title function_\">str</span>(<span class=\"hljs-title function_\">round</span>((peace[<span class=\"hljs-number\">0</span>]/<span class=\"hljs-number\">10</span>),<span class=\"hljs-number\">2</span>))<br>                salary_2 = <span class=\"hljs-title function_\">str</span>(<span class=\"hljs-title function_\">round</span>((num/<span class=\"hljs-number\">10</span>),<span class=\"hljs-number\">2</span>))<br>            elif (unit == <span class=\"hljs-string\">&quot;万/年&quot;</span>):<br>                salary_1 = <span class=\"hljs-title function_\">str</span>(<span class=\"hljs-title function_\">round</span>((peace[<span class=\"hljs-number\">0</span>] / <span class=\"hljs-number\">12</span>),<span class=\"hljs-number\">2</span>))<br>                salary_2 = <span class=\"hljs-title function_\">str</span>(<span class=\"hljs-title function_\">round</span>((num / <span class=\"hljs-number\">12</span>),<span class=\"hljs-number\">2</span>))<br>            <span class=\"hljs-attr\">else</span>:<br>                salary_1 = <span class=\"hljs-title function_\">str</span>(peace[<span class=\"hljs-number\">0</span>])<br>                salary_2 = <span class=\"hljs-title function_\">str</span>(num)<br>            sheet1.<span class=\"hljs-title function_\">write</span>((x - <span class=\"hljs-number\">1</span>) * <span class=\"hljs-number\">50</span> + i, <span class=\"hljs-number\">14</span>, salary_1 + <span class=\"hljs-string\">&quot;万/月&quot;</span>)<br>            sheet1.<span class=\"hljs-title function_\">write</span>((x - <span class=\"hljs-number\">1</span>) * <span class=\"hljs-number\">50</span> + i, <span class=\"hljs-number\">16</span>, salary_2 + <span class=\"hljs-string\">&quot;万/月&quot;</span>)<br>        <span class=\"hljs-attr\">else</span>:<br>            #unit 是薪资的单位<br>            unit = peace[<span class=\"hljs-number\">0</span>].<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;0&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;1&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;2&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;3&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;4&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;5&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;6&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;7&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;8&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;8&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;9&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;.&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>)<br>            data2 = peace[<span class=\"hljs-number\">0</span>].<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;元&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;千&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;万&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;/&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;小时&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;天&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;月&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;年&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&quot;以上&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>)<br>            num = <span class=\"hljs-title function_\">float</span>(data2)<br>            <span class=\"hljs-keyword\">if</span> (unit == <span class=\"hljs-string\">&quot;元/小时&quot;</span>):<br>                salary_3 = <span class=\"hljs-title function_\">str</span>(<span class=\"hljs-title function_\">round</span>((num * <span class=\"hljs-number\">24</span> * <span class=\"hljs-number\">30</span> / <span class=\"hljs-number\">10000</span>),<span class=\"hljs-number\">2</span>))<br><br>            <span class=\"hljs-title function_\">elif</span>(unit == <span class=\"hljs-string\">&quot;元/天&quot;</span>):<br>                salary_3 = <span class=\"hljs-title function_\">str</span>(<span class=\"hljs-title function_\">round</span>(num * <span class=\"hljs-number\">30</span> / <span class=\"hljs-number\">10000</span>))<br><br>            elif (unit == <span class=\"hljs-string\">&quot;千/月&quot;</span>):<br>                salary_3 = <span class=\"hljs-title function_\">str</span>(<span class=\"hljs-title function_\">round</span>(num/<span class=\"hljs-number\">10</span>))<br><br>            <span class=\"hljs-title function_\">elif</span>(unit == <span class=\"hljs-string\">&quot;万/年&quot;</span> or unit == <span class=\"hljs-string\">&quot;万以上/年&quot;</span>):<br>                salary_3 = <span class=\"hljs-title function_\">str</span>(<span class=\"hljs-title function_\">round</span>(num / <span class=\"hljs-number\">12</span>))<br><br>            elif (unit == <span class=\"hljs-string\">&quot;万/月&quot;</span>):<br>                salary_3 = <span class=\"hljs-title function_\">str</span>(num)<br>\t\t\t#如果提供的单位不是这几个中的一个，输出标记可自行查看！哈哈哈哈<br>            <span class=\"hljs-attr\">else</span>:<br>                <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;我也没辙了&quot;</span>)<br>            sheet1.<span class=\"hljs-title function_\">write</span>((x - <span class=\"hljs-number\">1</span>) * <span class=\"hljs-number\">50</span> + i, <span class=\"hljs-number\">14</span>, salary_3 + <span class=\"hljs-string\">&quot;万/月&quot;</span>)<br>            sheet1.<span class=\"hljs-title function_\">write</span>((x - <span class=\"hljs-number\">1</span>) * <span class=\"hljs-number\">50</span> + i, <span class=\"hljs-number\">16</span>, salary_3 + <span class=\"hljs-string\">&quot;万/月&quot;</span>)<br><br>        #<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">len</span>(pos),<span class=\"hljs-title function_\">len</span>(com),<span class=\"hljs-title function_\">len</span>(workplace),<span class=\"hljs-title function_\">len</span>(salary),<span class=\"hljs-title function_\">len</span>(time))<br>    myxls.<span class=\"hljs-title function_\">save</span>(<span class=\"hljs-string\">&#x27;爬取结果.xls&#x27;</span>)<br></code></pre></td></tr></table></figure>"},{"title":"二叉树的锯齿形层序遍历(Java实现)","author":null,"date":"2021-04-06T01:15:05.000Z","_content":"### 题目\n\n给定一个二叉树，返回其节点值的锯齿形层序遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。\n/#/#/#示例\n给定二叉树 [3,9,20,null,null,15,7],\n![](https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151952749.png)\n\n返回锯齿形层序遍历如下：\n\n```js \n[\n  [3],\n  [20,9],\n  [15,7]\n]\n```\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/\n\n### Java代码实现\n\n```js \nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n    TreeNode(int x) { val = x; }\n}\n \npublic class Solution {\n    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {\t\n    \tList<List<Integer>> res = new ArrayList<List<Integer>>();\n    \tif(root == null) {\t\t\t//二叉树为空，直接返回空结果\n    \t\treturn res;\n    \t}\n    \tArrayDeque<TreeNode> deque = new ArrayDeque<TreeNode>();\n    \tdeque.add(root);\n    \tleverOrder(res, deque, 1);\n    \treturn res;\n    }\n    \n    /*\n     * 参数列表说明：\n     * res 结果集\n     * deque 双向队列存储当前层次遍历的结点\n     * flag 记录当前遍历的层数，用来控制层序遍历的方向\n     */\n    void leverOrder(List<List<Integer>> res,ArrayDeque<TreeNode> deque,int flag) {\n    \tint size = deque.size();\n    \tif(size == 0) {\n    \t\treturn;\n    \t}\n    \tArrayList<Integer> arrayList = new ArrayList<Integer>(); \n    \tif(flag == 1) {\n    \t\twhile(size-- != 0) {\n    \t\t\tTreeNode root = deque.pollFirst();\n    \t\t\tarrayList.add(root.val);\n    \t\t\tif(root.left != null) {\n    \t\t\t\tdeque.offer(root.left);\n    \t\t\t}\n    \t\t\tif(root.right != null) {\n    \t\t\t\tdeque.offer(root.right);\n    \t\t\t}\n    \t\t}\n    \t\t//加入结果集，递归下一层\n    \t\tres.add(arrayList);\n    \t\tleverOrder(res, deque, 2);\n    \t}else {\n    \t\twhile(size-- != 0) {\n    \t\t\tTreeNode root = deque.pollLast();\n    \t\t\tarrayList.add(root.val);\n    \t\t\tif(root.right != null) {\n    \t\t\t\tdeque.offerFirst(root.right);\n    \t\t\t}\n    \t\t\tif(root.left != null) {\n    \t\t\t\tdeque.offerFirst(root.left);\n    \t\t\t}\n    \t\t}\n    \t\t//加入结果集，//递归下一层\n    \t\tres.add(arrayList);\n    \t\tleverOrder(res, deque, 1);\n\t\t}\n    \t\n    }\n}\n```","source":"_posts/二叉树的锯齿形层序遍历(Java实现).md","raw":"---\ntitle: 二叉树的锯齿形层序遍历(Java实现)\nauthor: \ntags: \n       - leetcode\n\ncategory: \n       - 算法\n\ndate: 2021-04-06 09:15:05\n---\n### 题目\n\n给定一个二叉树，返回其节点值的锯齿形层序遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。\n/#/#/#示例\n给定二叉树 [3,9,20,null,null,15,7],\n![](https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151952749.png)\n\n返回锯齿形层序遍历如下：\n\n```js \n[\n  [3],\n  [20,9],\n  [15,7]\n]\n```\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/\n\n### Java代码实现\n\n```js \nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n    TreeNode(int x) { val = x; }\n}\n \npublic class Solution {\n    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {\t\n    \tList<List<Integer>> res = new ArrayList<List<Integer>>();\n    \tif(root == null) {\t\t\t//二叉树为空，直接返回空结果\n    \t\treturn res;\n    \t}\n    \tArrayDeque<TreeNode> deque = new ArrayDeque<TreeNode>();\n    \tdeque.add(root);\n    \tleverOrder(res, deque, 1);\n    \treturn res;\n    }\n    \n    /*\n     * 参数列表说明：\n     * res 结果集\n     * deque 双向队列存储当前层次遍历的结点\n     * flag 记录当前遍历的层数，用来控制层序遍历的方向\n     */\n    void leverOrder(List<List<Integer>> res,ArrayDeque<TreeNode> deque,int flag) {\n    \tint size = deque.size();\n    \tif(size == 0) {\n    \t\treturn;\n    \t}\n    \tArrayList<Integer> arrayList = new ArrayList<Integer>(); \n    \tif(flag == 1) {\n    \t\twhile(size-- != 0) {\n    \t\t\tTreeNode root = deque.pollFirst();\n    \t\t\tarrayList.add(root.val);\n    \t\t\tif(root.left != null) {\n    \t\t\t\tdeque.offer(root.left);\n    \t\t\t}\n    \t\t\tif(root.right != null) {\n    \t\t\t\tdeque.offer(root.right);\n    \t\t\t}\n    \t\t}\n    \t\t//加入结果集，递归下一层\n    \t\tres.add(arrayList);\n    \t\tleverOrder(res, deque, 2);\n    \t}else {\n    \t\twhile(size-- != 0) {\n    \t\t\tTreeNode root = deque.pollLast();\n    \t\t\tarrayList.add(root.val);\n    \t\t\tif(root.right != null) {\n    \t\t\t\tdeque.offerFirst(root.right);\n    \t\t\t}\n    \t\t\tif(root.left != null) {\n    \t\t\t\tdeque.offerFirst(root.left);\n    \t\t\t}\n    \t\t}\n    \t\t//加入结果集，//递归下一层\n    \t\tres.add(arrayList);\n    \t\tleverOrder(res, deque, 1);\n\t\t}\n    \t\n    }\n}\n```","slug":"二叉树的锯齿形层序遍历(Java实现)","published":1,"updated":"2024-03-15T11:52:13.553Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clttq59bo001gzwvec80lbn99","content":"<h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>给定一个二叉树，返回其节点值的锯齿形层序遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。<br>&#x2F;#&#x2F;#&#x2F;#示例<br>给定二叉树 [3,9,20,null,null,15,7],<br><img src=\"https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151952749.png\"></p>\n<p>返回锯齿形层序遍历如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">[<br>  [<span class=\"hljs-number\">3</span>],<br>  [<span class=\"hljs-number\">20</span>,<span class=\"hljs-number\">9</span>],<br>  [<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">7</span>]<br>]<br></code></pre></td></tr></table></figure>\n\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/\">https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/</a></p>\n<h3 id=\"Java代码实现\"><a href=\"#Java代码实现\" class=\"headerlink\" title=\"Java代码实现\"></a>Java代码实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">util</span>.<span class=\"hljs-property\">ArrayDeque</span>;<br><span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">util</span>.<span class=\"hljs-property\">ArrayList</span>;<br><span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">util</span>.<span class=\"hljs-property\">List</span>;<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TreeNode</span> &#123;<br>    int val;<br>    <span class=\"hljs-title class_\">TreeNode</span> left;<br>    <span class=\"hljs-title class_\">TreeNode</span> right;<br>    <span class=\"hljs-title class_\">TreeNode</span>(int x) &#123; val = x; &#125;<br>&#125;<br> <br>public <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br>    public <span class=\"hljs-title class_\">List</span>&lt;<span class=\"hljs-title class_\">List</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt;&gt; <span class=\"hljs-title function_\">zigzagLevelOrder</span>(<span class=\"hljs-params\">TreeNode root</span>) &#123;\t<br>    \t<span class=\"hljs-title class_\">List</span>&lt;<span class=\"hljs-title class_\">List</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt;&gt; res = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;<span class=\"hljs-title class_\">List</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt;&gt;();<br>    \t<span class=\"hljs-keyword\">if</span>(root == <span class=\"hljs-literal\">null</span>) &#123;\t\t\t<span class=\"hljs-comment\">//二叉树为空，直接返回空结果</span><br>    \t\t<span class=\"hljs-keyword\">return</span> res;<br>    \t&#125;<br>    \t<span class=\"hljs-title class_\">ArrayDeque</span>&lt;<span class=\"hljs-title class_\">TreeNode</span>&gt; deque = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayDeque</span>&lt;<span class=\"hljs-title class_\">TreeNode</span>&gt;();<br>    \tdeque.<span class=\"hljs-title function_\">add</span>(root);<br>    \t<span class=\"hljs-title function_\">leverOrder</span>(res, deque, <span class=\"hljs-number\">1</span>);<br>    \t<span class=\"hljs-keyword\">return</span> res;<br>    &#125;<br>    <br>    <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">     * 参数列表说明：</span><br><span class=\"hljs-comment\">     * res 结果集</span><br><span class=\"hljs-comment\">     * deque 双向队列存储当前层次遍历的结点</span><br><span class=\"hljs-comment\">     * flag 记录当前遍历的层数，用来控制层序遍历的方向</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">leverOrder</span>(<span class=\"hljs-params\">List&lt;List&lt;Integer&gt;&gt; res,ArrayDeque&lt;TreeNode&gt; deque,int flag</span>) &#123;<br>    \tint size = deque.<span class=\"hljs-title function_\">size</span>();<br>    \t<span class=\"hljs-keyword\">if</span>(size == <span class=\"hljs-number\">0</span>) &#123;<br>    \t\t<span class=\"hljs-keyword\">return</span>;<br>    \t&#125;<br>    \t<span class=\"hljs-title class_\">ArrayList</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt; arrayList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt;(); <br>    \t<span class=\"hljs-keyword\">if</span>(flag == <span class=\"hljs-number\">1</span>) &#123;<br>    \t\t<span class=\"hljs-keyword\">while</span>(size-- != <span class=\"hljs-number\">0</span>) &#123;<br>    \t\t\t<span class=\"hljs-title class_\">TreeNode</span> root = deque.<span class=\"hljs-title function_\">pollFirst</span>();<br>    \t\t\tarrayList.<span class=\"hljs-title function_\">add</span>(root.<span class=\"hljs-property\">val</span>);<br>    \t\t\t<span class=\"hljs-keyword\">if</span>(root.<span class=\"hljs-property\">left</span> != <span class=\"hljs-literal\">null</span>) &#123;<br>    \t\t\t\tdeque.<span class=\"hljs-title function_\">offer</span>(root.<span class=\"hljs-property\">left</span>);<br>    \t\t\t&#125;<br>    \t\t\t<span class=\"hljs-keyword\">if</span>(root.<span class=\"hljs-property\">right</span> != <span class=\"hljs-literal\">null</span>) &#123;<br>    \t\t\t\tdeque.<span class=\"hljs-title function_\">offer</span>(root.<span class=\"hljs-property\">right</span>);<br>    \t\t\t&#125;<br>    \t\t&#125;<br>    \t\t<span class=\"hljs-comment\">//加入结果集，递归下一层</span><br>    \t\tres.<span class=\"hljs-title function_\">add</span>(arrayList);<br>    \t\t<span class=\"hljs-title function_\">leverOrder</span>(res, deque, <span class=\"hljs-number\">2</span>);<br>    \t&#125;<span class=\"hljs-keyword\">else</span> &#123;<br>    \t\t<span class=\"hljs-keyword\">while</span>(size-- != <span class=\"hljs-number\">0</span>) &#123;<br>    \t\t\t<span class=\"hljs-title class_\">TreeNode</span> root = deque.<span class=\"hljs-title function_\">pollLast</span>();<br>    \t\t\tarrayList.<span class=\"hljs-title function_\">add</span>(root.<span class=\"hljs-property\">val</span>);<br>    \t\t\t<span class=\"hljs-keyword\">if</span>(root.<span class=\"hljs-property\">right</span> != <span class=\"hljs-literal\">null</span>) &#123;<br>    \t\t\t\tdeque.<span class=\"hljs-title function_\">offerFirst</span>(root.<span class=\"hljs-property\">right</span>);<br>    \t\t\t&#125;<br>    \t\t\t<span class=\"hljs-keyword\">if</span>(root.<span class=\"hljs-property\">left</span> != <span class=\"hljs-literal\">null</span>) &#123;<br>    \t\t\t\tdeque.<span class=\"hljs-title function_\">offerFirst</span>(root.<span class=\"hljs-property\">left</span>);<br>    \t\t\t&#125;<br>    \t\t&#125;<br>    \t\t<span class=\"hljs-comment\">//加入结果集，//递归下一层</span><br>    \t\tres.<span class=\"hljs-title function_\">add</span>(arrayList);<br>    \t\t<span class=\"hljs-title function_\">leverOrder</span>(res, deque, <span class=\"hljs-number\">1</span>);<br>\t\t&#125;<br>    \t<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>给定一个二叉树，返回其节点值的锯齿形层序遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。<br>&#x2F;#&#x2F;#&#x2F;#示例<br>给定二叉树 [3,9,20,null,null,15,7],<br><img src=\"https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151952749.png\"></p>\n<p>返回锯齿形层序遍历如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">[<br>  [<span class=\"hljs-number\">3</span>],<br>  [<span class=\"hljs-number\">20</span>,<span class=\"hljs-number\">9</span>],<br>  [<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">7</span>]<br>]<br></code></pre></td></tr></table></figure>\n\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/\">https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/</a></p>\n<h3 id=\"Java代码实现\"><a href=\"#Java代码实现\" class=\"headerlink\" title=\"Java代码实现\"></a>Java代码实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">util</span>.<span class=\"hljs-property\">ArrayDeque</span>;<br><span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">util</span>.<span class=\"hljs-property\">ArrayList</span>;<br><span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">util</span>.<span class=\"hljs-property\">List</span>;<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TreeNode</span> &#123;<br>    int val;<br>    <span class=\"hljs-title class_\">TreeNode</span> left;<br>    <span class=\"hljs-title class_\">TreeNode</span> right;<br>    <span class=\"hljs-title class_\">TreeNode</span>(int x) &#123; val = x; &#125;<br>&#125;<br> <br>public <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br>    public <span class=\"hljs-title class_\">List</span>&lt;<span class=\"hljs-title class_\">List</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt;&gt; <span class=\"hljs-title function_\">zigzagLevelOrder</span>(<span class=\"hljs-params\">TreeNode root</span>) &#123;\t<br>    \t<span class=\"hljs-title class_\">List</span>&lt;<span class=\"hljs-title class_\">List</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt;&gt; res = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;<span class=\"hljs-title class_\">List</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt;&gt;();<br>    \t<span class=\"hljs-keyword\">if</span>(root == <span class=\"hljs-literal\">null</span>) &#123;\t\t\t<span class=\"hljs-comment\">//二叉树为空，直接返回空结果</span><br>    \t\t<span class=\"hljs-keyword\">return</span> res;<br>    \t&#125;<br>    \t<span class=\"hljs-title class_\">ArrayDeque</span>&lt;<span class=\"hljs-title class_\">TreeNode</span>&gt; deque = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayDeque</span>&lt;<span class=\"hljs-title class_\">TreeNode</span>&gt;();<br>    \tdeque.<span class=\"hljs-title function_\">add</span>(root);<br>    \t<span class=\"hljs-title function_\">leverOrder</span>(res, deque, <span class=\"hljs-number\">1</span>);<br>    \t<span class=\"hljs-keyword\">return</span> res;<br>    &#125;<br>    <br>    <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">     * 参数列表说明：</span><br><span class=\"hljs-comment\">     * res 结果集</span><br><span class=\"hljs-comment\">     * deque 双向队列存储当前层次遍历的结点</span><br><span class=\"hljs-comment\">     * flag 记录当前遍历的层数，用来控制层序遍历的方向</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">leverOrder</span>(<span class=\"hljs-params\">List&lt;List&lt;Integer&gt;&gt; res,ArrayDeque&lt;TreeNode&gt; deque,int flag</span>) &#123;<br>    \tint size = deque.<span class=\"hljs-title function_\">size</span>();<br>    \t<span class=\"hljs-keyword\">if</span>(size == <span class=\"hljs-number\">0</span>) &#123;<br>    \t\t<span class=\"hljs-keyword\">return</span>;<br>    \t&#125;<br>    \t<span class=\"hljs-title class_\">ArrayList</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt; arrayList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt;(); <br>    \t<span class=\"hljs-keyword\">if</span>(flag == <span class=\"hljs-number\">1</span>) &#123;<br>    \t\t<span class=\"hljs-keyword\">while</span>(size-- != <span class=\"hljs-number\">0</span>) &#123;<br>    \t\t\t<span class=\"hljs-title class_\">TreeNode</span> root = deque.<span class=\"hljs-title function_\">pollFirst</span>();<br>    \t\t\tarrayList.<span class=\"hljs-title function_\">add</span>(root.<span class=\"hljs-property\">val</span>);<br>    \t\t\t<span class=\"hljs-keyword\">if</span>(root.<span class=\"hljs-property\">left</span> != <span class=\"hljs-literal\">null</span>) &#123;<br>    \t\t\t\tdeque.<span class=\"hljs-title function_\">offer</span>(root.<span class=\"hljs-property\">left</span>);<br>    \t\t\t&#125;<br>    \t\t\t<span class=\"hljs-keyword\">if</span>(root.<span class=\"hljs-property\">right</span> != <span class=\"hljs-literal\">null</span>) &#123;<br>    \t\t\t\tdeque.<span class=\"hljs-title function_\">offer</span>(root.<span class=\"hljs-property\">right</span>);<br>    \t\t\t&#125;<br>    \t\t&#125;<br>    \t\t<span class=\"hljs-comment\">//加入结果集，递归下一层</span><br>    \t\tres.<span class=\"hljs-title function_\">add</span>(arrayList);<br>    \t\t<span class=\"hljs-title function_\">leverOrder</span>(res, deque, <span class=\"hljs-number\">2</span>);<br>    \t&#125;<span class=\"hljs-keyword\">else</span> &#123;<br>    \t\t<span class=\"hljs-keyword\">while</span>(size-- != <span class=\"hljs-number\">0</span>) &#123;<br>    \t\t\t<span class=\"hljs-title class_\">TreeNode</span> root = deque.<span class=\"hljs-title function_\">pollLast</span>();<br>    \t\t\tarrayList.<span class=\"hljs-title function_\">add</span>(root.<span class=\"hljs-property\">val</span>);<br>    \t\t\t<span class=\"hljs-keyword\">if</span>(root.<span class=\"hljs-property\">right</span> != <span class=\"hljs-literal\">null</span>) &#123;<br>    \t\t\t\tdeque.<span class=\"hljs-title function_\">offerFirst</span>(root.<span class=\"hljs-property\">right</span>);<br>    \t\t\t&#125;<br>    \t\t\t<span class=\"hljs-keyword\">if</span>(root.<span class=\"hljs-property\">left</span> != <span class=\"hljs-literal\">null</span>) &#123;<br>    \t\t\t\tdeque.<span class=\"hljs-title function_\">offerFirst</span>(root.<span class=\"hljs-property\">left</span>);<br>    \t\t\t&#125;<br>    \t\t&#125;<br>    \t\t<span class=\"hljs-comment\">//加入结果集，//递归下一层</span><br>    \t\tres.<span class=\"hljs-title function_\">add</span>(arrayList);<br>    \t\t<span class=\"hljs-title function_\">leverOrder</span>(res, deque, <span class=\"hljs-number\">1</span>);<br>\t\t&#125;<br>    \t<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"三角形最大周长算法","author":null,"date":"2020-11-29T07:26:11.000Z","_content":"![在这里插入图片描述](../images/aeb2a66c-195e-4665-b76a-b79e58cfdcb3.png)\n![在这里插入图片描述](../images/42ed265b-6dfd-4b26-96ff-0d84da4e474e.png)\n![在这里插入图片描述](../images/c0bbb2fd-0cfa-4cd0-bad9-46835d23117b.png)\n\n答案：\n```js \nclass Solution {\n    \n    public int largestPerimeter(int[] A) {\n    \n        int len = A.length;\n        if(len < 3){\n    \n            return 0;\n        }\n        Arrays.sort(A);\n        while(len-3>=0){\n    \n            if(A[len-1]-A[len-2] < A[len-3]){\n    \n                return A[len-1]+A[len-2]+A[len-3];\n            }\n            else{\n    \n                len = len-1;\n            }\n        }\n        return 0;\n    }\n}\n```","source":"_posts/三角形最大周长算法.md","raw":"---\ntitle: 三角形最大周长算法\nauthor: \ntags: \n       - 算法\n\ncategory: \n       - 算法\n\ndate: 2020-11-29 15:26:11\n---\n![在这里插入图片描述](../images/aeb2a66c-195e-4665-b76a-b79e58cfdcb3.png)\n![在这里插入图片描述](../images/42ed265b-6dfd-4b26-96ff-0d84da4e474e.png)\n![在这里插入图片描述](../images/c0bbb2fd-0cfa-4cd0-bad9-46835d23117b.png)\n\n答案：\n```js \nclass Solution {\n    \n    public int largestPerimeter(int[] A) {\n    \n        int len = A.length;\n        if(len < 3){\n    \n            return 0;\n        }\n        Arrays.sort(A);\n        while(len-3>=0){\n    \n            if(A[len-1]-A[len-2] < A[len-3]){\n    \n                return A[len-1]+A[len-2]+A[len-3];\n            }\n            else{\n    \n                len = len-1;\n            }\n        }\n        return 0;\n    }\n}\n```","slug":"三角形最大周长算法","published":1,"updated":"2024-03-15T08:23:53.193Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clttq59bp001jzwveax3s2ilm","content":"<p><img src=\"/../images/aeb2a66c-195e-4665-b76a-b79e58cfdcb3.png\" alt=\"在这里插入图片描述\"><br><img src=\"/../images/42ed265b-6dfd-4b26-96ff-0d84da4e474e.png\" alt=\"在这里插入图片描述\"><br><img src=\"/../images/c0bbb2fd-0cfa-4cd0-bad9-46835d23117b.png\" alt=\"在这里插入图片描述\"></p>\n<p>答案：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br>    <br>    public int <span class=\"hljs-title function_\">largestPerimeter</span>(<span class=\"hljs-params\">int[] A</span>) &#123;<br>    <br>        int len = A.<span class=\"hljs-property\">length</span>;<br>        <span class=\"hljs-keyword\">if</span>(len &lt; <span class=\"hljs-number\">3</span>)&#123;<br>    <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>        &#125;<br>        <span class=\"hljs-title class_\">Arrays</span>.<span class=\"hljs-title function_\">sort</span>(A);<br>        <span class=\"hljs-keyword\">while</span>(len-<span class=\"hljs-number\">3</span>&gt;=<span class=\"hljs-number\">0</span>)&#123;<br>    <br>            <span class=\"hljs-keyword\">if</span>(A[len-<span class=\"hljs-number\">1</span>]-A[len-<span class=\"hljs-number\">2</span>] &lt; A[len-<span class=\"hljs-number\">3</span>])&#123;<br>    <br>                <span class=\"hljs-keyword\">return</span> A[len-<span class=\"hljs-number\">1</span>]+A[len-<span class=\"hljs-number\">2</span>]+A[len-<span class=\"hljs-number\">3</span>];<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span>&#123;<br>    <br>                len = len-<span class=\"hljs-number\">1</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/../images/aeb2a66c-195e-4665-b76a-b79e58cfdcb3.png\" alt=\"在这里插入图片描述\"><br><img src=\"/../images/42ed265b-6dfd-4b26-96ff-0d84da4e474e.png\" alt=\"在这里插入图片描述\"><br><img src=\"/../images/c0bbb2fd-0cfa-4cd0-bad9-46835d23117b.png\" alt=\"在这里插入图片描述\"></p>\n<p>答案：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br>    <br>    public int <span class=\"hljs-title function_\">largestPerimeter</span>(<span class=\"hljs-params\">int[] A</span>) &#123;<br>    <br>        int len = A.<span class=\"hljs-property\">length</span>;<br>        <span class=\"hljs-keyword\">if</span>(len &lt; <span class=\"hljs-number\">3</span>)&#123;<br>    <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>        &#125;<br>        <span class=\"hljs-title class_\">Arrays</span>.<span class=\"hljs-title function_\">sort</span>(A);<br>        <span class=\"hljs-keyword\">while</span>(len-<span class=\"hljs-number\">3</span>&gt;=<span class=\"hljs-number\">0</span>)&#123;<br>    <br>            <span class=\"hljs-keyword\">if</span>(A[len-<span class=\"hljs-number\">1</span>]-A[len-<span class=\"hljs-number\">2</span>] &lt; A[len-<span class=\"hljs-number\">3</span>])&#123;<br>    <br>                <span class=\"hljs-keyword\">return</span> A[len-<span class=\"hljs-number\">1</span>]+A[len-<span class=\"hljs-number\">2</span>]+A[len-<span class=\"hljs-number\">3</span>];<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span>&#123;<br>    <br>                len = len-<span class=\"hljs-number\">1</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"分发糖果（Java实现）","author":null,"date":"2021-04-06T01:14:32.000Z","_content":"### 题目\n\n老师想给孩子们分发糖果，有 N 个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。\n你需要按照以下要求，帮助老师给这些孩子分发糖果：\n每个孩子至少分配到 1 个糖果。\n相邻的孩子中，评分高的孩子必须获得更多的糖果。\n那么这样下来，老师至少需要准备多少颗糖果呢？\n \n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/candy\n\n### 示例1\n\n输入: [1,0,2]\n输出: 5\n解释: 你可以分别给这三个孩子分发 2、1、2 颗糖果。\n\n### 示例2\n\n输入: [1,2,2]\n输出: 4\n解释: 你可以分别给这三个孩子分发 1、2、1 颗糖果。\n第三个孩子只得到 1 颗糖果，这已满足上述两个条件\n\n### 解题思路\n\n两个数组left和right分别记录从左向右规则和从右向左规则时，每个孩子应该分的糖果数。\n题目要求即为同时满足两个方向的规则，即两个数组按位取max。\n最终结果要加上每个孩子至少一个糖果。（或者left，right数组初始化为1）\n```js \nclass Solution {\n    public int candy(int[] ratings) {\n        int len = ratings.length;\n    \tint sum = len;\n    \tint[] left = new int[len];\n    \tint[] right = new int[len];\n    \tfor (int i = 1; i < len; i++) {\n            if(ratings[i] > ratings[i-1]) {\n                left[i] = left[i-1]+1;\n            }\n        }\n    \tfor (int i = len-2; i>=0; i--) {\n            if(ratings[i] > ratings[i+1]) {\n                right[i] = right[i+1]+1;\t\n            }\n        }\n    \t\n    \tfor (int i = 0; i < len; i++) {\n            sum += Math.max(left[i], right[i]);\n        }\n    \treturn sum;\n    }\n}\n```","source":"_posts/分发糖果（Java实现）.md","raw":"---\ntitle: 分发糖果（Java实现）\nauthor: \ntags: \n       - leetcode\n\ncategory: \n       - 算法\n\ndate: 2021-04-06 09:14:32\n---\n### 题目\n\n老师想给孩子们分发糖果，有 N 个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。\n你需要按照以下要求，帮助老师给这些孩子分发糖果：\n每个孩子至少分配到 1 个糖果。\n相邻的孩子中，评分高的孩子必须获得更多的糖果。\n那么这样下来，老师至少需要准备多少颗糖果呢？\n \n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/candy\n\n### 示例1\n\n输入: [1,0,2]\n输出: 5\n解释: 你可以分别给这三个孩子分发 2、1、2 颗糖果。\n\n### 示例2\n\n输入: [1,2,2]\n输出: 4\n解释: 你可以分别给这三个孩子分发 1、2、1 颗糖果。\n第三个孩子只得到 1 颗糖果，这已满足上述两个条件\n\n### 解题思路\n\n两个数组left和right分别记录从左向右规则和从右向左规则时，每个孩子应该分的糖果数。\n题目要求即为同时满足两个方向的规则，即两个数组按位取max。\n最终结果要加上每个孩子至少一个糖果。（或者left，right数组初始化为1）\n```js \nclass Solution {\n    public int candy(int[] ratings) {\n        int len = ratings.length;\n    \tint sum = len;\n    \tint[] left = new int[len];\n    \tint[] right = new int[len];\n    \tfor (int i = 1; i < len; i++) {\n            if(ratings[i] > ratings[i-1]) {\n                left[i] = left[i-1]+1;\n            }\n        }\n    \tfor (int i = len-2; i>=0; i--) {\n            if(ratings[i] > ratings[i+1]) {\n                right[i] = right[i+1]+1;\t\n            }\n        }\n    \t\n    \tfor (int i = 0; i < len; i++) {\n            sum += Math.max(left[i], right[i]);\n        }\n    \treturn sum;\n    }\n}\n```","slug":"分发糖果（Java实现）","published":1,"updated":"2024-03-15T08:23:49.764Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clttq59bq001mzwveahq8dkyi","content":"<h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>老师想给孩子们分发糖果，有 N 个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。<br>你需要按照以下要求，帮助老师给这些孩子分发糖果：<br>每个孩子至少分配到 1 个糖果。<br>相邻的孩子中，评分高的孩子必须获得更多的糖果。<br>那么这样下来，老师至少需要准备多少颗糖果呢？</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/candy\">https://leetcode-cn.com/problems/candy</a></p>\n<h3 id=\"示例1\"><a href=\"#示例1\" class=\"headerlink\" title=\"示例1\"></a>示例1</h3><p>输入: [1,0,2]<br>输出: 5<br>解释: 你可以分别给这三个孩子分发 2、1、2 颗糖果。</p>\n<h3 id=\"示例2\"><a href=\"#示例2\" class=\"headerlink\" title=\"示例2\"></a>示例2</h3><p>输入: [1,2,2]<br>输出: 4<br>解释: 你可以分别给这三个孩子分发 1、2、1 颗糖果。<br>第三个孩子只得到 1 颗糖果，这已满足上述两个条件</p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>两个数组left和right分别记录从左向右规则和从右向左规则时，每个孩子应该分的糖果数。<br>题目要求即为同时满足两个方向的规则，即两个数组按位取max。<br>最终结果要加上每个孩子至少一个糖果。（或者left，right数组初始化为1）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br>    public int <span class=\"hljs-title function_\">candy</span>(<span class=\"hljs-params\">int[] ratings</span>) &#123;<br>        int len = ratings.<span class=\"hljs-property\">length</span>;<br>    \tint sum = len;<br>    \tint[] left = <span class=\"hljs-keyword\">new</span> int[len];<br>    \tint[] right = <span class=\"hljs-keyword\">new</span> int[len];<br>    \t<span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">1</span>; i &lt; len; i++) &#123;<br>            <span class=\"hljs-keyword\">if</span>(ratings[i] &gt; ratings[i-<span class=\"hljs-number\">1</span>]) &#123;<br>                left[i] = left[i-<span class=\"hljs-number\">1</span>]+<span class=\"hljs-number\">1</span>;<br>            &#125;<br>        &#125;<br>    \t<span class=\"hljs-keyword\">for</span> (int i = len-<span class=\"hljs-number\">2</span>; i&gt;=<span class=\"hljs-number\">0</span>; i--) &#123;<br>            <span class=\"hljs-keyword\">if</span>(ratings[i] &gt; ratings[i+<span class=\"hljs-number\">1</span>]) &#123;<br>                right[i] = right[i+<span class=\"hljs-number\">1</span>]+<span class=\"hljs-number\">1</span>;\t<br>            &#125;<br>        &#125;<br>    \t<br>    \t<span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &lt; len; i++) &#123;<br>            sum += <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(left[i], right[i]);<br>        &#125;<br>    \t<span class=\"hljs-keyword\">return</span> sum;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>老师想给孩子们分发糖果，有 N 个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。<br>你需要按照以下要求，帮助老师给这些孩子分发糖果：<br>每个孩子至少分配到 1 个糖果。<br>相邻的孩子中，评分高的孩子必须获得更多的糖果。<br>那么这样下来，老师至少需要准备多少颗糖果呢？</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/candy\">https://leetcode-cn.com/problems/candy</a></p>\n<h3 id=\"示例1\"><a href=\"#示例1\" class=\"headerlink\" title=\"示例1\"></a>示例1</h3><p>输入: [1,0,2]<br>输出: 5<br>解释: 你可以分别给这三个孩子分发 2、1、2 颗糖果。</p>\n<h3 id=\"示例2\"><a href=\"#示例2\" class=\"headerlink\" title=\"示例2\"></a>示例2</h3><p>输入: [1,2,2]<br>输出: 4<br>解释: 你可以分别给这三个孩子分发 1、2、1 颗糖果。<br>第三个孩子只得到 1 颗糖果，这已满足上述两个条件</p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>两个数组left和right分别记录从左向右规则和从右向左规则时，每个孩子应该分的糖果数。<br>题目要求即为同时满足两个方向的规则，即两个数组按位取max。<br>最终结果要加上每个孩子至少一个糖果。（或者left，right数组初始化为1）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br>    public int <span class=\"hljs-title function_\">candy</span>(<span class=\"hljs-params\">int[] ratings</span>) &#123;<br>        int len = ratings.<span class=\"hljs-property\">length</span>;<br>    \tint sum = len;<br>    \tint[] left = <span class=\"hljs-keyword\">new</span> int[len];<br>    \tint[] right = <span class=\"hljs-keyword\">new</span> int[len];<br>    \t<span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">1</span>; i &lt; len; i++) &#123;<br>            <span class=\"hljs-keyword\">if</span>(ratings[i] &gt; ratings[i-<span class=\"hljs-number\">1</span>]) &#123;<br>                left[i] = left[i-<span class=\"hljs-number\">1</span>]+<span class=\"hljs-number\">1</span>;<br>            &#125;<br>        &#125;<br>    \t<span class=\"hljs-keyword\">for</span> (int i = len-<span class=\"hljs-number\">2</span>; i&gt;=<span class=\"hljs-number\">0</span>; i--) &#123;<br>            <span class=\"hljs-keyword\">if</span>(ratings[i] &gt; ratings[i+<span class=\"hljs-number\">1</span>]) &#123;<br>                right[i] = right[i+<span class=\"hljs-number\">1</span>]+<span class=\"hljs-number\">1</span>;\t<br>            &#125;<br>        &#125;<br>    \t<br>    \t<span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &lt; len; i++) &#123;<br>            sum += <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(left[i], right[i]);<br>        &#125;<br>    \t<span class=\"hljs-keyword\">return</span> sum;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"去除重复字母（Java实现）","author":null,"date":"2021-04-06T01:16:38.000Z","_content":"### 题目 去除重复字母\n\n给你一个字符串 s ，请你去除字符串中重复的字母，使得每个字母只出现一次。需保证 返回结果的字典序最小（要求不能打乱其他字符的相对位置）。\n\n##### 示例1\n\n输入：s = “bcabc”\n输出：“abc”\n\n##### 示例2\n\n输入：s = “cbacdcbc”\n输出：“acdb”\n\n##### 数据范围\n\n1 <= s.length <= 104\ns 由小写英文字母组成\n \n来源：力扣（LeetCode）\nhttps://leetcode-cn.com/problems/remove-duplicate-letters/\n\n##### 代码\n\n```js \n/*\n * 算法思想\n * 当字典序最小时，即12341 12351 主要看4，5的位置\n * 用栈存储，当栈空时直接入栈\n * 栈不为空时，\n * \t若栈中包含当前要入栈的元素直接跳到下一次循环。（结果字符串每个字符只含有一次）\n * \t若当前要入栈的字母比栈顶字母大时，考虑是否栈顶元素出栈\n * \t若栈顶元素在剩余字符串中仍然存在，那么就可以出栈，出栈后继续判断新的栈顶元素是否出栈。\n */\nimport java.util.Stack;\n\npublic class RemoveDuplicateLetters {\n\n    public static String removeDuplicateLetters(String s){\n        Stack<Character> stack = new Stack<Character>();\n            for (int i = 0; i < s.length(); i++) {\n                char c=s.charAt(i);\n                if(stack.contains(c))\n                    continue;\n                while(!stack.isEmpty() && stack.peek()>c && s.indexOf(stack.peek(),i)!=-1)\n                    stack.pop();\n                stack.push(c);\n            }\n            char chars[]=new char[stack.size()];\n            for (int i = 0; i < stack.size(); i++) {\n                chars[i]=stack.get(i);\n            }\n            return new String(chars);\n    }\n\n    public static void main(String[] args) {\n        String string = \"bbcaac\";\n        System.out.println(removeDuplicateLetters(string));\n    }\n}\n```","source":"_posts/去除重复字母（Java实现）.md","raw":"---\ntitle: 去除重复字母（Java实现）\nauthor: \ntags: \n       - leetcode\n\ncategory: \n       - 算法\n\ndate: 2021-04-06 09:16:38\n---\n### 题目 去除重复字母\n\n给你一个字符串 s ，请你去除字符串中重复的字母，使得每个字母只出现一次。需保证 返回结果的字典序最小（要求不能打乱其他字符的相对位置）。\n\n##### 示例1\n\n输入：s = “bcabc”\n输出：“abc”\n\n##### 示例2\n\n输入：s = “cbacdcbc”\n输出：“acdb”\n\n##### 数据范围\n\n1 <= s.length <= 104\ns 由小写英文字母组成\n \n来源：力扣（LeetCode）\nhttps://leetcode-cn.com/problems/remove-duplicate-letters/\n\n##### 代码\n\n```js \n/*\n * 算法思想\n * 当字典序最小时，即12341 12351 主要看4，5的位置\n * 用栈存储，当栈空时直接入栈\n * 栈不为空时，\n * \t若栈中包含当前要入栈的元素直接跳到下一次循环。（结果字符串每个字符只含有一次）\n * \t若当前要入栈的字母比栈顶字母大时，考虑是否栈顶元素出栈\n * \t若栈顶元素在剩余字符串中仍然存在，那么就可以出栈，出栈后继续判断新的栈顶元素是否出栈。\n */\nimport java.util.Stack;\n\npublic class RemoveDuplicateLetters {\n\n    public static String removeDuplicateLetters(String s){\n        Stack<Character> stack = new Stack<Character>();\n            for (int i = 0; i < s.length(); i++) {\n                char c=s.charAt(i);\n                if(stack.contains(c))\n                    continue;\n                while(!stack.isEmpty() && stack.peek()>c && s.indexOf(stack.peek(),i)!=-1)\n                    stack.pop();\n                stack.push(c);\n            }\n            char chars[]=new char[stack.size()];\n            for (int i = 0; i < stack.size(); i++) {\n                chars[i]=stack.get(i);\n            }\n            return new String(chars);\n    }\n\n    public static void main(String[] args) {\n        String string = \"bbcaac\";\n        System.out.println(removeDuplicateLetters(string));\n    }\n}\n```","slug":"去除重复字母（Java实现）","published":1,"updated":"2024-03-15T08:23:46.006Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clttq59br001qzwvefjs33zyq","content":"<h3 id=\"题目-去除重复字母\"><a href=\"#题目-去除重复字母\" class=\"headerlink\" title=\"题目 去除重复字母\"></a>题目 去除重复字母</h3><p>给你一个字符串 s ，请你去除字符串中重复的字母，使得每个字母只出现一次。需保证 返回结果的字典序最小（要求不能打乱其他字符的相对位置）。</p>\n<h5 id=\"示例1\"><a href=\"#示例1\" class=\"headerlink\" title=\"示例1\"></a>示例1</h5><p>输入：s &#x3D; “bcabc”<br>输出：“abc”</p>\n<h5 id=\"示例2\"><a href=\"#示例2\" class=\"headerlink\" title=\"示例2\"></a>示例2</h5><p>输入：s &#x3D; “cbacdcbc”<br>输出：“acdb”</p>\n<h5 id=\"数据范围\"><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h5><p>1 &lt;&#x3D; s.length &lt;&#x3D; 104<br>s 由小写英文字母组成</p>\n<p>来源：力扣（LeetCode）<br><a href=\"https://leetcode-cn.com/problems/remove-duplicate-letters/\">https://leetcode-cn.com/problems/remove-duplicate-letters/</a></p>\n<h5 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\"> * 算法思想</span><br><span class=\"hljs-comment\"> * 当字典序最小时，即12341 12351 主要看4，5的位置</span><br><span class=\"hljs-comment\"> * 用栈存储，当栈空时直接入栈</span><br><span class=\"hljs-comment\"> * 栈不为空时，</span><br><span class=\"hljs-comment\"> * \t若栈中包含当前要入栈的元素直接跳到下一次循环。（结果字符串每个字符只含有一次）</span><br><span class=\"hljs-comment\"> * \t若当前要入栈的字母比栈顶字母大时，考虑是否栈顶元素出栈</span><br><span class=\"hljs-comment\"> * \t若栈顶元素在剩余字符串中仍然存在，那么就可以出栈，出栈后继续判断新的栈顶元素是否出栈。</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">util</span>.<span class=\"hljs-property\">Stack</span>;<br><br>public <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RemoveDuplicateLetters</span> &#123;<br><br>    public <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">removeDuplicateLetters</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> s</span>)&#123;<br>        <span class=\"hljs-title class_\">Stack</span>&lt;<span class=\"hljs-title class_\">Character</span>&gt; stack = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Stack</span>&lt;<span class=\"hljs-title class_\">Character</span>&gt;();<br>            <span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &lt; s.<span class=\"hljs-title function_\">length</span>(); i++) &#123;<br>                char c=s.<span class=\"hljs-title function_\">charAt</span>(i);<br>                <span class=\"hljs-keyword\">if</span>(stack.<span class=\"hljs-title function_\">contains</span>(c))<br>                    <span class=\"hljs-keyword\">continue</span>;<br>                <span class=\"hljs-keyword\">while</span>(!stack.<span class=\"hljs-title function_\">isEmpty</span>() &amp;&amp; stack.<span class=\"hljs-title function_\">peek</span>()&gt;c &amp;&amp; s.<span class=\"hljs-title function_\">indexOf</span>(stack.<span class=\"hljs-title function_\">peek</span>(),i)!=-<span class=\"hljs-number\">1</span>)<br>                    stack.<span class=\"hljs-title function_\">pop</span>();<br>                stack.<span class=\"hljs-title function_\">push</span>(c);<br>            &#125;<br>            char chars[]=<span class=\"hljs-keyword\">new</span> char[stack.<span class=\"hljs-title function_\">size</span>()];<br>            <span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &lt; stack.<span class=\"hljs-title function_\">size</span>(); i++) &#123;<br>                chars[i]=stack.<span class=\"hljs-title function_\">get</span>(i);<br>            &#125;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(chars);<br>    &#125;<br><br>    public <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span>[] args</span>) &#123;<br>        <span class=\"hljs-title class_\">String</span> string = <span class=\"hljs-string\">&quot;bbcaac&quot;</span>;<br>        <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-title function_\">removeDuplicateLetters</span>(string));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"题目-去除重复字母\"><a href=\"#题目-去除重复字母\" class=\"headerlink\" title=\"题目 去除重复字母\"></a>题目 去除重复字母</h3><p>给你一个字符串 s ，请你去除字符串中重复的字母，使得每个字母只出现一次。需保证 返回结果的字典序最小（要求不能打乱其他字符的相对位置）。</p>\n<h5 id=\"示例1\"><a href=\"#示例1\" class=\"headerlink\" title=\"示例1\"></a>示例1</h5><p>输入：s &#x3D; “bcabc”<br>输出：“abc”</p>\n<h5 id=\"示例2\"><a href=\"#示例2\" class=\"headerlink\" title=\"示例2\"></a>示例2</h5><p>输入：s &#x3D; “cbacdcbc”<br>输出：“acdb”</p>\n<h5 id=\"数据范围\"><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h5><p>1 &lt;&#x3D; s.length &lt;&#x3D; 104<br>s 由小写英文字母组成</p>\n<p>来源：力扣（LeetCode）<br><a href=\"https://leetcode-cn.com/problems/remove-duplicate-letters/\">https://leetcode-cn.com/problems/remove-duplicate-letters/</a></p>\n<h5 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\"> * 算法思想</span><br><span class=\"hljs-comment\"> * 当字典序最小时，即12341 12351 主要看4，5的位置</span><br><span class=\"hljs-comment\"> * 用栈存储，当栈空时直接入栈</span><br><span class=\"hljs-comment\"> * 栈不为空时，</span><br><span class=\"hljs-comment\"> * \t若栈中包含当前要入栈的元素直接跳到下一次循环。（结果字符串每个字符只含有一次）</span><br><span class=\"hljs-comment\"> * \t若当前要入栈的字母比栈顶字母大时，考虑是否栈顶元素出栈</span><br><span class=\"hljs-comment\"> * \t若栈顶元素在剩余字符串中仍然存在，那么就可以出栈，出栈后继续判断新的栈顶元素是否出栈。</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">util</span>.<span class=\"hljs-property\">Stack</span>;<br><br>public <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RemoveDuplicateLetters</span> &#123;<br><br>    public <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">removeDuplicateLetters</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> s</span>)&#123;<br>        <span class=\"hljs-title class_\">Stack</span>&lt;<span class=\"hljs-title class_\">Character</span>&gt; stack = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Stack</span>&lt;<span class=\"hljs-title class_\">Character</span>&gt;();<br>            <span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &lt; s.<span class=\"hljs-title function_\">length</span>(); i++) &#123;<br>                char c=s.<span class=\"hljs-title function_\">charAt</span>(i);<br>                <span class=\"hljs-keyword\">if</span>(stack.<span class=\"hljs-title function_\">contains</span>(c))<br>                    <span class=\"hljs-keyword\">continue</span>;<br>                <span class=\"hljs-keyword\">while</span>(!stack.<span class=\"hljs-title function_\">isEmpty</span>() &amp;&amp; stack.<span class=\"hljs-title function_\">peek</span>()&gt;c &amp;&amp; s.<span class=\"hljs-title function_\">indexOf</span>(stack.<span class=\"hljs-title function_\">peek</span>(),i)!=-<span class=\"hljs-number\">1</span>)<br>                    stack.<span class=\"hljs-title function_\">pop</span>();<br>                stack.<span class=\"hljs-title function_\">push</span>(c);<br>            &#125;<br>            char chars[]=<span class=\"hljs-keyword\">new</span> char[stack.<span class=\"hljs-title function_\">size</span>()];<br>            <span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &lt; stack.<span class=\"hljs-title function_\">size</span>(); i++) &#123;<br>                chars[i]=stack.<span class=\"hljs-title function_\">get</span>(i);<br>            &#125;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(chars);<br>    &#125;<br><br>    public <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span>[] args</span>) &#123;<br>        <span class=\"hljs-title class_\">String</span> string = <span class=\"hljs-string\">&quot;bbcaac&quot;</span>;<br>        <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-title function_\">removeDuplicateLetters</span>(string));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"回溯算法之八皇后问题（Java实现）","author":null,"date":"2021-04-06T01:16:06.000Z","_content":"#### 要求用回溯法求解 8-皇后问题\n\n八皇后问题：使放置在 8/*8 棋盘上的 8 个皇后彼此不受攻击。\n \n即：任何两个皇后都不在同一行、同一列或同一斜线上。\n \n请输出 8 皇后问题的所有可行解的总数。\n \n```js \npublic class EightQueen {\n\t\n    public static int[][] array = new int[8][8];\n    public static int sum;\n\t\n    public static void main(String[] args) {\n\t\t\n        search(0);\n        System.out.println(sum);\n\t\t\n    }\n\t\n    public static void search(int i){\n        if(i > 7){\n            sum++;\n            return;\n        }\n        for(int j = 0; j < 8; j++){\n            if(check(i, j)){\n                array[i][j] = 1;\n                search(i+1);\n                array[i][j] = 0;\n            }\n        }\n    }\n\t\n    public static boolean check(int i, int j){\n        for(int k = 0; k < i; k++){\n            if(array[k][j] == 1){\n                return false;\n            }\n        }\n\t\t\n        for(int m = i-1, n = j-1; m>=0&& n>=0; m--, n--){\n            if(array[m][n] == 1){\n                return false;\n            }\n        }\n\t\t\n        for(int m = i-1, n = j+1; m>=0&& n<=7; m--, n++){\n            if(array[m][n] == 1){\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```","source":"_posts/回溯算法之八皇后问题（Java实现）.md","raw":"---\ntitle: 回溯算法之八皇后问题（Java实现）\nauthor: \ntags: \n       - leetcode\n\ncategory: \n       - 算法\n\ndate: 2021-04-06 09:16:06\n---\n#### 要求用回溯法求解 8-皇后问题\n\n八皇后问题：使放置在 8/*8 棋盘上的 8 个皇后彼此不受攻击。\n \n即：任何两个皇后都不在同一行、同一列或同一斜线上。\n \n请输出 8 皇后问题的所有可行解的总数。\n \n```js \npublic class EightQueen {\n\t\n    public static int[][] array = new int[8][8];\n    public static int sum;\n\t\n    public static void main(String[] args) {\n\t\t\n        search(0);\n        System.out.println(sum);\n\t\t\n    }\n\t\n    public static void search(int i){\n        if(i > 7){\n            sum++;\n            return;\n        }\n        for(int j = 0; j < 8; j++){\n            if(check(i, j)){\n                array[i][j] = 1;\n                search(i+1);\n                array[i][j] = 0;\n            }\n        }\n    }\n\t\n    public static boolean check(int i, int j){\n        for(int k = 0; k < i; k++){\n            if(array[k][j] == 1){\n                return false;\n            }\n        }\n\t\t\n        for(int m = i-1, n = j-1; m>=0&& n>=0; m--, n--){\n            if(array[m][n] == 1){\n                return false;\n            }\n        }\n\t\t\n        for(int m = i-1, n = j+1; m>=0&& n<=7; m--, n++){\n            if(array[m][n] == 1){\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```","slug":"回溯算法之八皇后问题（Java实现）","published":1,"updated":"2024-03-15T08:23:46.837Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clttq59bs001uzwveesqv2b99","content":"<h4 id=\"要求用回溯法求解-8-皇后问题\"><a href=\"#要求用回溯法求解-8-皇后问题\" class=\"headerlink\" title=\"要求用回溯法求解 8-皇后问题\"></a>要求用回溯法求解 8-皇后问题</h4><p>八皇后问题：使放置在 8&#x2F;*8 棋盘上的 8 个皇后彼此不受攻击。</p>\n<p>即：任何两个皇后都不在同一行、同一列或同一斜线上。</p>\n<p>请输出 8 皇后问题的所有可行解的总数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">public <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">EightQueen</span> &#123;<br>\t<br>    public <span class=\"hljs-keyword\">static</span> int[][] array = <span class=\"hljs-keyword\">new</span> int[<span class=\"hljs-number\">8</span>][<span class=\"hljs-number\">8</span>];<br>    public <span class=\"hljs-keyword\">static</span> int sum;<br>\t<br>    public <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span>[] args</span>) &#123;<br>\t\t<br>        <span class=\"hljs-title function_\">search</span>(<span class=\"hljs-number\">0</span>);<br>        <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(sum);<br>\t\t<br>    &#125;<br>\t<br>    public <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">search</span>(<span class=\"hljs-params\">int i</span>)&#123;<br>        <span class=\"hljs-keyword\">if</span>(i &gt; <span class=\"hljs-number\">7</span>)&#123;<br>            sum++;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span>(int j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">8</span>; j++)&#123;<br>            <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-title function_\">check</span>(i, j))&#123;<br>                array[i][j] = <span class=\"hljs-number\">1</span>;<br>                <span class=\"hljs-title function_\">search</span>(i+<span class=\"hljs-number\">1</span>);<br>                array[i][j] = <span class=\"hljs-number\">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>\t<br>    public <span class=\"hljs-keyword\">static</span> boolean <span class=\"hljs-title function_\">check</span>(<span class=\"hljs-params\">int i, int j</span>)&#123;<br>        <span class=\"hljs-keyword\">for</span>(int k = <span class=\"hljs-number\">0</span>; k &lt; i; k++)&#123;<br>            <span class=\"hljs-keyword\">if</span>(array[k][j] == <span class=\"hljs-number\">1</span>)&#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>            &#125;<br>        &#125;<br>\t\t<br>        <span class=\"hljs-keyword\">for</span>(int m = i-<span class=\"hljs-number\">1</span>, n = j-<span class=\"hljs-number\">1</span>; m&gt;=<span class=\"hljs-number\">0</span>&amp;&amp; n&gt;=<span class=\"hljs-number\">0</span>; m--, n--)&#123;<br>            <span class=\"hljs-keyword\">if</span>(array[m][n] == <span class=\"hljs-number\">1</span>)&#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>            &#125;<br>        &#125;<br>\t\t<br>        <span class=\"hljs-keyword\">for</span>(int m = i-<span class=\"hljs-number\">1</span>, n = j+<span class=\"hljs-number\">1</span>; m&gt;=<span class=\"hljs-number\">0</span>&amp;&amp; n&lt;=<span class=\"hljs-number\">7</span>; m--, n++)&#123;<br>            <span class=\"hljs-keyword\">if</span>(array[m][n] == <span class=\"hljs-number\">1</span>)&#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"要求用回溯法求解-8-皇后问题\"><a href=\"#要求用回溯法求解-8-皇后问题\" class=\"headerlink\" title=\"要求用回溯法求解 8-皇后问题\"></a>要求用回溯法求解 8-皇后问题</h4><p>八皇后问题：使放置在 8&#x2F;*8 棋盘上的 8 个皇后彼此不受攻击。</p>\n<p>即：任何两个皇后都不在同一行、同一列或同一斜线上。</p>\n<p>请输出 8 皇后问题的所有可行解的总数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">public <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">EightQueen</span> &#123;<br>\t<br>    public <span class=\"hljs-keyword\">static</span> int[][] array = <span class=\"hljs-keyword\">new</span> int[<span class=\"hljs-number\">8</span>][<span class=\"hljs-number\">8</span>];<br>    public <span class=\"hljs-keyword\">static</span> int sum;<br>\t<br>    public <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span>[] args</span>) &#123;<br>\t\t<br>        <span class=\"hljs-title function_\">search</span>(<span class=\"hljs-number\">0</span>);<br>        <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(sum);<br>\t\t<br>    &#125;<br>\t<br>    public <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">search</span>(<span class=\"hljs-params\">int i</span>)&#123;<br>        <span class=\"hljs-keyword\">if</span>(i &gt; <span class=\"hljs-number\">7</span>)&#123;<br>            sum++;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span>(int j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">8</span>; j++)&#123;<br>            <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-title function_\">check</span>(i, j))&#123;<br>                array[i][j] = <span class=\"hljs-number\">1</span>;<br>                <span class=\"hljs-title function_\">search</span>(i+<span class=\"hljs-number\">1</span>);<br>                array[i][j] = <span class=\"hljs-number\">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>\t<br>    public <span class=\"hljs-keyword\">static</span> boolean <span class=\"hljs-title function_\">check</span>(<span class=\"hljs-params\">int i, int j</span>)&#123;<br>        <span class=\"hljs-keyword\">for</span>(int k = <span class=\"hljs-number\">0</span>; k &lt; i; k++)&#123;<br>            <span class=\"hljs-keyword\">if</span>(array[k][j] == <span class=\"hljs-number\">1</span>)&#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>            &#125;<br>        &#125;<br>\t\t<br>        <span class=\"hljs-keyword\">for</span>(int m = i-<span class=\"hljs-number\">1</span>, n = j-<span class=\"hljs-number\">1</span>; m&gt;=<span class=\"hljs-number\">0</span>&amp;&amp; n&gt;=<span class=\"hljs-number\">0</span>; m--, n--)&#123;<br>            <span class=\"hljs-keyword\">if</span>(array[m][n] == <span class=\"hljs-number\">1</span>)&#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>            &#125;<br>        &#125;<br>\t\t<br>        <span class=\"hljs-keyword\">for</span>(int m = i-<span class=\"hljs-number\">1</span>, n = j+<span class=\"hljs-number\">1</span>; m&gt;=<span class=\"hljs-number\">0</span>&amp;&amp; n&lt;=<span class=\"hljs-number\">7</span>; m--, n++)&#123;<br>            <span class=\"hljs-keyword\">if</span>(array[m][n] == <span class=\"hljs-number\">1</span>)&#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"变进制数-算法","author":null,"date":"2020-11-29T07:23:26.000Z","_content":"![在这里插入图片描述](https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151945541.png)\n\n答案\n```js \nimport java.util.Scanner;\n\nclass Solution{\n    \n\tpublic static void main(String[] args) {\n    \n\t\tScanner scanner = new Scanner(System.in);\n\t\tint[] jinzhi = {\n    1,2,3,5,7,11,13,17,19,23};\n\t\tString string = scanner.next();\n\t\tint len = string.length();\n\t\tint res = 0;\n\t\tfor(int i=0; i<len; i++) {\n    \n\t\t\tchar ch = string.charAt(i);\n\t\t\tint x = 0;\n\t\t\tif(ch <= 57) {\n    \n\t\t\t\tx = ch-48;\n\t\t\t}else {\n    \n\t\t\t\tx = ch-97;\n\t\t\t}\n\t\t\tres = (res+x) * jinzhi[len-i-1];\n\t\t}\n\t\tSystem.out.println(res);\n\t}\n}\n```","source":"_posts/变进制数-算法.md","raw":"---\ntitle: 变进制数-算法\nauthor: \ntags: \n       - 算法\n\ncategory: \n       - 算法\n\ndate: 2020-11-29 15:23:26\n---\n![在这里插入图片描述](https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151945541.png)\n\n答案\n```js \nimport java.util.Scanner;\n\nclass Solution{\n    \n\tpublic static void main(String[] args) {\n    \n\t\tScanner scanner = new Scanner(System.in);\n\t\tint[] jinzhi = {\n    1,2,3,5,7,11,13,17,19,23};\n\t\tString string = scanner.next();\n\t\tint len = string.length();\n\t\tint res = 0;\n\t\tfor(int i=0; i<len; i++) {\n    \n\t\t\tchar ch = string.charAt(i);\n\t\t\tint x = 0;\n\t\t\tif(ch <= 57) {\n    \n\t\t\t\tx = ch-48;\n\t\t\t}else {\n    \n\t\t\t\tx = ch-97;\n\t\t\t}\n\t\t\tres = (res+x) * jinzhi[len-i-1];\n\t\t}\n\t\tSystem.out.println(res);\n\t}\n}\n```","slug":"变进制数-算法","published":1,"updated":"2024-03-15T11:45:23.702Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clttq59bu001yzwvebokg8g0y","content":"<p><img src=\"https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151945541.png\" alt=\"在这里插入图片描述\"></p>\n<p>答案</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">util</span>.<span class=\"hljs-property\">Scanner</span>;<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span>&#123;<br>    <br>\tpublic <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span>[] args</span>) &#123;<br>    <br>\t\t<span class=\"hljs-title class_\">Scanner</span> scanner = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">in</span>);<br>\t\tint[] jinzhi = &#123;<br>    <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">11</span>,<span class=\"hljs-number\">13</span>,<span class=\"hljs-number\">17</span>,<span class=\"hljs-number\">19</span>,<span class=\"hljs-number\">23</span>&#125;;<br>\t\t<span class=\"hljs-title class_\">String</span> string = scanner.<span class=\"hljs-title function_\">next</span>();<br>\t\tint len = string.<span class=\"hljs-title function_\">length</span>();<br>\t\tint res = <span class=\"hljs-number\">0</span>;<br>\t\t<span class=\"hljs-keyword\">for</span>(int i=<span class=\"hljs-number\">0</span>; i&lt;len; i++) &#123;<br>    <br>\t\t\tchar ch = string.<span class=\"hljs-title function_\">charAt</span>(i);<br>\t\t\tint x = <span class=\"hljs-number\">0</span>;<br>\t\t\t<span class=\"hljs-keyword\">if</span>(ch &lt;= <span class=\"hljs-number\">57</span>) &#123;<br>    <br>\t\t\t\tx = ch-<span class=\"hljs-number\">48</span>;<br>\t\t\t&#125;<span class=\"hljs-keyword\">else</span> &#123;<br>    <br>\t\t\t\tx = ch-<span class=\"hljs-number\">97</span>;<br>\t\t\t&#125;<br>\t\t\tres = (res+x) * jinzhi[len-i-<span class=\"hljs-number\">1</span>];<br>\t\t&#125;<br>\t\t<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(res);<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151945541.png\" alt=\"在这里插入图片描述\"></p>\n<p>答案</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">util</span>.<span class=\"hljs-property\">Scanner</span>;<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span>&#123;<br>    <br>\tpublic <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span>[] args</span>) &#123;<br>    <br>\t\t<span class=\"hljs-title class_\">Scanner</span> scanner = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">in</span>);<br>\t\tint[] jinzhi = &#123;<br>    <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">11</span>,<span class=\"hljs-number\">13</span>,<span class=\"hljs-number\">17</span>,<span class=\"hljs-number\">19</span>,<span class=\"hljs-number\">23</span>&#125;;<br>\t\t<span class=\"hljs-title class_\">String</span> string = scanner.<span class=\"hljs-title function_\">next</span>();<br>\t\tint len = string.<span class=\"hljs-title function_\">length</span>();<br>\t\tint res = <span class=\"hljs-number\">0</span>;<br>\t\t<span class=\"hljs-keyword\">for</span>(int i=<span class=\"hljs-number\">0</span>; i&lt;len; i++) &#123;<br>    <br>\t\t\tchar ch = string.<span class=\"hljs-title function_\">charAt</span>(i);<br>\t\t\tint x = <span class=\"hljs-number\">0</span>;<br>\t\t\t<span class=\"hljs-keyword\">if</span>(ch &lt;= <span class=\"hljs-number\">57</span>) &#123;<br>    <br>\t\t\t\tx = ch-<span class=\"hljs-number\">48</span>;<br>\t\t\t&#125;<span class=\"hljs-keyword\">else</span> &#123;<br>    <br>\t\t\t\tx = ch-<span class=\"hljs-number\">97</span>;<br>\t\t\t&#125;<br>\t\t\tres = (res+x) * jinzhi[len-i-<span class=\"hljs-number\">1</span>];<br>\t\t&#125;<br>\t\t<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(res);<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"回溯算法之装载问题（Java实现）","author":null,"date":"2021-04-06T01:15:35.000Z","_content":"#### 问题描述\n\n用回溯法编写一个递归程序解决如下装载问题：\n有 n 个集装箱要装上 2 艘载重分别为 c1 和 c2的轮船，其中集装箱 i 的\n重量为 wi（1≤ i ≤ n），且∑ 𝑤𝑖 ≤ 𝑐1 + 𝑐2 。\n问是否有一个合理的装载方案可以将这 n 个集装箱装上这 2 艘轮船？如果有，请给出装载方案。\n\n##### 示例\n\n当 n=3，c1=c2=50，且 w=[10,40,40]时，可以将集装箱 1 和 2 装到第一艘轮船上，集装箱3装到第二艘轮船上；\n如果 w=[20,40,40]时，无法将这 3 个集装箱都装上轮船。\n\nJava代码\n\n```js \nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class Load {\n\t\n    public static int weight1;  //记录第一艘船的载重能力\n    public static int weight2;  //记录第二艘船的载重能力\n\t\n    public static int sum1 = 0,sum2 = 0;        //分别代表此时第一艘船的载重和所有集装箱的总重量\n    public static int[] arr;                    //记录集装箱的重量\n    public static int n;                        //集装箱的个数\n    public static List<Integer> list = new ArrayList<Integer>(); //第一艘船的集装箱的装载的重量\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        n = scanner.nextInt();\n        arr = new int[n];\n        weight1 = scanner.nextInt();\n        weight2 = scanner.nextInt();\n        for (int i = 0; i < n; i++) {\n            arr[i] = scanner.nextInt();\n            sum2 += arr[i];\n        }\n        scanner.close();\n        backtrack(0);\n    }\n    public static void backtrack(int i) {\n        if(sum1 > weight1) {   // 如若超载，则回溯\n            return;\n        }\n        if(i == n) {\n            if(sum2 - sum1 < weight2) {      \n                System.out.println(list);\n            }\n            return;\n        }\n        sum1 += arr[i];\n        list.add(arr[i]);\n        backtrack(i+1);\n        sum1 -= arr[i];\n        list.remove(list.size()-1);\n        backtrack(i+1);\n\t\t\n    }\n}\n```","source":"_posts/回溯算法之装载问题（Java实现）.md","raw":"---\ntitle: 回溯算法之装载问题（Java实现）\nauthor: \ntags: \n       - leetcode\n\ncategory: \n       - 算法\n\ndate: 2021-04-06 09:15:35\n---\n#### 问题描述\n\n用回溯法编写一个递归程序解决如下装载问题：\n有 n 个集装箱要装上 2 艘载重分别为 c1 和 c2的轮船，其中集装箱 i 的\n重量为 wi（1≤ i ≤ n），且∑ 𝑤𝑖 ≤ 𝑐1 + 𝑐2 。\n问是否有一个合理的装载方案可以将这 n 个集装箱装上这 2 艘轮船？如果有，请给出装载方案。\n\n##### 示例\n\n当 n=3，c1=c2=50，且 w=[10,40,40]时，可以将集装箱 1 和 2 装到第一艘轮船上，集装箱3装到第二艘轮船上；\n如果 w=[20,40,40]时，无法将这 3 个集装箱都装上轮船。\n\nJava代码\n\n```js \nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class Load {\n\t\n    public static int weight1;  //记录第一艘船的载重能力\n    public static int weight2;  //记录第二艘船的载重能力\n\t\n    public static int sum1 = 0,sum2 = 0;        //分别代表此时第一艘船的载重和所有集装箱的总重量\n    public static int[] arr;                    //记录集装箱的重量\n    public static int n;                        //集装箱的个数\n    public static List<Integer> list = new ArrayList<Integer>(); //第一艘船的集装箱的装载的重量\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        n = scanner.nextInt();\n        arr = new int[n];\n        weight1 = scanner.nextInt();\n        weight2 = scanner.nextInt();\n        for (int i = 0; i < n; i++) {\n            arr[i] = scanner.nextInt();\n            sum2 += arr[i];\n        }\n        scanner.close();\n        backtrack(0);\n    }\n    public static void backtrack(int i) {\n        if(sum1 > weight1) {   // 如若超载，则回溯\n            return;\n        }\n        if(i == n) {\n            if(sum2 - sum1 < weight2) {      \n                System.out.println(list);\n            }\n            return;\n        }\n        sum1 += arr[i];\n        list.add(arr[i]);\n        backtrack(i+1);\n        sum1 -= arr[i];\n        list.remove(list.size()-1);\n        backtrack(i+1);\n\t\t\n    }\n}\n```","slug":"回溯算法之装载问题（Java实现）","published":1,"updated":"2024-03-15T08:23:47.580Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clttq59bv0022zwvegxpw572g","content":"<h4 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h4><p>用回溯法编写一个递归程序解决如下装载问题：<br>有 n 个集装箱要装上 2 艘载重分别为 c1 和 c2的轮船，其中集装箱 i 的<br>重量为 wi（1≤ i ≤ n），且∑ 𝑤𝑖 ≤ 𝑐1 + 𝑐2 。<br>问是否有一个合理的装载方案可以将这 n 个集装箱装上这 2 艘轮船？如果有，请给出装载方案。</p>\n<h5 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h5><p>当 n&#x3D;3，c1&#x3D;c2&#x3D;50，且 w&#x3D;[10,40,40]时，可以将集装箱 1 和 2 装到第一艘轮船上，集装箱3装到第二艘轮船上；<br>如果 w&#x3D;[20,40,40]时，无法将这 3 个集装箱都装上轮船。</p>\n<p>Java代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">util</span>.<span class=\"hljs-property\">ArrayList</span>;<br><span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">util</span>.<span class=\"hljs-property\">List</span>;<br><span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">util</span>.<span class=\"hljs-property\">Scanner</span>;<br><br>public <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Load</span> &#123;<br>\t<br>    public <span class=\"hljs-keyword\">static</span> int weight1;  <span class=\"hljs-comment\">//记录第一艘船的载重能力</span><br>    public <span class=\"hljs-keyword\">static</span> int weight2;  <span class=\"hljs-comment\">//记录第二艘船的载重能力</span><br>\t<br>    public <span class=\"hljs-keyword\">static</span> int sum1 = <span class=\"hljs-number\">0</span>,sum2 = <span class=\"hljs-number\">0</span>;        <span class=\"hljs-comment\">//分别代表此时第一艘船的载重和所有集装箱的总重量</span><br>    public <span class=\"hljs-keyword\">static</span> int[] arr;                    <span class=\"hljs-comment\">//记录集装箱的重量</span><br>    public <span class=\"hljs-keyword\">static</span> int n;                        <span class=\"hljs-comment\">//集装箱的个数</span><br>    public <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title class_\">List</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt; list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt;(); <span class=\"hljs-comment\">//第一艘船的集装箱的装载的重量</span><br>    public <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span>[] args</span>) &#123;<br>        <span class=\"hljs-title class_\">Scanner</span> scanner = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">in</span>);<br>        n = scanner.<span class=\"hljs-title function_\">nextInt</span>();<br>        arr = <span class=\"hljs-keyword\">new</span> int[n];<br>        weight1 = scanner.<span class=\"hljs-title function_\">nextInt</span>();<br>        weight2 = scanner.<span class=\"hljs-title function_\">nextInt</span>();<br>        <span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) &#123;<br>            arr[i] = scanner.<span class=\"hljs-title function_\">nextInt</span>();<br>            sum2 += arr[i];<br>        &#125;<br>        scanner.<span class=\"hljs-title function_\">close</span>();<br>        <span class=\"hljs-title function_\">backtrack</span>(<span class=\"hljs-number\">0</span>);<br>    &#125;<br>    public <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">backtrack</span>(<span class=\"hljs-params\">int i</span>) &#123;<br>        <span class=\"hljs-keyword\">if</span>(sum1 &gt; weight1) &#123;   <span class=\"hljs-comment\">// 如若超载，则回溯</span><br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(i == n) &#123;<br>            <span class=\"hljs-keyword\">if</span>(sum2 - sum1 &lt; weight2) &#123;      <br>                <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(list);<br>            &#125;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        sum1 += arr[i];<br>        list.<span class=\"hljs-title function_\">add</span>(arr[i]);<br>        <span class=\"hljs-title function_\">backtrack</span>(i+<span class=\"hljs-number\">1</span>);<br>        sum1 -= arr[i];<br>        list.<span class=\"hljs-title function_\">remove</span>(list.<span class=\"hljs-title function_\">size</span>()-<span class=\"hljs-number\">1</span>);<br>        <span class=\"hljs-title function_\">backtrack</span>(i+<span class=\"hljs-number\">1</span>);<br>\t\t<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h4><p>用回溯法编写一个递归程序解决如下装载问题：<br>有 n 个集装箱要装上 2 艘载重分别为 c1 和 c2的轮船，其中集装箱 i 的<br>重量为 wi（1≤ i ≤ n），且∑ 𝑤𝑖 ≤ 𝑐1 + 𝑐2 。<br>问是否有一个合理的装载方案可以将这 n 个集装箱装上这 2 艘轮船？如果有，请给出装载方案。</p>\n<h5 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h5><p>当 n&#x3D;3，c1&#x3D;c2&#x3D;50，且 w&#x3D;[10,40,40]时，可以将集装箱 1 和 2 装到第一艘轮船上，集装箱3装到第二艘轮船上；<br>如果 w&#x3D;[20,40,40]时，无法将这 3 个集装箱都装上轮船。</p>\n<p>Java代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">util</span>.<span class=\"hljs-property\">ArrayList</span>;<br><span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">util</span>.<span class=\"hljs-property\">List</span>;<br><span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">util</span>.<span class=\"hljs-property\">Scanner</span>;<br><br>public <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Load</span> &#123;<br>\t<br>    public <span class=\"hljs-keyword\">static</span> int weight1;  <span class=\"hljs-comment\">//记录第一艘船的载重能力</span><br>    public <span class=\"hljs-keyword\">static</span> int weight2;  <span class=\"hljs-comment\">//记录第二艘船的载重能力</span><br>\t<br>    public <span class=\"hljs-keyword\">static</span> int sum1 = <span class=\"hljs-number\">0</span>,sum2 = <span class=\"hljs-number\">0</span>;        <span class=\"hljs-comment\">//分别代表此时第一艘船的载重和所有集装箱的总重量</span><br>    public <span class=\"hljs-keyword\">static</span> int[] arr;                    <span class=\"hljs-comment\">//记录集装箱的重量</span><br>    public <span class=\"hljs-keyword\">static</span> int n;                        <span class=\"hljs-comment\">//集装箱的个数</span><br>    public <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title class_\">List</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt; list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt;(); <span class=\"hljs-comment\">//第一艘船的集装箱的装载的重量</span><br>    public <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span>[] args</span>) &#123;<br>        <span class=\"hljs-title class_\">Scanner</span> scanner = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">in</span>);<br>        n = scanner.<span class=\"hljs-title function_\">nextInt</span>();<br>        arr = <span class=\"hljs-keyword\">new</span> int[n];<br>        weight1 = scanner.<span class=\"hljs-title function_\">nextInt</span>();<br>        weight2 = scanner.<span class=\"hljs-title function_\">nextInt</span>();<br>        <span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) &#123;<br>            arr[i] = scanner.<span class=\"hljs-title function_\">nextInt</span>();<br>            sum2 += arr[i];<br>        &#125;<br>        scanner.<span class=\"hljs-title function_\">close</span>();<br>        <span class=\"hljs-title function_\">backtrack</span>(<span class=\"hljs-number\">0</span>);<br>    &#125;<br>    public <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">backtrack</span>(<span class=\"hljs-params\">int i</span>) &#123;<br>        <span class=\"hljs-keyword\">if</span>(sum1 &gt; weight1) &#123;   <span class=\"hljs-comment\">// 如若超载，则回溯</span><br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(i == n) &#123;<br>            <span class=\"hljs-keyword\">if</span>(sum2 - sum1 &lt; weight2) &#123;      <br>                <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(list);<br>            &#125;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        sum1 += arr[i];<br>        list.<span class=\"hljs-title function_\">add</span>(arr[i]);<br>        <span class=\"hljs-title function_\">backtrack</span>(i+<span class=\"hljs-number\">1</span>);<br>        sum1 -= arr[i];<br>        list.<span class=\"hljs-title function_\">remove</span>(list.<span class=\"hljs-title function_\">size</span>()-<span class=\"hljs-number\">1</span>);<br>        <span class=\"hljs-title function_\">backtrack</span>(i+<span class=\"hljs-number\">1</span>);<br>\t\t<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"多数元素（leetcode169）","author":null,"date":"2022-01-13T09:10:07.000Z","_content":"### 多数元素leetcode169\n\n##### 1、题目\n\n给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数 大于 ⌊ n/2 ⌋ 的元素。\n你可以假设数组是非空的，并且给定的数组总是存在多数元素。\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/majority-element\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\n点击跳转力扣169多数元素https://leetcode-cn.com/problems/majority-element/\n\n##### 2、思路\n\n摩尔投票算法。\n\n个人理解：\n\n记录第一个数为flag，初始化count为1，从第二个数开始遍历，当前元素与flag相等时，count++；\n当前元素与flag不相等时，count–，当count为0时，记录下一个元素为flag，遍历到末尾则flag为最终结果。\n\n原理\n\n两两抵消，flag元素和非flag元素。当flag元素全部抵消（count==0）时，下一个元素为新的flag。最终剩下的即为多数元素。\n\n##### 3、代码\n\n```js \nclass Solution {\n    \npublic:\n    int majorityElement(vector<int>& nums) {\n    \n        int flag = *nums.begin();\n        int count=1;\n        for(auto i=nums.begin()+1; i<nums.end(); i++){\n    \n            if(flag == *i){\n    \n                count++;\n                if(count > nums.size()/2){\n    \n                    return flag;\n                }\n            }else{\n    \n                count--;\n                if(count == 0){\n    \n                    flag = *(++i);\n                    count = 1;\n                }\n            }\n        }\n        return flag;\n    }\n};\n```","source":"_posts/多数元素（leetcode169）.md","raw":"---\ntitle: 多数元素（leetcode169）\nauthor: \ntags: \n       - 数据结构\n\ncategory: \n       - 算法\n\ndate: 2022-01-13 17:10:07\n---\n### 多数元素leetcode169\n\n##### 1、题目\n\n给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数 大于 ⌊ n/2 ⌋ 的元素。\n你可以假设数组是非空的，并且给定的数组总是存在多数元素。\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/majority-element\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\n点击跳转力扣169多数元素https://leetcode-cn.com/problems/majority-element/\n\n##### 2、思路\n\n摩尔投票算法。\n\n个人理解：\n\n记录第一个数为flag，初始化count为1，从第二个数开始遍历，当前元素与flag相等时，count++；\n当前元素与flag不相等时，count–，当count为0时，记录下一个元素为flag，遍历到末尾则flag为最终结果。\n\n原理\n\n两两抵消，flag元素和非flag元素。当flag元素全部抵消（count==0）时，下一个元素为新的flag。最终剩下的即为多数元素。\n\n##### 3、代码\n\n```js \nclass Solution {\n    \npublic:\n    int majorityElement(vector<int>& nums) {\n    \n        int flag = *nums.begin();\n        int count=1;\n        for(auto i=nums.begin()+1; i<nums.end(); i++){\n    \n            if(flag == *i){\n    \n                count++;\n                if(count > nums.size()/2){\n    \n                    return flag;\n                }\n            }else{\n    \n                count--;\n                if(count == 0){\n    \n                    flag = *(++i);\n                    count = 1;\n                }\n            }\n        }\n        return flag;\n    }\n};\n```","slug":"多数元素（leetcode169）","published":1,"updated":"2024-03-15T08:23:34.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clttq59bw0026zwve2nm5f743","content":"<h3 id=\"多数元素leetcode169\"><a href=\"#多数元素leetcode169\" class=\"headerlink\" title=\"多数元素leetcode169\"></a>多数元素leetcode169</h3><h5 id=\"1、题目\"><a href=\"#1、题目\" class=\"headerlink\" title=\"1、题目\"></a>1、题目</h5><p>给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数 大于 ⌊ n&#x2F;2 ⌋ 的元素。<br>你可以假设数组是非空的，并且给定的数组总是存在多数元素。<br>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/majority-element\">https://leetcode-cn.com/problems/majority-element</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。<br>点击跳转力扣169多数元素<a href=\"https://leetcode-cn.com/problems/majority-element/\">https://leetcode-cn.com/problems/majority-element/</a></p>\n<h5 id=\"2、思路\"><a href=\"#2、思路\" class=\"headerlink\" title=\"2、思路\"></a>2、思路</h5><p>摩尔投票算法。</p>\n<p>个人理解：</p>\n<p>记录第一个数为flag，初始化count为1，从第二个数开始遍历，当前元素与flag相等时，count++；<br>当前元素与flag不相等时，count–，当count为0时，记录下一个元素为flag，遍历到末尾则flag为最终结果。</p>\n<p>原理</p>\n<p>两两抵消，flag元素和非flag元素。当flag元素全部抵消（count&#x3D;&#x3D;0）时，下一个元素为新的flag。最终剩下的即为多数元素。</p>\n<h5 id=\"3、代码\"><a href=\"#3、代码\" class=\"headerlink\" title=\"3、代码\"></a>3、代码</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br>    <br><span class=\"hljs-attr\">public</span>:<br>    int <span class=\"hljs-title function_\">majorityElement</span>(<span class=\"hljs-params\">vector&lt;int&gt;&amp; nums</span>) &#123;<br>    <br>        int flag = *nums.<span class=\"hljs-title function_\">begin</span>();<br>        int count=<span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span>(auto i=nums.<span class=\"hljs-title function_\">begin</span>()+<span class=\"hljs-number\">1</span>; i&lt;nums.<span class=\"hljs-title function_\">end</span>(); i++)&#123;<br>    <br>            <span class=\"hljs-keyword\">if</span>(flag == *i)&#123;<br>    <br>                count++;<br>                <span class=\"hljs-keyword\">if</span>(count &gt; nums.<span class=\"hljs-title function_\">size</span>()/<span class=\"hljs-number\">2</span>)&#123;<br>    <br>                    <span class=\"hljs-keyword\">return</span> flag;<br>                &#125;<br>            &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>    <br>                count--;<br>                <span class=\"hljs-keyword\">if</span>(count == <span class=\"hljs-number\">0</span>)&#123;<br>    <br>                    flag = *(++i);<br>                    count = <span class=\"hljs-number\">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> flag;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"多数元素leetcode169\"><a href=\"#多数元素leetcode169\" class=\"headerlink\" title=\"多数元素leetcode169\"></a>多数元素leetcode169</h3><h5 id=\"1、题目\"><a href=\"#1、题目\" class=\"headerlink\" title=\"1、题目\"></a>1、题目</h5><p>给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数 大于 ⌊ n&#x2F;2 ⌋ 的元素。<br>你可以假设数组是非空的，并且给定的数组总是存在多数元素。<br>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/majority-element\">https://leetcode-cn.com/problems/majority-element</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。<br>点击跳转力扣169多数元素<a href=\"https://leetcode-cn.com/problems/majority-element/\">https://leetcode-cn.com/problems/majority-element/</a></p>\n<h5 id=\"2、思路\"><a href=\"#2、思路\" class=\"headerlink\" title=\"2、思路\"></a>2、思路</h5><p>摩尔投票算法。</p>\n<p>个人理解：</p>\n<p>记录第一个数为flag，初始化count为1，从第二个数开始遍历，当前元素与flag相等时，count++；<br>当前元素与flag不相等时，count–，当count为0时，记录下一个元素为flag，遍历到末尾则flag为最终结果。</p>\n<p>原理</p>\n<p>两两抵消，flag元素和非flag元素。当flag元素全部抵消（count&#x3D;&#x3D;0）时，下一个元素为新的flag。最终剩下的即为多数元素。</p>\n<h5 id=\"3、代码\"><a href=\"#3、代码\" class=\"headerlink\" title=\"3、代码\"></a>3、代码</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br>    <br><span class=\"hljs-attr\">public</span>:<br>    int <span class=\"hljs-title function_\">majorityElement</span>(<span class=\"hljs-params\">vector&lt;int&gt;&amp; nums</span>) &#123;<br>    <br>        int flag = *nums.<span class=\"hljs-title function_\">begin</span>();<br>        int count=<span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span>(auto i=nums.<span class=\"hljs-title function_\">begin</span>()+<span class=\"hljs-number\">1</span>; i&lt;nums.<span class=\"hljs-title function_\">end</span>(); i++)&#123;<br>    <br>            <span class=\"hljs-keyword\">if</span>(flag == *i)&#123;<br>    <br>                count++;<br>                <span class=\"hljs-keyword\">if</span>(count &gt; nums.<span class=\"hljs-title function_\">size</span>()/<span class=\"hljs-number\">2</span>)&#123;<br>    <br>                    <span class=\"hljs-keyword\">return</span> flag;<br>                &#125;<br>            &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>    <br>                count--;<br>                <span class=\"hljs-keyword\">if</span>(count == <span class=\"hljs-number\">0</span>)&#123;<br>    <br>                    flag = *(++i);<br>                    count = <span class=\"hljs-number\">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> flag;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>"},{"title":"字符串需要至少多少次移动才能回文呢","author":null,"date":"2020-04-24T06:40:34.000Z","_content":"### 试题 基础练习 完美的代价\n\n##### 题目\n\n**问题描述**\n回文串，是一种特殊的字符串，它从左往右读和从右往左读是一样的。小龙龙认为回文串才是完美的。现在给你一个串，它不一定是回文的，请你计算最少的交换次数使得该串变成一个完美的回文串。\n交换的定义是：交换两个相邻的字符\n例如mamad\n第一次交换 ad : mamda\n第二次交换 md : madma\n第三次交换 ma : madam (回文！完美！)\n\n**输入格式**\n第一行是一个整数N，表示接下来的字符串的长度(N <= 8000)\n第二行是一个字符串，长度为N.只包含小写字母\n**输出格式**\n如果可能，输出最少的交换次数。\n否则输出Impossible\n**样例输入**\n5\nmamad\n\n**样例输出**\n3\n\n##### 问题分析\n\n字符串的长度有奇数和偶数两种可能。\n\nImpossible有两种可能：\n1，字符串长度为奇数，且至少含有两个只出现一次的字符\n2，字符串长度为偶数，且含有一个或多个只出现一次的字符\n\n##### 解决思路\n\n-》从字符数组的第一个位置开始，从后向前遍历寻找与其相同的字符。\n-》》》如果出现该字符，且并不是本身位置，那么将字符移到回文相对应的位置。\n-》》》如果找到该字符，且为本身位置，那么这个字符只出现了一次\n-》》》》》如若数组长度为偶数或曾经出现过单个字符，则打印impossible\n-》》》》》如若数组长度为奇数，记录曾出现过单个字符，并且该字符移向字符数组中间\n\n##### Java代码\n\n```js \nimport java.util.Scanner;\n\npublic class Main {\n    \n\tpublic static void main(String[] args) {\n    \n\t\t\n\t\tScanner scanner = new Scanner(System.in);\n\t\t\n\t\tint n;\n\t\tn = scanner.nextInt();\n\t\tString str;\n\t\tstr = scanner.next();\n\t\tscanner.close();\n\t\tchar[] chs = str.toCharArray();\n\t\tint j = n-1,count=0,flag=0;\n\t\tfor(int i=0; i < j; i++) {\n    \n\t\t\tfor(int k=j; k >= i; k--) {\n    \n\t\t\t\tif(i==k) {\n    \n\t\t\t\t\tif(n%2==0 || flag==1) {\n    \n\t\t\t\t\t\tSystem.out.println(\"Impossible\");\n\t\t\t\t\t\treturn ;\n\t\t\t\t\t}\n\t\t\t\t\tflag = 1;\n\t\t\t\t\tcount += n / 2 - i;\n\t\t\t\t}\n\t\t\t\telse if(chs[i] == chs[k]){\n    \n\t\t\t\t\tfor(int l = k; l < j; l++){\n    \n\t\t\t\t\t\tswap(chs,l,l+1);\n\t\t\t\t\t\tcount++;//统计交换次数\n\t\t            }\n\t\t            j--;\n\t\t            break;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tSystem.out.println(count);\n\t}\n\n\tprivate static void swap(char chs[],int i,int j) {\n    \n\t\tchar temp = chs[i];\n\t\tchs[i] = chs[j];\n\t\tchs[j] = temp;\n\t}\n}\n```","source":"_posts/字符串需要至少多少次移动才能回文呢.md","raw":"---\ntitle: 字符串需要至少多少次移动才能回文呢\nauthor: \ntags: \n       - java\n\ncategory: \n       - 算法\n\ndate: 2020-04-24 14:40:34\n---\n### 试题 基础练习 完美的代价\n\n##### 题目\n\n**问题描述**\n回文串，是一种特殊的字符串，它从左往右读和从右往左读是一样的。小龙龙认为回文串才是完美的。现在给你一个串，它不一定是回文的，请你计算最少的交换次数使得该串变成一个完美的回文串。\n交换的定义是：交换两个相邻的字符\n例如mamad\n第一次交换 ad : mamda\n第二次交换 md : madma\n第三次交换 ma : madam (回文！完美！)\n\n**输入格式**\n第一行是一个整数N，表示接下来的字符串的长度(N <= 8000)\n第二行是一个字符串，长度为N.只包含小写字母\n**输出格式**\n如果可能，输出最少的交换次数。\n否则输出Impossible\n**样例输入**\n5\nmamad\n\n**样例输出**\n3\n\n##### 问题分析\n\n字符串的长度有奇数和偶数两种可能。\n\nImpossible有两种可能：\n1，字符串长度为奇数，且至少含有两个只出现一次的字符\n2，字符串长度为偶数，且含有一个或多个只出现一次的字符\n\n##### 解决思路\n\n-》从字符数组的第一个位置开始，从后向前遍历寻找与其相同的字符。\n-》》》如果出现该字符，且并不是本身位置，那么将字符移到回文相对应的位置。\n-》》》如果找到该字符，且为本身位置，那么这个字符只出现了一次\n-》》》》》如若数组长度为偶数或曾经出现过单个字符，则打印impossible\n-》》》》》如若数组长度为奇数，记录曾出现过单个字符，并且该字符移向字符数组中间\n\n##### Java代码\n\n```js \nimport java.util.Scanner;\n\npublic class Main {\n    \n\tpublic static void main(String[] args) {\n    \n\t\t\n\t\tScanner scanner = new Scanner(System.in);\n\t\t\n\t\tint n;\n\t\tn = scanner.nextInt();\n\t\tString str;\n\t\tstr = scanner.next();\n\t\tscanner.close();\n\t\tchar[] chs = str.toCharArray();\n\t\tint j = n-1,count=0,flag=0;\n\t\tfor(int i=0; i < j; i++) {\n    \n\t\t\tfor(int k=j; k >= i; k--) {\n    \n\t\t\t\tif(i==k) {\n    \n\t\t\t\t\tif(n%2==0 || flag==1) {\n    \n\t\t\t\t\t\tSystem.out.println(\"Impossible\");\n\t\t\t\t\t\treturn ;\n\t\t\t\t\t}\n\t\t\t\t\tflag = 1;\n\t\t\t\t\tcount += n / 2 - i;\n\t\t\t\t}\n\t\t\t\telse if(chs[i] == chs[k]){\n    \n\t\t\t\t\tfor(int l = k; l < j; l++){\n    \n\t\t\t\t\t\tswap(chs,l,l+1);\n\t\t\t\t\t\tcount++;//统计交换次数\n\t\t            }\n\t\t            j--;\n\t\t            break;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tSystem.out.println(count);\n\t}\n\n\tprivate static void swap(char chs[],int i,int j) {\n    \n\t\tchar temp = chs[i];\n\t\tchs[i] = chs[j];\n\t\tchs[j] = temp;\n\t}\n}\n```","slug":"字符串需要至少多少次移动才能回文呢","published":1,"updated":"2024-03-15T08:24:00.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clttq59bx002azwvecqgzeaen","content":"<h3 id=\"试题-基础练习-完美的代价\"><a href=\"#试题-基础练习-完美的代价\" class=\"headerlink\" title=\"试题 基础练习 完美的代价\"></a>试题 基础练习 完美的代价</h3><h5 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h5><p><strong>问题描述</strong><br>回文串，是一种特殊的字符串，它从左往右读和从右往左读是一样的。小龙龙认为回文串才是完美的。现在给你一个串，它不一定是回文的，请你计算最少的交换次数使得该串变成一个完美的回文串。<br>交换的定义是：交换两个相邻的字符<br>例如mamad<br>第一次交换 ad : mamda<br>第二次交换 md : madma<br>第三次交换 ma : madam (回文！完美！)</p>\n<p><strong>输入格式</strong><br>第一行是一个整数N，表示接下来的字符串的长度(N &lt;&#x3D; 8000)<br>第二行是一个字符串，长度为N.只包含小写字母<br><strong>输出格式</strong><br>如果可能，输出最少的交换次数。<br>否则输出Impossible<br><strong>样例输入</strong><br>5<br>mamad</p>\n<p><strong>样例输出</strong><br>3</p>\n<h5 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h5><p>字符串的长度有奇数和偶数两种可能。</p>\n<p>Impossible有两种可能：<br>1，字符串长度为奇数，且至少含有两个只出现一次的字符<br>2，字符串长度为偶数，且含有一个或多个只出现一次的字符</p>\n<h5 id=\"解决思路\"><a href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"></a>解决思路</h5><p>-》从字符数组的第一个位置开始，从后向前遍历寻找与其相同的字符。<br>-》》》如果出现该字符，且并不是本身位置，那么将字符移到回文相对应的位置。<br>-》》》如果找到该字符，且为本身位置，那么这个字符只出现了一次<br>-》》》》》如若数组长度为偶数或曾经出现过单个字符，则打印impossible<br>-》》》》》如若数组长度为奇数，记录曾出现过单个字符，并且该字符移向字符数组中间</p>\n<h5 id=\"Java代码\"><a href=\"#Java代码\" class=\"headerlink\" title=\"Java代码\"></a>Java代码</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">util</span>.<span class=\"hljs-property\">Scanner</span>;<br><br>public <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Main</span> &#123;<br>    <br>\tpublic <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span>[] args</span>) &#123;<br>    <br>\t\t<br>\t\t<span class=\"hljs-title class_\">Scanner</span> scanner = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">in</span>);<br>\t\t<br>\t\tint n;<br>\t\tn = scanner.<span class=\"hljs-title function_\">nextInt</span>();<br>\t\t<span class=\"hljs-title class_\">String</span> str;<br>\t\tstr = scanner.<span class=\"hljs-title function_\">next</span>();<br>\t\tscanner.<span class=\"hljs-title function_\">close</span>();<br>\t\tchar[] chs = str.<span class=\"hljs-title function_\">toCharArray</span>();<br>\t\tint j = n-<span class=\"hljs-number\">1</span>,count=<span class=\"hljs-number\">0</span>,flag=<span class=\"hljs-number\">0</span>;<br>\t\t<span class=\"hljs-keyword\">for</span>(int i=<span class=\"hljs-number\">0</span>; i &lt; j; i++) &#123;<br>    <br>\t\t\t<span class=\"hljs-keyword\">for</span>(int k=j; k &gt;= i; k--) &#123;<br>    <br>\t\t\t\t<span class=\"hljs-keyword\">if</span>(i==k) &#123;<br>    <br>\t\t\t\t\t<span class=\"hljs-keyword\">if</span>(n%<span class=\"hljs-number\">2</span>==<span class=\"hljs-number\">0</span> || flag==<span class=\"hljs-number\">1</span>) &#123;<br>    <br>\t\t\t\t\t\t<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">&quot;Impossible&quot;</span>);<br>\t\t\t\t\t\t<span class=\"hljs-keyword\">return</span> ;<br>\t\t\t\t\t&#125;<br>\t\t\t\t\tflag = <span class=\"hljs-number\">1</span>;<br>\t\t\t\t\tcount += n / <span class=\"hljs-number\">2</span> - i;<br>\t\t\t\t&#125;<br>\t\t\t\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(chs[i] == chs[k])&#123;<br>    <br>\t\t\t\t\t<span class=\"hljs-keyword\">for</span>(int l = k; l &lt; j; l++)&#123;<br>    <br>\t\t\t\t\t\t<span class=\"hljs-title function_\">swap</span>(chs,l,l+<span class=\"hljs-number\">1</span>);<br>\t\t\t\t\t\tcount++;<span class=\"hljs-comment\">//统计交换次数</span><br>\t\t            &#125;<br>\t\t            j--;<br>\t\t            <span class=\"hljs-keyword\">break</span>;<br>\t\t\t\t&#125;<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\t<br>\t\t<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(count);<br>\t&#125;<br><br>\tprivate <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">swap</span>(<span class=\"hljs-params\">char chs[],int i,int j</span>) &#123;<br>    <br>\t\tchar temp = chs[i];<br>\t\tchs[i] = chs[j];<br>\t\tchs[j] = temp;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"试题-基础练习-完美的代价\"><a href=\"#试题-基础练习-完美的代价\" class=\"headerlink\" title=\"试题 基础练习 完美的代价\"></a>试题 基础练习 完美的代价</h3><h5 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h5><p><strong>问题描述</strong><br>回文串，是一种特殊的字符串，它从左往右读和从右往左读是一样的。小龙龙认为回文串才是完美的。现在给你一个串，它不一定是回文的，请你计算最少的交换次数使得该串变成一个完美的回文串。<br>交换的定义是：交换两个相邻的字符<br>例如mamad<br>第一次交换 ad : mamda<br>第二次交换 md : madma<br>第三次交换 ma : madam (回文！完美！)</p>\n<p><strong>输入格式</strong><br>第一行是一个整数N，表示接下来的字符串的长度(N &lt;&#x3D; 8000)<br>第二行是一个字符串，长度为N.只包含小写字母<br><strong>输出格式</strong><br>如果可能，输出最少的交换次数。<br>否则输出Impossible<br><strong>样例输入</strong><br>5<br>mamad</p>\n<p><strong>样例输出</strong><br>3</p>\n<h5 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h5><p>字符串的长度有奇数和偶数两种可能。</p>\n<p>Impossible有两种可能：<br>1，字符串长度为奇数，且至少含有两个只出现一次的字符<br>2，字符串长度为偶数，且含有一个或多个只出现一次的字符</p>\n<h5 id=\"解决思路\"><a href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"></a>解决思路</h5><p>-》从字符数组的第一个位置开始，从后向前遍历寻找与其相同的字符。<br>-》》》如果出现该字符，且并不是本身位置，那么将字符移到回文相对应的位置。<br>-》》》如果找到该字符，且为本身位置，那么这个字符只出现了一次<br>-》》》》》如若数组长度为偶数或曾经出现过单个字符，则打印impossible<br>-》》》》》如若数组长度为奇数，记录曾出现过单个字符，并且该字符移向字符数组中间</p>\n<h5 id=\"Java代码\"><a href=\"#Java代码\" class=\"headerlink\" title=\"Java代码\"></a>Java代码</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">util</span>.<span class=\"hljs-property\">Scanner</span>;<br><br>public <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Main</span> &#123;<br>    <br>\tpublic <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span>[] args</span>) &#123;<br>    <br>\t\t<br>\t\t<span class=\"hljs-title class_\">Scanner</span> scanner = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">in</span>);<br>\t\t<br>\t\tint n;<br>\t\tn = scanner.<span class=\"hljs-title function_\">nextInt</span>();<br>\t\t<span class=\"hljs-title class_\">String</span> str;<br>\t\tstr = scanner.<span class=\"hljs-title function_\">next</span>();<br>\t\tscanner.<span class=\"hljs-title function_\">close</span>();<br>\t\tchar[] chs = str.<span class=\"hljs-title function_\">toCharArray</span>();<br>\t\tint j = n-<span class=\"hljs-number\">1</span>,count=<span class=\"hljs-number\">0</span>,flag=<span class=\"hljs-number\">0</span>;<br>\t\t<span class=\"hljs-keyword\">for</span>(int i=<span class=\"hljs-number\">0</span>; i &lt; j; i++) &#123;<br>    <br>\t\t\t<span class=\"hljs-keyword\">for</span>(int k=j; k &gt;= i; k--) &#123;<br>    <br>\t\t\t\t<span class=\"hljs-keyword\">if</span>(i==k) &#123;<br>    <br>\t\t\t\t\t<span class=\"hljs-keyword\">if</span>(n%<span class=\"hljs-number\">2</span>==<span class=\"hljs-number\">0</span> || flag==<span class=\"hljs-number\">1</span>) &#123;<br>    <br>\t\t\t\t\t\t<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">&quot;Impossible&quot;</span>);<br>\t\t\t\t\t\t<span class=\"hljs-keyword\">return</span> ;<br>\t\t\t\t\t&#125;<br>\t\t\t\t\tflag = <span class=\"hljs-number\">1</span>;<br>\t\t\t\t\tcount += n / <span class=\"hljs-number\">2</span> - i;<br>\t\t\t\t&#125;<br>\t\t\t\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(chs[i] == chs[k])&#123;<br>    <br>\t\t\t\t\t<span class=\"hljs-keyword\">for</span>(int l = k; l &lt; j; l++)&#123;<br>    <br>\t\t\t\t\t\t<span class=\"hljs-title function_\">swap</span>(chs,l,l+<span class=\"hljs-number\">1</span>);<br>\t\t\t\t\t\tcount++;<span class=\"hljs-comment\">//统计交换次数</span><br>\t\t            &#125;<br>\t\t            j--;<br>\t\t            <span class=\"hljs-keyword\">break</span>;<br>\t\t\t\t&#125;<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\t<br>\t\t<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(count);<br>\t&#125;<br><br>\tprivate <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">swap</span>(<span class=\"hljs-params\">char chs[],int i,int j</span>) &#123;<br>    <br>\t\tchar temp = chs[i];<br>\t\tchs[i] = chs[j];<br>\t\tchs[j] = temp;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"实验三、数据挖掘之决策树","author":null,"date":"2021-04-13T15:11:57.000Z","_content":"## 实验三、数据挖掘之决策树\n\n### 一、实验目的\n\n#### 1. 熟悉掌握决策树的原理，\n\n#### 2. 熟练掌握决策树的生成方法与过程\n\n### 二、实验工具\n\n#### 1. Anaconda\n\n#### 2. sklearn\n\n#### 3. pydotplus\n\n### 三、实验简介\n\n决策树是一个非参数的监督式学习方法，主要用于分类和回归。算法的目标是通过推断数据特征，学习决策规则从而创建一个预测目标变量的模型。\n\n### 四、实验内容\n\n#### 1. 自己创建至少2个向量，每个向量至少1个属性和1个类标号，根据向量生成决策树，并利用该决策树进行预测。如：\n\n```js \nfrom sklearn import tree\nX = [[10, 20], [15, 17],[23,21],[50,20],[20,34]]\nY = [0, 1,0,1,1]\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X, Y)\n\nclf.predict([[22., 22.]])\nclf.predict_proba([[22., 22.]])       #计算属于每个类的概率\n```\n\n要求根据要求随机生成数据，并构建决策树，并举例预测。\n\n#### 2. 对鸢尾花数据构建决策树，\n\n(1) 调用数据的方法如下：\n```js \nfrom sklearn.datasets import load_iris\niris = load_iris()# 从sklearn 数据集中获取鸢尾花数据。\n```\n\n(2) 利用sklearn中的决策树方法对鸢尾花数据建立决策树\n(3) 为了能够直观看到建好的决策树，安装 pydotplus, 方法如下：\n\n```js \npip install pydotplus\n```\n\npydotplus使用方法\n\n```js \nimport pydotplus #引入pydotplus\ndot_data = tree.export_graphviz(clf, out_file=None) \ngraph = pydotplus.graph_from_dot_data(dot_data) \ngraph.write_pdf(\"iris.pdf\")#将图写成pdf文件\n```\n\n### 五、实验总结（写出本次实验的收获，遇到的问题等）\n\n#### 1、自己创建两个变量，建立决策树，并进行预测\n\n```js \nfrom sklearn import tree\nX = [[20, 21], [22, 23]]\nY = [0, 1]\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X, Y)\n\nprint(clf.predict([[22., 22.]]))\nprint(clf.predict_proba([[22., 22.]]))     #计算属于每个类的概率\n```\n\n![image.png](../images/017da325-d1bb-4316-9d57-9149fb52bfd6.png)\n\n#### 2、对鸢尾花数据构建决策树，并通过pydotplus，将决策树生成为pdf文件。\n\n```js \nfrom sklearn.datasets import load_iris\nimport pydotplus #引入pydotplus\nfrom sklearn import tree\n\niris = load_iris()# 获取鸢尾花数据。\n\nmode = tree.DecisionTreeClassifier()\n\nclf = mode.fit(iris.data, iris.target)\n\ndot_data = tree.export_graphviz(clf, out_file=None)\ngraph = pydotplus.graph_from_dot_data(dot_data)\ngraph.write_pdf(\"iris.pdf\")#将图写成pdf文件\n```\n\n![image.png](../images/05bfdfe4-12ca-45f4-baef-0dd9c1558c59.png)\n\n#### 3、根据给的数据集自己编写决策树构建程序\n\n```js \n#  X 每个数组包括 \n#Refund\t\t\t\tyes = 1       no=0,\n#Marital Status\t\tsingle = 0    married = 1    divorce = 2，\n#Taxable Income\t\t<80k = 0      >=80 = 1、\n#Cheat\t\t\t\tyes = 1       no = 0\n\nX = [\n    [1, 0, 1],\n    [0, 1, 1],\n    [0, 0, 0],\n    [1, 1, 1],\n    [0, 2, 1],\n    [0, 1, 0],\n    [1, 2, 1],\n    [0, 0, 1],\n    [0, 1, 0],\n    [0, 0, 1]\n]\n\nY = [0, 0, 0, 0, 1, 0, 0, 1, 0, 1]\n\nmode = tree.DecisionTreeClassifier()\n\nclf = mode.fit(X, Y)\n\ndot_data = tree.export_graphviz(clf, out_file=None)\ngraph = pydotplus.graph_from_dot_data(dot_data)\ngraph.write_pdf(\"fyy.pdf\")#将图写成pdf文件\n```\n\n![image.png](../images/2c687b08-00a5-4f0c-8846-b7d2f4053294.png)\n\n### 五、实验总结\n\n* 学会了使用\ntree.DecisionTreeClassifier()方法\ntree.DecisionTreeClassifier().fit（）方法\ntree.export_graphviz()方法，\npydotplus.graph_from_dot_data()方法等等。\n* 成功使用鸢尾花数据生成决策树。\n* 成功利用pydotplus生成pdf文件。\n* 自己写构建决策树的算法还有一点问题，主要是逻辑比较复杂，有点弄不明白。\n* 对决策树的算法有了更深的了解。","source":"_posts/实验三、数据挖掘之决策树.md","raw":"---\ntitle: 实验三、数据挖掘之决策树\nauthor: \ntags: \n       - 其它\n\ncategory: \n       - 其它\n\ndate: 2021-04-13 23:11:57\n---\n## 实验三、数据挖掘之决策树\n\n### 一、实验目的\n\n#### 1. 熟悉掌握决策树的原理，\n\n#### 2. 熟练掌握决策树的生成方法与过程\n\n### 二、实验工具\n\n#### 1. Anaconda\n\n#### 2. sklearn\n\n#### 3. pydotplus\n\n### 三、实验简介\n\n决策树是一个非参数的监督式学习方法，主要用于分类和回归。算法的目标是通过推断数据特征，学习决策规则从而创建一个预测目标变量的模型。\n\n### 四、实验内容\n\n#### 1. 自己创建至少2个向量，每个向量至少1个属性和1个类标号，根据向量生成决策树，并利用该决策树进行预测。如：\n\n```js \nfrom sklearn import tree\nX = [[10, 20], [15, 17],[23,21],[50,20],[20,34]]\nY = [0, 1,0,1,1]\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X, Y)\n\nclf.predict([[22., 22.]])\nclf.predict_proba([[22., 22.]])       #计算属于每个类的概率\n```\n\n要求根据要求随机生成数据，并构建决策树，并举例预测。\n\n#### 2. 对鸢尾花数据构建决策树，\n\n(1) 调用数据的方法如下：\n```js \nfrom sklearn.datasets import load_iris\niris = load_iris()# 从sklearn 数据集中获取鸢尾花数据。\n```\n\n(2) 利用sklearn中的决策树方法对鸢尾花数据建立决策树\n(3) 为了能够直观看到建好的决策树，安装 pydotplus, 方法如下：\n\n```js \npip install pydotplus\n```\n\npydotplus使用方法\n\n```js \nimport pydotplus #引入pydotplus\ndot_data = tree.export_graphviz(clf, out_file=None) \ngraph = pydotplus.graph_from_dot_data(dot_data) \ngraph.write_pdf(\"iris.pdf\")#将图写成pdf文件\n```\n\n### 五、实验总结（写出本次实验的收获，遇到的问题等）\n\n#### 1、自己创建两个变量，建立决策树，并进行预测\n\n```js \nfrom sklearn import tree\nX = [[20, 21], [22, 23]]\nY = [0, 1]\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X, Y)\n\nprint(clf.predict([[22., 22.]]))\nprint(clf.predict_proba([[22., 22.]]))     #计算属于每个类的概率\n```\n\n![image.png](../images/017da325-d1bb-4316-9d57-9149fb52bfd6.png)\n\n#### 2、对鸢尾花数据构建决策树，并通过pydotplus，将决策树生成为pdf文件。\n\n```js \nfrom sklearn.datasets import load_iris\nimport pydotplus #引入pydotplus\nfrom sklearn import tree\n\niris = load_iris()# 获取鸢尾花数据。\n\nmode = tree.DecisionTreeClassifier()\n\nclf = mode.fit(iris.data, iris.target)\n\ndot_data = tree.export_graphviz(clf, out_file=None)\ngraph = pydotplus.graph_from_dot_data(dot_data)\ngraph.write_pdf(\"iris.pdf\")#将图写成pdf文件\n```\n\n![image.png](../images/05bfdfe4-12ca-45f4-baef-0dd9c1558c59.png)\n\n#### 3、根据给的数据集自己编写决策树构建程序\n\n```js \n#  X 每个数组包括 \n#Refund\t\t\t\tyes = 1       no=0,\n#Marital Status\t\tsingle = 0    married = 1    divorce = 2，\n#Taxable Income\t\t<80k = 0      >=80 = 1、\n#Cheat\t\t\t\tyes = 1       no = 0\n\nX = [\n    [1, 0, 1],\n    [0, 1, 1],\n    [0, 0, 0],\n    [1, 1, 1],\n    [0, 2, 1],\n    [0, 1, 0],\n    [1, 2, 1],\n    [0, 0, 1],\n    [0, 1, 0],\n    [0, 0, 1]\n]\n\nY = [0, 0, 0, 0, 1, 0, 0, 1, 0, 1]\n\nmode = tree.DecisionTreeClassifier()\n\nclf = mode.fit(X, Y)\n\ndot_data = tree.export_graphviz(clf, out_file=None)\ngraph = pydotplus.graph_from_dot_data(dot_data)\ngraph.write_pdf(\"fyy.pdf\")#将图写成pdf文件\n```\n\n![image.png](../images/2c687b08-00a5-4f0c-8846-b7d2f4053294.png)\n\n### 五、实验总结\n\n* 学会了使用\ntree.DecisionTreeClassifier()方法\ntree.DecisionTreeClassifier().fit（）方法\ntree.export_graphviz()方法，\npydotplus.graph_from_dot_data()方法等等。\n* 成功使用鸢尾花数据生成决策树。\n* 成功利用pydotplus生成pdf文件。\n* 自己写构建决策树的算法还有一点问题，主要是逻辑比较复杂，有点弄不明白。\n* 对决策树的算法有了更深的了解。","slug":"实验三、数据挖掘之决策树","published":1,"updated":"2024-03-15T08:23:36.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clttq59bx002ezwvecgwn9pod","content":"<h2 id=\"实验三、数据挖掘之决策树\"><a href=\"#实验三、数据挖掘之决策树\" class=\"headerlink\" title=\"实验三、数据挖掘之决策树\"></a>实验三、数据挖掘之决策树</h2><h3 id=\"一、实验目的\"><a href=\"#一、实验目的\" class=\"headerlink\" title=\"一、实验目的\"></a>一、实验目的</h3><h4 id=\"1-熟悉掌握决策树的原理，\"><a href=\"#1-熟悉掌握决策树的原理，\" class=\"headerlink\" title=\"1. 熟悉掌握决策树的原理，\"></a>1. 熟悉掌握决策树的原理，</h4><h4 id=\"2-熟练掌握决策树的生成方法与过程\"><a href=\"#2-熟练掌握决策树的生成方法与过程\" class=\"headerlink\" title=\"2. 熟练掌握决策树的生成方法与过程\"></a>2. 熟练掌握决策树的生成方法与过程</h4><h3 id=\"二、实验工具\"><a href=\"#二、实验工具\" class=\"headerlink\" title=\"二、实验工具\"></a>二、实验工具</h3><h4 id=\"1-Anaconda\"><a href=\"#1-Anaconda\" class=\"headerlink\" title=\"1. Anaconda\"></a>1. Anaconda</h4><h4 id=\"2-sklearn\"><a href=\"#2-sklearn\" class=\"headerlink\" title=\"2. sklearn\"></a>2. sklearn</h4><h4 id=\"3-pydotplus\"><a href=\"#3-pydotplus\" class=\"headerlink\" title=\"3. pydotplus\"></a>3. pydotplus</h4><h3 id=\"三、实验简介\"><a href=\"#三、实验简介\" class=\"headerlink\" title=\"三、实验简介\"></a>三、实验简介</h3><p>决策树是一个非参数的监督式学习方法，主要用于分类和回归。算法的目标是通过推断数据特征，学习决策规则从而创建一个预测目标变量的模型。</p>\n<h3 id=\"四、实验内容\"><a href=\"#四、实验内容\" class=\"headerlink\" title=\"四、实验内容\"></a>四、实验内容</h3><h4 id=\"1-自己创建至少2个向量，每个向量至少1个属性和1个类标号，根据向量生成决策树，并利用该决策树进行预测。如：\"><a href=\"#1-自己创建至少2个向量，每个向量至少1个属性和1个类标号，根据向量生成决策树，并利用该决策树进行预测。如：\" class=\"headerlink\" title=\"1. 自己创建至少2个向量，每个向量至少1个属性和1个类标号，根据向量生成决策树，并利用该决策树进行预测。如：\"></a>1. 自己创建至少2个向量，每个向量至少1个属性和1个类标号，根据向量生成决策树，并利用该决策树进行预测。如：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">from</span> sklearn <span class=\"hljs-keyword\">import</span> tree<br>X = [[<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>], [<span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">17</span>],[<span class=\"hljs-number\">23</span>,<span class=\"hljs-number\">21</span>],[<span class=\"hljs-number\">50</span>,<span class=\"hljs-number\">20</span>],[<span class=\"hljs-number\">20</span>,<span class=\"hljs-number\">34</span>]]<br>Y = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>]<br>clf = tree.<span class=\"hljs-title class_\">DecisionTreeClassifier</span>()<br>clf = clf.<span class=\"hljs-title function_\">fit</span>(X, Y)<br><br>clf.<span class=\"hljs-title function_\">predict</span>([[<span class=\"hljs-number\">22.</span>, <span class=\"hljs-number\">22.</span>]])<br>clf.<span class=\"hljs-title function_\">predict_proba</span>([[<span class=\"hljs-number\">22.</span>, <span class=\"hljs-number\">22.</span>]])       #计算属于每个类的概率<br></code></pre></td></tr></table></figure>\n\n<p>要求根据要求随机生成数据，并构建决策树，并举例预测。</p>\n<h4 id=\"2-对鸢尾花数据构建决策树，\"><a href=\"#2-对鸢尾花数据构建决策树，\" class=\"headerlink\" title=\"2. 对鸢尾花数据构建决策树，\"></a>2. 对鸢尾花数据构建决策树，</h4><p>(1) 调用数据的方法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">from</span> sklearn.<span class=\"hljs-property\">datasets</span> <span class=\"hljs-keyword\">import</span> load_iris<br>iris = <span class=\"hljs-title function_\">load_iris</span>()# 从sklearn 数据集中获取鸢尾花数据。<br></code></pre></td></tr></table></figure>\n\n<p>(2) 利用sklearn中的决策树方法对鸢尾花数据建立决策树<br>(3) 为了能够直观看到建好的决策树，安装 pydotplus, 方法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">pip install pydotplus<br></code></pre></td></tr></table></figure>\n\n<p>pydotplus使用方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> pydotplus #引入pydotplus<br>dot_data = tree.<span class=\"hljs-title function_\">export_graphviz</span>(clf, out_file=<span class=\"hljs-title class_\">None</span>) <br>graph = pydotplus.<span class=\"hljs-title function_\">graph_from_dot_data</span>(dot_data) <br>graph.<span class=\"hljs-title function_\">write_pdf</span>(<span class=\"hljs-string\">&quot;iris.pdf&quot;</span>)#将图写成pdf文件<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"五、实验总结（写出本次实验的收获，遇到的问题等）\"><a href=\"#五、实验总结（写出本次实验的收获，遇到的问题等）\" class=\"headerlink\" title=\"五、实验总结（写出本次实验的收获，遇到的问题等）\"></a>五、实验总结（写出本次实验的收获，遇到的问题等）</h3><h4 id=\"1、自己创建两个变量，建立决策树，并进行预测\"><a href=\"#1、自己创建两个变量，建立决策树，并进行预测\" class=\"headerlink\" title=\"1、自己创建两个变量，建立决策树，并进行预测\"></a>1、自己创建两个变量，建立决策树，并进行预测</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">from</span> sklearn <span class=\"hljs-keyword\">import</span> tree<br>X = [[<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">21</span>], [<span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">23</span>]]<br>Y = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>]<br>clf = tree.<span class=\"hljs-title class_\">DecisionTreeClassifier</span>()<br>clf = clf.<span class=\"hljs-title function_\">fit</span>(X, Y)<br><br><span class=\"hljs-title function_\">print</span>(clf.<span class=\"hljs-title function_\">predict</span>([[<span class=\"hljs-number\">22.</span>, <span class=\"hljs-number\">22.</span>]]))<br><span class=\"hljs-title function_\">print</span>(clf.<span class=\"hljs-title function_\">predict_proba</span>([[<span class=\"hljs-number\">22.</span>, <span class=\"hljs-number\">22.</span>]]))     #计算属于每个类的概率<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/017da325-d1bb-4316-9d57-9149fb52bfd6.png\" alt=\"image.png\"></p>\n<h4 id=\"2、对鸢尾花数据构建决策树，并通过pydotplus，将决策树生成为pdf文件。\"><a href=\"#2、对鸢尾花数据构建决策树，并通过pydotplus，将决策树生成为pdf文件。\" class=\"headerlink\" title=\"2、对鸢尾花数据构建决策树，并通过pydotplus，将决策树生成为pdf文件。\"></a>2、对鸢尾花数据构建决策树，并通过pydotplus，将决策树生成为pdf文件。</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">from</span> sklearn.<span class=\"hljs-property\">datasets</span> <span class=\"hljs-keyword\">import</span> load_iris<br><span class=\"hljs-keyword\">import</span> pydotplus #引入pydotplus<br><span class=\"hljs-keyword\">from</span> sklearn <span class=\"hljs-keyword\">import</span> tree<br><br>iris = <span class=\"hljs-title function_\">load_iris</span>()# 获取鸢尾花数据。<br><br>mode = tree.<span class=\"hljs-title class_\">DecisionTreeClassifier</span>()<br><br>clf = mode.<span class=\"hljs-title function_\">fit</span>(iris.<span class=\"hljs-property\">data</span>, iris.<span class=\"hljs-property\">target</span>)<br><br>dot_data = tree.<span class=\"hljs-title function_\">export_graphviz</span>(clf, out_file=<span class=\"hljs-title class_\">None</span>)<br>graph = pydotplus.<span class=\"hljs-title function_\">graph_from_dot_data</span>(dot_data)<br>graph.<span class=\"hljs-title function_\">write_pdf</span>(<span class=\"hljs-string\">&quot;iris.pdf&quot;</span>)#将图写成pdf文件<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/05bfdfe4-12ca-45f4-baef-0dd9c1558c59.png\" alt=\"image.png\"></p>\n<h4 id=\"3、根据给的数据集自己编写决策树构建程序\"><a href=\"#3、根据给的数据集自己编写决策树构建程序\" class=\"headerlink\" title=\"3、根据给的数据集自己编写决策树构建程序\"></a>3、根据给的数据集自己编写决策树构建程序</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">#  X 每个数组包括 <br>#<span class=\"hljs-title class_\">Refund</span>\t\t\t\tyes = <span class=\"hljs-number\">1</span>       no=<span class=\"hljs-number\">0</span>,<br>#<span class=\"hljs-title class_\">Marital</span> <span class=\"hljs-title class_\">Status</span>\t\tsingle = <span class=\"hljs-number\">0</span>    married = <span class=\"hljs-number\">1</span>    divorce = <span class=\"hljs-number\">2</span>，<br>#<span class=\"hljs-title class_\">Taxable</span> <span class=\"hljs-title class_\">Income</span>\t\t&lt;80k = <span class=\"hljs-number\">0</span>      &gt;=<span class=\"hljs-number\">80</span> = <span class=\"hljs-number\">1</span>、<br>#<span class=\"hljs-title class_\">Cheat</span>\t\t\t\tyes = <span class=\"hljs-number\">1</span>       no = <span class=\"hljs-number\">0</span><br><br>X = [<br>    [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>],<br>    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>],<br>    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],<br>    [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>],<br>    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>],<br>    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>],<br>    [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>],<br>    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>],<br>    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>],<br>    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>]<br>]<br><br>Y = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>]<br><br>mode = tree.<span class=\"hljs-title class_\">DecisionTreeClassifier</span>()<br><br>clf = mode.<span class=\"hljs-title function_\">fit</span>(X, Y)<br><br>dot_data = tree.<span class=\"hljs-title function_\">export_graphviz</span>(clf, out_file=<span class=\"hljs-title class_\">None</span>)<br>graph = pydotplus.<span class=\"hljs-title function_\">graph_from_dot_data</span>(dot_data)<br>graph.<span class=\"hljs-title function_\">write_pdf</span>(<span class=\"hljs-string\">&quot;fyy.pdf&quot;</span>)#将图写成pdf文件<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/2c687b08-00a5-4f0c-8846-b7d2f4053294.png\" alt=\"image.png\"></p>\n<h3 id=\"五、实验总结\"><a href=\"#五、实验总结\" class=\"headerlink\" title=\"五、实验总结\"></a>五、实验总结</h3><ul>\n<li>学会了使用<br>tree.DecisionTreeClassifier()方法<br>tree.DecisionTreeClassifier().fit（）方法<br>tree.export_graphviz()方法，<br>pydotplus.graph_from_dot_data()方法等等。</li>\n<li>成功使用鸢尾花数据生成决策树。</li>\n<li>成功利用pydotplus生成pdf文件。</li>\n<li>自己写构建决策树的算法还有一点问题，主要是逻辑比较复杂，有点弄不明白。</li>\n<li>对决策树的算法有了更深的了解。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"实验三、数据挖掘之决策树\"><a href=\"#实验三、数据挖掘之决策树\" class=\"headerlink\" title=\"实验三、数据挖掘之决策树\"></a>实验三、数据挖掘之决策树</h2><h3 id=\"一、实验目的\"><a href=\"#一、实验目的\" class=\"headerlink\" title=\"一、实验目的\"></a>一、实验目的</h3><h4 id=\"1-熟悉掌握决策树的原理，\"><a href=\"#1-熟悉掌握决策树的原理，\" class=\"headerlink\" title=\"1. 熟悉掌握决策树的原理，\"></a>1. 熟悉掌握决策树的原理，</h4><h4 id=\"2-熟练掌握决策树的生成方法与过程\"><a href=\"#2-熟练掌握决策树的生成方法与过程\" class=\"headerlink\" title=\"2. 熟练掌握决策树的生成方法与过程\"></a>2. 熟练掌握决策树的生成方法与过程</h4><h3 id=\"二、实验工具\"><a href=\"#二、实验工具\" class=\"headerlink\" title=\"二、实验工具\"></a>二、实验工具</h3><h4 id=\"1-Anaconda\"><a href=\"#1-Anaconda\" class=\"headerlink\" title=\"1. Anaconda\"></a>1. Anaconda</h4><h4 id=\"2-sklearn\"><a href=\"#2-sklearn\" class=\"headerlink\" title=\"2. sklearn\"></a>2. sklearn</h4><h4 id=\"3-pydotplus\"><a href=\"#3-pydotplus\" class=\"headerlink\" title=\"3. pydotplus\"></a>3. pydotplus</h4><h3 id=\"三、实验简介\"><a href=\"#三、实验简介\" class=\"headerlink\" title=\"三、实验简介\"></a>三、实验简介</h3><p>决策树是一个非参数的监督式学习方法，主要用于分类和回归。算法的目标是通过推断数据特征，学习决策规则从而创建一个预测目标变量的模型。</p>\n<h3 id=\"四、实验内容\"><a href=\"#四、实验内容\" class=\"headerlink\" title=\"四、实验内容\"></a>四、实验内容</h3><h4 id=\"1-自己创建至少2个向量，每个向量至少1个属性和1个类标号，根据向量生成决策树，并利用该决策树进行预测。如：\"><a href=\"#1-自己创建至少2个向量，每个向量至少1个属性和1个类标号，根据向量生成决策树，并利用该决策树进行预测。如：\" class=\"headerlink\" title=\"1. 自己创建至少2个向量，每个向量至少1个属性和1个类标号，根据向量生成决策树，并利用该决策树进行预测。如：\"></a>1. 自己创建至少2个向量，每个向量至少1个属性和1个类标号，根据向量生成决策树，并利用该决策树进行预测。如：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">from</span> sklearn <span class=\"hljs-keyword\">import</span> tree<br>X = [[<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>], [<span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">17</span>],[<span class=\"hljs-number\">23</span>,<span class=\"hljs-number\">21</span>],[<span class=\"hljs-number\">50</span>,<span class=\"hljs-number\">20</span>],[<span class=\"hljs-number\">20</span>,<span class=\"hljs-number\">34</span>]]<br>Y = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>]<br>clf = tree.<span class=\"hljs-title class_\">DecisionTreeClassifier</span>()<br>clf = clf.<span class=\"hljs-title function_\">fit</span>(X, Y)<br><br>clf.<span class=\"hljs-title function_\">predict</span>([[<span class=\"hljs-number\">22.</span>, <span class=\"hljs-number\">22.</span>]])<br>clf.<span class=\"hljs-title function_\">predict_proba</span>([[<span class=\"hljs-number\">22.</span>, <span class=\"hljs-number\">22.</span>]])       #计算属于每个类的概率<br></code></pre></td></tr></table></figure>\n\n<p>要求根据要求随机生成数据，并构建决策树，并举例预测。</p>\n<h4 id=\"2-对鸢尾花数据构建决策树，\"><a href=\"#2-对鸢尾花数据构建决策树，\" class=\"headerlink\" title=\"2. 对鸢尾花数据构建决策树，\"></a>2. 对鸢尾花数据构建决策树，</h4><p>(1) 调用数据的方法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">from</span> sklearn.<span class=\"hljs-property\">datasets</span> <span class=\"hljs-keyword\">import</span> load_iris<br>iris = <span class=\"hljs-title function_\">load_iris</span>()# 从sklearn 数据集中获取鸢尾花数据。<br></code></pre></td></tr></table></figure>\n\n<p>(2) 利用sklearn中的决策树方法对鸢尾花数据建立决策树<br>(3) 为了能够直观看到建好的决策树，安装 pydotplus, 方法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">pip install pydotplus<br></code></pre></td></tr></table></figure>\n\n<p>pydotplus使用方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> pydotplus #引入pydotplus<br>dot_data = tree.<span class=\"hljs-title function_\">export_graphviz</span>(clf, out_file=<span class=\"hljs-title class_\">None</span>) <br>graph = pydotplus.<span class=\"hljs-title function_\">graph_from_dot_data</span>(dot_data) <br>graph.<span class=\"hljs-title function_\">write_pdf</span>(<span class=\"hljs-string\">&quot;iris.pdf&quot;</span>)#将图写成pdf文件<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"五、实验总结（写出本次实验的收获，遇到的问题等）\"><a href=\"#五、实验总结（写出本次实验的收获，遇到的问题等）\" class=\"headerlink\" title=\"五、实验总结（写出本次实验的收获，遇到的问题等）\"></a>五、实验总结（写出本次实验的收获，遇到的问题等）</h3><h4 id=\"1、自己创建两个变量，建立决策树，并进行预测\"><a href=\"#1、自己创建两个变量，建立决策树，并进行预测\" class=\"headerlink\" title=\"1、自己创建两个变量，建立决策树，并进行预测\"></a>1、自己创建两个变量，建立决策树，并进行预测</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">from</span> sklearn <span class=\"hljs-keyword\">import</span> tree<br>X = [[<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">21</span>], [<span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">23</span>]]<br>Y = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>]<br>clf = tree.<span class=\"hljs-title class_\">DecisionTreeClassifier</span>()<br>clf = clf.<span class=\"hljs-title function_\">fit</span>(X, Y)<br><br><span class=\"hljs-title function_\">print</span>(clf.<span class=\"hljs-title function_\">predict</span>([[<span class=\"hljs-number\">22.</span>, <span class=\"hljs-number\">22.</span>]]))<br><span class=\"hljs-title function_\">print</span>(clf.<span class=\"hljs-title function_\">predict_proba</span>([[<span class=\"hljs-number\">22.</span>, <span class=\"hljs-number\">22.</span>]]))     #计算属于每个类的概率<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/017da325-d1bb-4316-9d57-9149fb52bfd6.png\" alt=\"image.png\"></p>\n<h4 id=\"2、对鸢尾花数据构建决策树，并通过pydotplus，将决策树生成为pdf文件。\"><a href=\"#2、对鸢尾花数据构建决策树，并通过pydotplus，将决策树生成为pdf文件。\" class=\"headerlink\" title=\"2、对鸢尾花数据构建决策树，并通过pydotplus，将决策树生成为pdf文件。\"></a>2、对鸢尾花数据构建决策树，并通过pydotplus，将决策树生成为pdf文件。</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">from</span> sklearn.<span class=\"hljs-property\">datasets</span> <span class=\"hljs-keyword\">import</span> load_iris<br><span class=\"hljs-keyword\">import</span> pydotplus #引入pydotplus<br><span class=\"hljs-keyword\">from</span> sklearn <span class=\"hljs-keyword\">import</span> tree<br><br>iris = <span class=\"hljs-title function_\">load_iris</span>()# 获取鸢尾花数据。<br><br>mode = tree.<span class=\"hljs-title class_\">DecisionTreeClassifier</span>()<br><br>clf = mode.<span class=\"hljs-title function_\">fit</span>(iris.<span class=\"hljs-property\">data</span>, iris.<span class=\"hljs-property\">target</span>)<br><br>dot_data = tree.<span class=\"hljs-title function_\">export_graphviz</span>(clf, out_file=<span class=\"hljs-title class_\">None</span>)<br>graph = pydotplus.<span class=\"hljs-title function_\">graph_from_dot_data</span>(dot_data)<br>graph.<span class=\"hljs-title function_\">write_pdf</span>(<span class=\"hljs-string\">&quot;iris.pdf&quot;</span>)#将图写成pdf文件<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/05bfdfe4-12ca-45f4-baef-0dd9c1558c59.png\" alt=\"image.png\"></p>\n<h4 id=\"3、根据给的数据集自己编写决策树构建程序\"><a href=\"#3、根据给的数据集自己编写决策树构建程序\" class=\"headerlink\" title=\"3、根据给的数据集自己编写决策树构建程序\"></a>3、根据给的数据集自己编写决策树构建程序</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">#  X 每个数组包括 <br>#<span class=\"hljs-title class_\">Refund</span>\t\t\t\tyes = <span class=\"hljs-number\">1</span>       no=<span class=\"hljs-number\">0</span>,<br>#<span class=\"hljs-title class_\">Marital</span> <span class=\"hljs-title class_\">Status</span>\t\tsingle = <span class=\"hljs-number\">0</span>    married = <span class=\"hljs-number\">1</span>    divorce = <span class=\"hljs-number\">2</span>，<br>#<span class=\"hljs-title class_\">Taxable</span> <span class=\"hljs-title class_\">Income</span>\t\t&lt;80k = <span class=\"hljs-number\">0</span>      &gt;=<span class=\"hljs-number\">80</span> = <span class=\"hljs-number\">1</span>、<br>#<span class=\"hljs-title class_\">Cheat</span>\t\t\t\tyes = <span class=\"hljs-number\">1</span>       no = <span class=\"hljs-number\">0</span><br><br>X = [<br>    [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>],<br>    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>],<br>    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],<br>    [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>],<br>    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>],<br>    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>],<br>    [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>],<br>    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>],<br>    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>],<br>    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>]<br>]<br><br>Y = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>]<br><br>mode = tree.<span class=\"hljs-title class_\">DecisionTreeClassifier</span>()<br><br>clf = mode.<span class=\"hljs-title function_\">fit</span>(X, Y)<br><br>dot_data = tree.<span class=\"hljs-title function_\">export_graphviz</span>(clf, out_file=<span class=\"hljs-title class_\">None</span>)<br>graph = pydotplus.<span class=\"hljs-title function_\">graph_from_dot_data</span>(dot_data)<br>graph.<span class=\"hljs-title function_\">write_pdf</span>(<span class=\"hljs-string\">&quot;fyy.pdf&quot;</span>)#将图写成pdf文件<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/2c687b08-00a5-4f0c-8846-b7d2f4053294.png\" alt=\"image.png\"></p>\n<h3 id=\"五、实验总结\"><a href=\"#五、实验总结\" class=\"headerlink\" title=\"五、实验总结\"></a>五、实验总结</h3><ul>\n<li>学会了使用<br>tree.DecisionTreeClassifier()方法<br>tree.DecisionTreeClassifier().fit（）方法<br>tree.export_graphviz()方法，<br>pydotplus.graph_from_dot_data()方法等等。</li>\n<li>成功使用鸢尾花数据生成决策树。</li>\n<li>成功利用pydotplus生成pdf文件。</li>\n<li>自己写构建决策树的算法还有一点问题，主要是逻辑比较复杂，有点弄不明白。</li>\n<li>对决策树的算法有了更深的了解。</li>\n</ul>\n"},{"title":"岛屿的周长-LeetCode463","author":null,"date":"2020-11-01T01:08:22.000Z","_content":"### 题目\n\n给定一个包含 0 和 1 的二维网格地图，其中 1 表示陆地 0 表示水域。\n\n网格中的格子水平和垂直方向相连（对角线方向不相连）。整个网格被水完全包围，但其中恰好有一个岛屿（或者说，一个或多个表示陆地的格子相连组成的岛屿）。\n\n岛屿中没有“湖”（“湖” 指水域在岛屿内部且不和岛屿周围的水相连）。格子是边长为 1 的正方形。网格为长方形，且宽度和高度均不超过 100 。计算这个岛屿的周长。\n\n**来源：力扣（LeetCode）**\n**输入:**\n[[0,1,0,0],\n[1,1,1,0],\n[0,1,0,0],\n[1,1,0,0]]\n\n**输出: 16**\n\n解释: 它的周长是下面图片中的 16 个黄色的边：\n\n![在这里插入图片描述](https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151945290.png)\n\n### 题解\n\n```js \nclass Solution {\n    \n    public int islandPerimeter(int[][] grid) {\n    \n        int m = grid.length;\n        int n = grid[0].length;\n        int res = 0;\n        for(int i=0; i<m; i++){\n    \n            for(int j=0; j<n;j++){\n    \n                if(grid[i][j] == 1){\n    \n                //如果是岛屿，判断其四个方向有没有岛屿，没有周长++\n                    if(i-1<0){\n    \n                        res++;\n                    }else{\n    \n                        if(grid[i-1][j] == 0){\n    \n                            res++;\n                        }\n                    }\n                    if(j-1<0){\n    \n                        res++;\n                    }else{\n    \n                        if(grid[i][j-1] == 0){\n    \n                            res++;\n                        }\n                    }\n                    if(i+1>=m){\n    \n                        res++;\n                    }\n                    else{\n    \n                        if(grid[i+1][j] == 0){\n    \n                            res++;\n                        }\n                    }\n                    if(j+1>=n){\n    \n                        res++;\n                    }\n                    else{\n    \n                        if(grid[i][j+1] == 0){\n    \n                            res++;\n                        }\n                    }\n                }\n            }\n        }\n        return res;       \n    }\n}\n```\n\n### 总结\n\n写的时候直接暴力统计每一个岛屿的四个方向是否与其他岛屿相连，\n使用了一堆的if…；\n看到别人的题解是先统计周长为有几块岛屿/*4，再判断如果岛屿两两相连，那么周长-2；","source":"_posts/岛屿的周长-LeetCode463.md","raw":"---\ntitle: 岛屿的周长-LeetCode463\nauthor: \ntags: \n       - leetcode\n\ncategory: \n       - 算法\n\ndate: 2020-11-01 09:08:22\n---\n### 题目\n\n给定一个包含 0 和 1 的二维网格地图，其中 1 表示陆地 0 表示水域。\n\n网格中的格子水平和垂直方向相连（对角线方向不相连）。整个网格被水完全包围，但其中恰好有一个岛屿（或者说，一个或多个表示陆地的格子相连组成的岛屿）。\n\n岛屿中没有“湖”（“湖” 指水域在岛屿内部且不和岛屿周围的水相连）。格子是边长为 1 的正方形。网格为长方形，且宽度和高度均不超过 100 。计算这个岛屿的周长。\n\n**来源：力扣（LeetCode）**\n**输入:**\n[[0,1,0,0],\n[1,1,1,0],\n[0,1,0,0],\n[1,1,0,0]]\n\n**输出: 16**\n\n解释: 它的周长是下面图片中的 16 个黄色的边：\n\n![在这里插入图片描述](https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151945290.png)\n\n### 题解\n\n```js \nclass Solution {\n    \n    public int islandPerimeter(int[][] grid) {\n    \n        int m = grid.length;\n        int n = grid[0].length;\n        int res = 0;\n        for(int i=0; i<m; i++){\n    \n            for(int j=0; j<n;j++){\n    \n                if(grid[i][j] == 1){\n    \n                //如果是岛屿，判断其四个方向有没有岛屿，没有周长++\n                    if(i-1<0){\n    \n                        res++;\n                    }else{\n    \n                        if(grid[i-1][j] == 0){\n    \n                            res++;\n                        }\n                    }\n                    if(j-1<0){\n    \n                        res++;\n                    }else{\n    \n                        if(grid[i][j-1] == 0){\n    \n                            res++;\n                        }\n                    }\n                    if(i+1>=m){\n    \n                        res++;\n                    }\n                    else{\n    \n                        if(grid[i+1][j] == 0){\n    \n                            res++;\n                        }\n                    }\n                    if(j+1>=n){\n    \n                        res++;\n                    }\n                    else{\n    \n                        if(grid[i][j+1] == 0){\n    \n                            res++;\n                        }\n                    }\n                }\n            }\n        }\n        return res;       \n    }\n}\n```\n\n### 总结\n\n写的时候直接暴力统计每一个岛屿的四个方向是否与其他岛屿相连，\n使用了一堆的if…；\n看到别人的题解是先统计周长为有几块岛屿/*4，再判断如果岛屿两两相连，那么周长-2；","slug":"岛屿的周长-LeetCode463","published":1,"updated":"2024-03-15T11:45:38.970Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clttq59bz002izwvef6f8e914","content":"<h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>给定一个包含 0 和 1 的二维网格地图，其中 1 表示陆地 0 表示水域。</p>\n<p>网格中的格子水平和垂直方向相连（对角线方向不相连）。整个网格被水完全包围，但其中恰好有一个岛屿（或者说，一个或多个表示陆地的格子相连组成的岛屿）。</p>\n<p>岛屿中没有“湖”（“湖” 指水域在岛屿内部且不和岛屿周围的水相连）。格子是边长为 1 的正方形。网格为长方形，且宽度和高度均不超过 100 。计算这个岛屿的周长。</p>\n<p><strong>来源：力扣（LeetCode）</strong><br><strong>输入:</strong><br>[[0,1,0,0],<br>[1,1,1,0],<br>[0,1,0,0],<br>[1,1,0,0]]</p>\n<p><strong>输出: 16</strong></p>\n<p>解释: 它的周长是下面图片中的 16 个黄色的边：</p>\n<p><img src=\"https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151945290.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br>    <br>    public int <span class=\"hljs-title function_\">islandPerimeter</span>(<span class=\"hljs-params\">int[][] grid</span>) &#123;<br>    <br>        int m = grid.<span class=\"hljs-property\">length</span>;<br>        int n = grid[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">length</span>;<br>        int res = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span>(int i=<span class=\"hljs-number\">0</span>; i&lt;m; i++)&#123;<br>    <br>            <span class=\"hljs-keyword\">for</span>(int j=<span class=\"hljs-number\">0</span>; j&lt;n;j++)&#123;<br>    <br>                <span class=\"hljs-keyword\">if</span>(grid[i][j] == <span class=\"hljs-number\">1</span>)&#123;<br>    <br>                <span class=\"hljs-comment\">//如果是岛屿，判断其四个方向有没有岛屿，没有周长++</span><br>                    <span class=\"hljs-keyword\">if</span>(i-<span class=\"hljs-number\">1</span>&lt;<span class=\"hljs-number\">0</span>)&#123;<br>    <br>                        res++;<br>                    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>    <br>                        <span class=\"hljs-keyword\">if</span>(grid[i-<span class=\"hljs-number\">1</span>][j] == <span class=\"hljs-number\">0</span>)&#123;<br>    <br>                            res++;<br>                        &#125;<br>                    &#125;<br>                    <span class=\"hljs-keyword\">if</span>(j-<span class=\"hljs-number\">1</span>&lt;<span class=\"hljs-number\">0</span>)&#123;<br>    <br>                        res++;<br>                    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>    <br>                        <span class=\"hljs-keyword\">if</span>(grid[i][j-<span class=\"hljs-number\">1</span>] == <span class=\"hljs-number\">0</span>)&#123;<br>    <br>                            res++;<br>                        &#125;<br>                    &#125;<br>                    <span class=\"hljs-keyword\">if</span>(i+<span class=\"hljs-number\">1</span>&gt;=m)&#123;<br>    <br>                        res++;<br>                    &#125;<br>                    <span class=\"hljs-keyword\">else</span>&#123;<br>    <br>                        <span class=\"hljs-keyword\">if</span>(grid[i+<span class=\"hljs-number\">1</span>][j] == <span class=\"hljs-number\">0</span>)&#123;<br>    <br>                            res++;<br>                        &#125;<br>                    &#125;<br>                    <span class=\"hljs-keyword\">if</span>(j+<span class=\"hljs-number\">1</span>&gt;=n)&#123;<br>    <br>                        res++;<br>                    &#125;<br>                    <span class=\"hljs-keyword\">else</span>&#123;<br>    <br>                        <span class=\"hljs-keyword\">if</span>(grid[i][j+<span class=\"hljs-number\">1</span>] == <span class=\"hljs-number\">0</span>)&#123;<br>    <br>                            res++;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> res;       <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>写的时候直接暴力统计每一个岛屿的四个方向是否与其他岛屿相连，<br>使用了一堆的if…；<br>看到别人的题解是先统计周长为有几块岛屿&#x2F;*4，再判断如果岛屿两两相连，那么周长-2；</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>给定一个包含 0 和 1 的二维网格地图，其中 1 表示陆地 0 表示水域。</p>\n<p>网格中的格子水平和垂直方向相连（对角线方向不相连）。整个网格被水完全包围，但其中恰好有一个岛屿（或者说，一个或多个表示陆地的格子相连组成的岛屿）。</p>\n<p>岛屿中没有“湖”（“湖” 指水域在岛屿内部且不和岛屿周围的水相连）。格子是边长为 1 的正方形。网格为长方形，且宽度和高度均不超过 100 。计算这个岛屿的周长。</p>\n<p><strong>来源：力扣（LeetCode）</strong><br><strong>输入:</strong><br>[[0,1,0,0],<br>[1,1,1,0],<br>[0,1,0,0],<br>[1,1,0,0]]</p>\n<p><strong>输出: 16</strong></p>\n<p>解释: 它的周长是下面图片中的 16 个黄色的边：</p>\n<p><img src=\"https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403151945290.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br>    <br>    public int <span class=\"hljs-title function_\">islandPerimeter</span>(<span class=\"hljs-params\">int[][] grid</span>) &#123;<br>    <br>        int m = grid.<span class=\"hljs-property\">length</span>;<br>        int n = grid[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">length</span>;<br>        int res = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span>(int i=<span class=\"hljs-number\">0</span>; i&lt;m; i++)&#123;<br>    <br>            <span class=\"hljs-keyword\">for</span>(int j=<span class=\"hljs-number\">0</span>; j&lt;n;j++)&#123;<br>    <br>                <span class=\"hljs-keyword\">if</span>(grid[i][j] == <span class=\"hljs-number\">1</span>)&#123;<br>    <br>                <span class=\"hljs-comment\">//如果是岛屿，判断其四个方向有没有岛屿，没有周长++</span><br>                    <span class=\"hljs-keyword\">if</span>(i-<span class=\"hljs-number\">1</span>&lt;<span class=\"hljs-number\">0</span>)&#123;<br>    <br>                        res++;<br>                    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>    <br>                        <span class=\"hljs-keyword\">if</span>(grid[i-<span class=\"hljs-number\">1</span>][j] == <span class=\"hljs-number\">0</span>)&#123;<br>    <br>                            res++;<br>                        &#125;<br>                    &#125;<br>                    <span class=\"hljs-keyword\">if</span>(j-<span class=\"hljs-number\">1</span>&lt;<span class=\"hljs-number\">0</span>)&#123;<br>    <br>                        res++;<br>                    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>    <br>                        <span class=\"hljs-keyword\">if</span>(grid[i][j-<span class=\"hljs-number\">1</span>] == <span class=\"hljs-number\">0</span>)&#123;<br>    <br>                            res++;<br>                        &#125;<br>                    &#125;<br>                    <span class=\"hljs-keyword\">if</span>(i+<span class=\"hljs-number\">1</span>&gt;=m)&#123;<br>    <br>                        res++;<br>                    &#125;<br>                    <span class=\"hljs-keyword\">else</span>&#123;<br>    <br>                        <span class=\"hljs-keyword\">if</span>(grid[i+<span class=\"hljs-number\">1</span>][j] == <span class=\"hljs-number\">0</span>)&#123;<br>    <br>                            res++;<br>                        &#125;<br>                    &#125;<br>                    <span class=\"hljs-keyword\">if</span>(j+<span class=\"hljs-number\">1</span>&gt;=n)&#123;<br>    <br>                        res++;<br>                    &#125;<br>                    <span class=\"hljs-keyword\">else</span>&#123;<br>    <br>                        <span class=\"hljs-keyword\">if</span>(grid[i][j+<span class=\"hljs-number\">1</span>] == <span class=\"hljs-number\">0</span>)&#123;<br>    <br>                            res++;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> res;       <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>写的时候直接暴力统计每一个岛屿的四个方向是否与其他岛屿相连，<br>使用了一堆的if…；<br>看到别人的题解是先统计周长为有几块岛屿&#x2F;*4，再判断如果岛屿两两相连，那么周长-2；</p>\n"},{"title":"布隆过滤器和布谷鸟过滤器","author":null,"date":"2023-08-19T05:16:04.000Z","_content":"## 布隆过滤器\n\n本质：**一个空的2进制数组**（初始全为0，只存0和1）\n\n#### 插入\n\n一个key，经过**k个hash函数**运算后，得到k个值，将2进制数组对应下标的位置置为1。\n\n#### 查询\n\n将key同样进行k个hash，去2进制数组比对对应下标位置的值\n\n* 全为1则**可能存在**该key；\n* 不全为1，则**一定不存在**该key\n\n#### 删除\n\n不能删\n\n#### 应用\n\n* 大集合中检查元素是否重复\n* Redis中防止缓存穿透\n\n缓存穿透：key对应的数据在数据源并不存在，每次针对此key的请求从缓存获取不到，请求都会到数据源，从而可能压垮数据源。\n解决办法：将数据源的key是否存在的信息存储到布隆过滤器中，如果布隆过滤器判定数据不存在，则不再请求数据源。\n\n## 布谷鸟过滤器\n\n基本的布谷鸟过滤器由两个并不独立的哈希函数构成。\n基本单位为条目，每个条目存储一个指纹。\n指纹指的是使用一个哈希函数生成的n位比特位，n的具体大小由所能接受的误判率来设置。一般n=8\n布谷鸟哈希表由一个桶数组构成，每个桶可以有多个条目，即每个桶中有多个存放指纹的位置。\n\n#### 插入\n\n先进行一次hash，得出应当插入位置和应当插入的值（指纹）。\n如果这个桶（桶内的m个位置均被占用）插入失败，会重新计算(指纹哈希与第一个索引异或)，查看第二个桶能否插入。\n\n若第二个桶插入失败，则会随机在两个桶中挑选一个桶，将其中的一个值标记为旧值，用新值覆盖旧值，旧值会在重复上面的步骤进行插入。\n\n#### 扩容\n\n如果数组过小，会发生循环挤兑的情况。\n如果超过最大挤兑次数，进行扩容，重新计算每个指纹的位置。\n\n#### 删除\n\n* 通过两次hash找到索引位置，如果任何桶中的指纹匹配，则从该桶中删除匹配指纹的一份副本。\n* 如果俩数据的哈希值和指纹相同时，会出现误删除情况。\n\n##### 更新\n\n删除后再添加新指纹。\n\n#### 优点\n\n* 支持删除\n* 在误判率小于3%时，空间性能优于布隆过滤器\n* 查询效率高\n\n#### 缺点\n\n* 插入性能差\n* 插入重复元素存在上限（哈希函数个数/*桶容量）\n* 空间大小要求是2的指数\n* 删除有问题，存在误删的概率\n\n## 表格一览\n\n布隆过滤器 布谷鸟过滤器 插入 k个hash函数 2个hash函数 删除 不能删 可以删 更新 不能更新 删除后再添加 查询 有误判率 有误判率 优点 安全、节省空间 查询效率高、支持删除、更节省空间 缺点 有误判率、无法删除 插入性能差、插入重复元素有上限、空间大小为2的指数、删除不完美","source":"_posts/布隆过滤器和布谷鸟过滤器.md","raw":"---\ntitle: 布隆过滤器和布谷鸟过滤器\nauthor: \ntags: \n       - redis\n\ncategory: \n       - Java学习\n\ndate: 2023-08-19 13:16:04\n---\n## 布隆过滤器\n\n本质：**一个空的2进制数组**（初始全为0，只存0和1）\n\n#### 插入\n\n一个key，经过**k个hash函数**运算后，得到k个值，将2进制数组对应下标的位置置为1。\n\n#### 查询\n\n将key同样进行k个hash，去2进制数组比对对应下标位置的值\n\n* 全为1则**可能存在**该key；\n* 不全为1，则**一定不存在**该key\n\n#### 删除\n\n不能删\n\n#### 应用\n\n* 大集合中检查元素是否重复\n* Redis中防止缓存穿透\n\n缓存穿透：key对应的数据在数据源并不存在，每次针对此key的请求从缓存获取不到，请求都会到数据源，从而可能压垮数据源。\n解决办法：将数据源的key是否存在的信息存储到布隆过滤器中，如果布隆过滤器判定数据不存在，则不再请求数据源。\n\n## 布谷鸟过滤器\n\n基本的布谷鸟过滤器由两个并不独立的哈希函数构成。\n基本单位为条目，每个条目存储一个指纹。\n指纹指的是使用一个哈希函数生成的n位比特位，n的具体大小由所能接受的误判率来设置。一般n=8\n布谷鸟哈希表由一个桶数组构成，每个桶可以有多个条目，即每个桶中有多个存放指纹的位置。\n\n#### 插入\n\n先进行一次hash，得出应当插入位置和应当插入的值（指纹）。\n如果这个桶（桶内的m个位置均被占用）插入失败，会重新计算(指纹哈希与第一个索引异或)，查看第二个桶能否插入。\n\n若第二个桶插入失败，则会随机在两个桶中挑选一个桶，将其中的一个值标记为旧值，用新值覆盖旧值，旧值会在重复上面的步骤进行插入。\n\n#### 扩容\n\n如果数组过小，会发生循环挤兑的情况。\n如果超过最大挤兑次数，进行扩容，重新计算每个指纹的位置。\n\n#### 删除\n\n* 通过两次hash找到索引位置，如果任何桶中的指纹匹配，则从该桶中删除匹配指纹的一份副本。\n* 如果俩数据的哈希值和指纹相同时，会出现误删除情况。\n\n##### 更新\n\n删除后再添加新指纹。\n\n#### 优点\n\n* 支持删除\n* 在误判率小于3%时，空间性能优于布隆过滤器\n* 查询效率高\n\n#### 缺点\n\n* 插入性能差\n* 插入重复元素存在上限（哈希函数个数/*桶容量）\n* 空间大小要求是2的指数\n* 删除有问题，存在误删的概率\n\n## 表格一览\n\n布隆过滤器 布谷鸟过滤器 插入 k个hash函数 2个hash函数 删除 不能删 可以删 更新 不能更新 删除后再添加 查询 有误判率 有误判率 优点 安全、节省空间 查询效率高、支持删除、更节省空间 缺点 有误判率、无法删除 插入性能差、插入重复元素有上限、空间大小为2的指数、删除不完美","slug":"布隆过滤器和布谷鸟过滤器","published":1,"updated":"2024-03-15T08:23:29.881Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clttq59c0002lzwve3m5b2r70","content":"<h2 id=\"布隆过滤器\"><a href=\"#布隆过滤器\" class=\"headerlink\" title=\"布隆过滤器\"></a>布隆过滤器</h2><p>本质：<strong>一个空的2进制数组</strong>（初始全为0，只存0和1）</p>\n<h4 id=\"插入\"><a href=\"#插入\" class=\"headerlink\" title=\"插入\"></a>插入</h4><p>一个key，经过<strong>k个hash函数</strong>运算后，得到k个值，将2进制数组对应下标的位置置为1。</p>\n<h4 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h4><p>将key同样进行k个hash，去2进制数组比对对应下标位置的值</p>\n<ul>\n<li>全为1则<strong>可能存在</strong>该key；</li>\n<li>不全为1，则<strong>一定不存在</strong>该key</li>\n</ul>\n<h4 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h4><p>不能删</p>\n<h4 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h4><ul>\n<li>大集合中检查元素是否重复</li>\n<li>Redis中防止缓存穿透</li>\n</ul>\n<p>缓存穿透：key对应的数据在数据源并不存在，每次针对此key的请求从缓存获取不到，请求都会到数据源，从而可能压垮数据源。<br>解决办法：将数据源的key是否存在的信息存储到布隆过滤器中，如果布隆过滤器判定数据不存在，则不再请求数据源。</p>\n<h2 id=\"布谷鸟过滤器\"><a href=\"#布谷鸟过滤器\" class=\"headerlink\" title=\"布谷鸟过滤器\"></a>布谷鸟过滤器</h2><p>基本的布谷鸟过滤器由两个并不独立的哈希函数构成。<br>基本单位为条目，每个条目存储一个指纹。<br>指纹指的是使用一个哈希函数生成的n位比特位，n的具体大小由所能接受的误判率来设置。一般n&#x3D;8<br>布谷鸟哈希表由一个桶数组构成，每个桶可以有多个条目，即每个桶中有多个存放指纹的位置。</p>\n<h4 id=\"插入-1\"><a href=\"#插入-1\" class=\"headerlink\" title=\"插入\"></a>插入</h4><p>先进行一次hash，得出应当插入位置和应当插入的值（指纹）。<br>如果这个桶（桶内的m个位置均被占用）插入失败，会重新计算(指纹哈希与第一个索引异或)，查看第二个桶能否插入。</p>\n<p>若第二个桶插入失败，则会随机在两个桶中挑选一个桶，将其中的一个值标记为旧值，用新值覆盖旧值，旧值会在重复上面的步骤进行插入。</p>\n<h4 id=\"扩容\"><a href=\"#扩容\" class=\"headerlink\" title=\"扩容\"></a>扩容</h4><p>如果数组过小，会发生循环挤兑的情况。<br>如果超过最大挤兑次数，进行扩容，重新计算每个指纹的位置。</p>\n<h4 id=\"删除-1\"><a href=\"#删除-1\" class=\"headerlink\" title=\"删除\"></a>删除</h4><ul>\n<li>通过两次hash找到索引位置，如果任何桶中的指纹匹配，则从该桶中删除匹配指纹的一份副本。</li>\n<li>如果俩数据的哈希值和指纹相同时，会出现误删除情况。</li>\n</ul>\n<h5 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h5><p>删除后再添加新指纹。</p>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>支持删除</li>\n<li>在误判率小于3%时，空间性能优于布隆过滤器</li>\n<li>查询效率高</li>\n</ul>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li>插入性能差</li>\n<li>插入重复元素存在上限（哈希函数个数&#x2F;*桶容量）</li>\n<li>空间大小要求是2的指数</li>\n<li>删除有问题，存在误删的概率</li>\n</ul>\n<h2 id=\"表格一览\"><a href=\"#表格一览\" class=\"headerlink\" title=\"表格一览\"></a>表格一览</h2><p>布隆过滤器 布谷鸟过滤器 插入 k个hash函数 2个hash函数 删除 不能删 可以删 更新 不能更新 删除后再添加 查询 有误判率 有误判率 优点 安全、节省空间 查询效率高、支持删除、更节省空间 缺点 有误判率、无法删除 插入性能差、插入重复元素有上限、空间大小为2的指数、删除不完美</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"布隆过滤器\"><a href=\"#布隆过滤器\" class=\"headerlink\" title=\"布隆过滤器\"></a>布隆过滤器</h2><p>本质：<strong>一个空的2进制数组</strong>（初始全为0，只存0和1）</p>\n<h4 id=\"插入\"><a href=\"#插入\" class=\"headerlink\" title=\"插入\"></a>插入</h4><p>一个key，经过<strong>k个hash函数</strong>运算后，得到k个值，将2进制数组对应下标的位置置为1。</p>\n<h4 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h4><p>将key同样进行k个hash，去2进制数组比对对应下标位置的值</p>\n<ul>\n<li>全为1则<strong>可能存在</strong>该key；</li>\n<li>不全为1，则<strong>一定不存在</strong>该key</li>\n</ul>\n<h4 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h4><p>不能删</p>\n<h4 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h4><ul>\n<li>大集合中检查元素是否重复</li>\n<li>Redis中防止缓存穿透</li>\n</ul>\n<p>缓存穿透：key对应的数据在数据源并不存在，每次针对此key的请求从缓存获取不到，请求都会到数据源，从而可能压垮数据源。<br>解决办法：将数据源的key是否存在的信息存储到布隆过滤器中，如果布隆过滤器判定数据不存在，则不再请求数据源。</p>\n<h2 id=\"布谷鸟过滤器\"><a href=\"#布谷鸟过滤器\" class=\"headerlink\" title=\"布谷鸟过滤器\"></a>布谷鸟过滤器</h2><p>基本的布谷鸟过滤器由两个并不独立的哈希函数构成。<br>基本单位为条目，每个条目存储一个指纹。<br>指纹指的是使用一个哈希函数生成的n位比特位，n的具体大小由所能接受的误判率来设置。一般n&#x3D;8<br>布谷鸟哈希表由一个桶数组构成，每个桶可以有多个条目，即每个桶中有多个存放指纹的位置。</p>\n<h4 id=\"插入-1\"><a href=\"#插入-1\" class=\"headerlink\" title=\"插入\"></a>插入</h4><p>先进行一次hash，得出应当插入位置和应当插入的值（指纹）。<br>如果这个桶（桶内的m个位置均被占用）插入失败，会重新计算(指纹哈希与第一个索引异或)，查看第二个桶能否插入。</p>\n<p>若第二个桶插入失败，则会随机在两个桶中挑选一个桶，将其中的一个值标记为旧值，用新值覆盖旧值，旧值会在重复上面的步骤进行插入。</p>\n<h4 id=\"扩容\"><a href=\"#扩容\" class=\"headerlink\" title=\"扩容\"></a>扩容</h4><p>如果数组过小，会发生循环挤兑的情况。<br>如果超过最大挤兑次数，进行扩容，重新计算每个指纹的位置。</p>\n<h4 id=\"删除-1\"><a href=\"#删除-1\" class=\"headerlink\" title=\"删除\"></a>删除</h4><ul>\n<li>通过两次hash找到索引位置，如果任何桶中的指纹匹配，则从该桶中删除匹配指纹的一份副本。</li>\n<li>如果俩数据的哈希值和指纹相同时，会出现误删除情况。</li>\n</ul>\n<h5 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h5><p>删除后再添加新指纹。</p>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>支持删除</li>\n<li>在误判率小于3%时，空间性能优于布隆过滤器</li>\n<li>查询效率高</li>\n</ul>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li>插入性能差</li>\n<li>插入重复元素存在上限（哈希函数个数&#x2F;*桶容量）</li>\n<li>空间大小要求是2的指数</li>\n<li>删除有问题，存在误删的概率</li>\n</ul>\n<h2 id=\"表格一览\"><a href=\"#表格一览\" class=\"headerlink\" title=\"表格一览\"></a>表格一览</h2><p>布隆过滤器 布谷鸟过滤器 插入 k个hash函数 2个hash函数 删除 不能删 可以删 更新 不能更新 删除后再添加 查询 有误判率 有误判率 优点 安全、节省空间 查询效率高、支持删除、更节省空间 缺点 有误判率、无法删除 插入性能差、插入重复元素有上限、空间大小为2的指数、删除不完美</p>\n"},{"title":"数据处理之Matplotlib-入门篇","author":null,"date":"2021-04-06T01:30:59.000Z","_content":"## 实验二、数据处理之Matplotlib\n\n### 一、实验目的\n\n#### 1. 了解matplotlib库的基本功能\n\n#### 2. 掌握matplotlib库的使用方法\n\n### 二、实验工具：\n\n#### 1. Anaconda\n\n#### 2. Numpy，matplotlib\n\n### 三、Matplotlib简介\n\nMatplotlib 包含了几十个不同的模块， 如 matlab、mathtext、finance、dates 等，而 pylot 则是我们最常用的绘图模块\n\n### 四、实验内容\n\n#### 1.绘制正弦曲线，并设置标题、坐标轴名称、坐标轴范围\n\n```js \nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom pylab import mpl\nmpl.rcParams['font.sans-serif'] = ['FangSong']\nmpl.rcParams['axes.unicode_minus'] = False\nx=np.arange(0, 2*np.pi, 0.01)\ny=np.sin(x)\nplt.plot(x, y)\nplt.title(u'正弦曲线', fontdict={'size': 20})\nplt.xlabel(u'弧度', fontdict={'size': 16})\nplt.ylabel(u'正弦值', fontdict={'size': 16})\nplt.axis([-0.1*np.pi, 2.1*np.pi, -1.1, 1.1])\nplt.show()\n```\n\n![在这里插入图片描述](../images/e00e15b8-cf47-495a-bb18-6a9a4fa0623b.png)\n\n#### 2. 同一坐标系中绘制多种曲线并通过样式、宽度、颜色加以区分\n\n```js \nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom pylab import mpl\nmpl.rcParams['font.sans-serif'] = ['FangSong']\nmpl.rcParams['axes.unicode_minus'] = False\nx = np.linspace(-4, 4, 200)\nf1 =  np.power(10, x)\nf2 = np.power(np.e, x)\nf3 = np.power(2, x)\nplt.plot(x, f1, 'r', ls='-', linewidth=2, label='$10^x$')\nplt.plot(x, f2, 'b', ls='--', linewidth=2, label='$e^x$')\nplt.plot(x, f3, 'g', ls=':', linewidth=2, label='$2^x$')\nplt.axis([-4, 4, -0.5, 8])\nplt.title('幂函数曲线', fontsize=16)\nplt.legend(loc='lower right')\nplt.show()\n```\n\n![在这里插入图片描述](../images/e48c8dd6-036b-4848-84d4-10469e4b4708.png)\n\n#### 3.绘制多轴图，即将多幅子图绘制在同一画板。\n\n```js \nimport numpy as np\nimport matplotlib.pyplot as plt\nplt.subplot(221)\nx = np.arange(0, 2*np.pi, 0.01)\ny = np.cos(x)\nplt.plot(x, y)\nplt.subplot(222)\nplt.axis([-1, 2, -1, 2])\nplt.axvline(x=0, ymin=0, linewidth=4, color='g')\nplt.axvline(x=1.0, ymin=-0.5, ymax=0.5, linewidth=4, color='y')\nplt.show()\n```\n\n![image.png](../images/92e24ad4-0f7a-48fc-9a4c-f80ce9499c87.png)\n\n#### 4.直方图的绘制(数据自己定义）\n\n```js \nimport numpy as np\nimport matplotlib.pyplot as plt\nbins = np.arange(-3, 10, 3)\nplt.hist(bins)\nplt.show()\n```\n\n![image.png](../images/517a7374-5d40-42b0-9d08-e23c660e211c.png)\n\n#### 5.绘制散点图\n\n```js \nimport numpy as np\nimport matplotlib.pyplot as plt\nx = np.random.rand(30)\ny = np.random.rand(30)\narea = np.pi*(15*np.random.rand(30))**2\ncolor = 2*np.pi*np.random.rand(30)\nplt.scatter(x, y, s=area, c=color, alpha=0.5, cmap=plt.cm.hsv)\nplt.show()\n```\n\n![在这里插入图片描述](../images/bb907d89-2d42-45fe-bfb9-88d85bec2f67.png)\n\n#### 6.绘制盒状图\n\n```js \nimport numpy as np\nimport matplotlib.pyplot as plt\ndata = np.random.randn(200)\nfig, (ax2) = plt.subplots(1, figsize=(8, 6))\nax2.boxplot(data)\nplt.show()\n```\n\n![在这里插入图片描述](../images/2e965599-4959-44c8-8ec7-5612434816ca.png)\n\n#### 7.尝试matplotlib库的其它功能，如2D,3D等\n\n```js \nimport numpy as np\nimport matplotlib.pyplot as plt\ny,x = np.ogrid[-2:2:200j, -3:3:300j]\nz = x*np.exp(-x**2 - y**2)\nextent = [np.min(x), np.max(x), np.min(y), np.max(y)]\nplt.subplot(211)\ncs = plt.contour(z, 10, extent=extent)\nplt.clabel(cs)\nplt.subplot(111)\nplt.contourf(x.reshape(-1), y.reshape(-1), z, 20)\nplt.show()\n```\n\n![在这里插入图片描述](../images/030dd6b6-ddc1-4332-8b47-8ca16d732510.png)\n\n### 五、实验总结（写出本次实验的收获，遇到的问题等)\n\n了解到matplotlib库不是只要你安装了numpy就有了这个库，刚开始做的时候因为没有导入matplotlib库而频频报错。在网上搜索了简易的安装matplotlib库的办法，直接在电脑cmd里面敲两行命令安装即可，不用再很繁琐的在电脑上还要配置环境变量。","source":"_posts/数据处理之Matplotlib-入门篇.md","raw":"---\ntitle: 数据处理之Matplotlib-入门篇\nauthor: \ntags: \n       - matplotlib\n\ncategory: \n       - 其它\n\ndate: 2021-04-06 09:30:59\n---\n## 实验二、数据处理之Matplotlib\n\n### 一、实验目的\n\n#### 1. 了解matplotlib库的基本功能\n\n#### 2. 掌握matplotlib库的使用方法\n\n### 二、实验工具：\n\n#### 1. Anaconda\n\n#### 2. Numpy，matplotlib\n\n### 三、Matplotlib简介\n\nMatplotlib 包含了几十个不同的模块， 如 matlab、mathtext、finance、dates 等，而 pylot 则是我们最常用的绘图模块\n\n### 四、实验内容\n\n#### 1.绘制正弦曲线，并设置标题、坐标轴名称、坐标轴范围\n\n```js \nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom pylab import mpl\nmpl.rcParams['font.sans-serif'] = ['FangSong']\nmpl.rcParams['axes.unicode_minus'] = False\nx=np.arange(0, 2*np.pi, 0.01)\ny=np.sin(x)\nplt.plot(x, y)\nplt.title(u'正弦曲线', fontdict={'size': 20})\nplt.xlabel(u'弧度', fontdict={'size': 16})\nplt.ylabel(u'正弦值', fontdict={'size': 16})\nplt.axis([-0.1*np.pi, 2.1*np.pi, -1.1, 1.1])\nplt.show()\n```\n\n![在这里插入图片描述](../images/e00e15b8-cf47-495a-bb18-6a9a4fa0623b.png)\n\n#### 2. 同一坐标系中绘制多种曲线并通过样式、宽度、颜色加以区分\n\n```js \nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom pylab import mpl\nmpl.rcParams['font.sans-serif'] = ['FangSong']\nmpl.rcParams['axes.unicode_minus'] = False\nx = np.linspace(-4, 4, 200)\nf1 =  np.power(10, x)\nf2 = np.power(np.e, x)\nf3 = np.power(2, x)\nplt.plot(x, f1, 'r', ls='-', linewidth=2, label='$10^x$')\nplt.plot(x, f2, 'b', ls='--', linewidth=2, label='$e^x$')\nplt.plot(x, f3, 'g', ls=':', linewidth=2, label='$2^x$')\nplt.axis([-4, 4, -0.5, 8])\nplt.title('幂函数曲线', fontsize=16)\nplt.legend(loc='lower right')\nplt.show()\n```\n\n![在这里插入图片描述](../images/e48c8dd6-036b-4848-84d4-10469e4b4708.png)\n\n#### 3.绘制多轴图，即将多幅子图绘制在同一画板。\n\n```js \nimport numpy as np\nimport matplotlib.pyplot as plt\nplt.subplot(221)\nx = np.arange(0, 2*np.pi, 0.01)\ny = np.cos(x)\nplt.plot(x, y)\nplt.subplot(222)\nplt.axis([-1, 2, -1, 2])\nplt.axvline(x=0, ymin=0, linewidth=4, color='g')\nplt.axvline(x=1.0, ymin=-0.5, ymax=0.5, linewidth=4, color='y')\nplt.show()\n```\n\n![image.png](../images/92e24ad4-0f7a-48fc-9a4c-f80ce9499c87.png)\n\n#### 4.直方图的绘制(数据自己定义）\n\n```js \nimport numpy as np\nimport matplotlib.pyplot as plt\nbins = np.arange(-3, 10, 3)\nplt.hist(bins)\nplt.show()\n```\n\n![image.png](../images/517a7374-5d40-42b0-9d08-e23c660e211c.png)\n\n#### 5.绘制散点图\n\n```js \nimport numpy as np\nimport matplotlib.pyplot as plt\nx = np.random.rand(30)\ny = np.random.rand(30)\narea = np.pi*(15*np.random.rand(30))**2\ncolor = 2*np.pi*np.random.rand(30)\nplt.scatter(x, y, s=area, c=color, alpha=0.5, cmap=plt.cm.hsv)\nplt.show()\n```\n\n![在这里插入图片描述](../images/bb907d89-2d42-45fe-bfb9-88d85bec2f67.png)\n\n#### 6.绘制盒状图\n\n```js \nimport numpy as np\nimport matplotlib.pyplot as plt\ndata = np.random.randn(200)\nfig, (ax2) = plt.subplots(1, figsize=(8, 6))\nax2.boxplot(data)\nplt.show()\n```\n\n![在这里插入图片描述](../images/2e965599-4959-44c8-8ec7-5612434816ca.png)\n\n#### 7.尝试matplotlib库的其它功能，如2D,3D等\n\n```js \nimport numpy as np\nimport matplotlib.pyplot as plt\ny,x = np.ogrid[-2:2:200j, -3:3:300j]\nz = x*np.exp(-x**2 - y**2)\nextent = [np.min(x), np.max(x), np.min(y), np.max(y)]\nplt.subplot(211)\ncs = plt.contour(z, 10, extent=extent)\nplt.clabel(cs)\nplt.subplot(111)\nplt.contourf(x.reshape(-1), y.reshape(-1), z, 20)\nplt.show()\n```\n\n![在这里插入图片描述](../images/030dd6b6-ddc1-4332-8b47-8ca16d732510.png)\n\n### 五、实验总结（写出本次实验的收获，遇到的问题等)\n\n了解到matplotlib库不是只要你安装了numpy就有了这个库，刚开始做的时候因为没有导入matplotlib库而频频报错。在网上搜索了简易的安装matplotlib库的办法，直接在电脑cmd里面敲两行命令安装即可，不用再很繁琐的在电脑上还要配置环境变量。","slug":"数据处理之Matplotlib-入门篇","published":1,"updated":"2024-03-15T11:52:42.920Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clttq59c1002pzwve12fl3cak","content":"<h2 id=\"实验二、数据处理之Matplotlib\"><a href=\"#实验二、数据处理之Matplotlib\" class=\"headerlink\" title=\"实验二、数据处理之Matplotlib\"></a>实验二、数据处理之Matplotlib</h2><h3 id=\"一、实验目的\"><a href=\"#一、实验目的\" class=\"headerlink\" title=\"一、实验目的\"></a>一、实验目的</h3><h4 id=\"1-了解matplotlib库的基本功能\"><a href=\"#1-了解matplotlib库的基本功能\" class=\"headerlink\" title=\"1. 了解matplotlib库的基本功能\"></a>1. 了解matplotlib库的基本功能</h4><h4 id=\"2-掌握matplotlib库的使用方法\"><a href=\"#2-掌握matplotlib库的使用方法\" class=\"headerlink\" title=\"2. 掌握matplotlib库的使用方法\"></a>2. 掌握matplotlib库的使用方法</h4><h3 id=\"二、实验工具：\"><a href=\"#二、实验工具：\" class=\"headerlink\" title=\"二、实验工具：\"></a>二、实验工具：</h3><h4 id=\"1-Anaconda\"><a href=\"#1-Anaconda\" class=\"headerlink\" title=\"1. Anaconda\"></a>1. Anaconda</h4><h4 id=\"2-Numpy，matplotlib\"><a href=\"#2-Numpy，matplotlib\" class=\"headerlink\" title=\"2. Numpy，matplotlib\"></a>2. Numpy，matplotlib</h4><h3 id=\"三、Matplotlib简介\"><a href=\"#三、Matplotlib简介\" class=\"headerlink\" title=\"三、Matplotlib简介\"></a>三、Matplotlib简介</h3><p>Matplotlib 包含了几十个不同的模块， 如 matlab、mathtext、finance、dates 等，而 pylot 则是我们最常用的绘图模块</p>\n<h3 id=\"四、实验内容\"><a href=\"#四、实验内容\" class=\"headerlink\" title=\"四、实验内容\"></a>四、实验内容</h3><h4 id=\"1-绘制正弦曲线，并设置标题、坐标轴名称、坐标轴范围\"><a href=\"#1-绘制正弦曲线，并设置标题、坐标轴名称、坐标轴范围\" class=\"headerlink\" title=\"1.绘制正弦曲线，并设置标题、坐标轴名称、坐标轴范围\"></a>1.绘制正弦曲线，并设置标题、坐标轴名称、坐标轴范围</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><span class=\"hljs-keyword\">import</span> matplotlib.<span class=\"hljs-property\">pyplot</span> <span class=\"hljs-keyword\">as</span> plt<br><span class=\"hljs-keyword\">from</span> pylab <span class=\"hljs-keyword\">import</span> mpl<br>mpl.<span class=\"hljs-property\">rcParams</span>[<span class=\"hljs-string\">&#x27;font.sans-serif&#x27;</span>] = [<span class=\"hljs-string\">&#x27;FangSong&#x27;</span>]<br>mpl.<span class=\"hljs-property\">rcParams</span>[<span class=\"hljs-string\">&#x27;axes.unicode_minus&#x27;</span>] = <span class=\"hljs-title class_\">False</span><br>x=np.<span class=\"hljs-title function_\">arange</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>*np.<span class=\"hljs-property\">pi</span>, <span class=\"hljs-number\">0.01</span>)<br>y=np.<span class=\"hljs-title function_\">sin</span>(x)<br>plt.<span class=\"hljs-title function_\">plot</span>(x, y)<br>plt.<span class=\"hljs-title function_\">title</span>(u<span class=\"hljs-string\">&#x27;正弦曲线&#x27;</span>, fontdict=&#123;<span class=\"hljs-string\">&#x27;size&#x27;</span>: <span class=\"hljs-number\">20</span>&#125;)<br>plt.<span class=\"hljs-title function_\">xlabel</span>(u<span class=\"hljs-string\">&#x27;弧度&#x27;</span>, fontdict=&#123;<span class=\"hljs-string\">&#x27;size&#x27;</span>: <span class=\"hljs-number\">16</span>&#125;)<br>plt.<span class=\"hljs-title function_\">ylabel</span>(u<span class=\"hljs-string\">&#x27;正弦值&#x27;</span>, fontdict=&#123;<span class=\"hljs-string\">&#x27;size&#x27;</span>: <span class=\"hljs-number\">16</span>&#125;)<br>plt.<span class=\"hljs-title function_\">axis</span>([-<span class=\"hljs-number\">0.1</span>*np.<span class=\"hljs-property\">pi</span>, <span class=\"hljs-number\">2.1</span>*np.<span class=\"hljs-property\">pi</span>, -<span class=\"hljs-number\">1.1</span>, <span class=\"hljs-number\">1.1</span>])<br>plt.<span class=\"hljs-title function_\">show</span>()<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/e00e15b8-cf47-495a-bb18-6a9a4fa0623b.png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"2-同一坐标系中绘制多种曲线并通过样式、宽度、颜色加以区分\"><a href=\"#2-同一坐标系中绘制多种曲线并通过样式、宽度、颜色加以区分\" class=\"headerlink\" title=\"2. 同一坐标系中绘制多种曲线并通过样式、宽度、颜色加以区分\"></a>2. 同一坐标系中绘制多种曲线并通过样式、宽度、颜色加以区分</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><span class=\"hljs-keyword\">import</span> matplotlib.<span class=\"hljs-property\">pyplot</span> <span class=\"hljs-keyword\">as</span> plt<br><span class=\"hljs-keyword\">from</span> pylab <span class=\"hljs-keyword\">import</span> mpl<br>mpl.<span class=\"hljs-property\">rcParams</span>[<span class=\"hljs-string\">&#x27;font.sans-serif&#x27;</span>] = [<span class=\"hljs-string\">&#x27;FangSong&#x27;</span>]<br>mpl.<span class=\"hljs-property\">rcParams</span>[<span class=\"hljs-string\">&#x27;axes.unicode_minus&#x27;</span>] = <span class=\"hljs-title class_\">False</span><br>x = np.<span class=\"hljs-title function_\">linspace</span>(-<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">200</span>)<br>f1 =  np.<span class=\"hljs-title function_\">power</span>(<span class=\"hljs-number\">10</span>, x)<br>f2 = np.<span class=\"hljs-title function_\">power</span>(np.<span class=\"hljs-property\">e</span>, x)<br>f3 = np.<span class=\"hljs-title function_\">power</span>(<span class=\"hljs-number\">2</span>, x)<br>plt.<span class=\"hljs-title function_\">plot</span>(x, f1, <span class=\"hljs-string\">&#x27;r&#x27;</span>, ls=<span class=\"hljs-string\">&#x27;-&#x27;</span>, linewidth=<span class=\"hljs-number\">2</span>, label=<span class=\"hljs-string\">&#x27;$10^x$&#x27;</span>)<br>plt.<span class=\"hljs-title function_\">plot</span>(x, f2, <span class=\"hljs-string\">&#x27;b&#x27;</span>, ls=<span class=\"hljs-string\">&#x27;--&#x27;</span>, linewidth=<span class=\"hljs-number\">2</span>, label=<span class=\"hljs-string\">&#x27;$e^x$&#x27;</span>)<br>plt.<span class=\"hljs-title function_\">plot</span>(x, f3, <span class=\"hljs-string\">&#x27;g&#x27;</span>, ls=<span class=\"hljs-string\">&#x27;:&#x27;</span>, linewidth=<span class=\"hljs-number\">2</span>, label=<span class=\"hljs-string\">&#x27;$2^x$&#x27;</span>)<br>plt.<span class=\"hljs-title function_\">axis</span>([-<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>, -<span class=\"hljs-number\">0.5</span>, <span class=\"hljs-number\">8</span>])<br>plt.<span class=\"hljs-title function_\">title</span>(<span class=\"hljs-string\">&#x27;幂函数曲线&#x27;</span>, fontsize=<span class=\"hljs-number\">16</span>)<br>plt.<span class=\"hljs-title function_\">legend</span>(loc=<span class=\"hljs-string\">&#x27;lower right&#x27;</span>)<br>plt.<span class=\"hljs-title function_\">show</span>()<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/e48c8dd6-036b-4848-84d4-10469e4b4708.png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"3-绘制多轴图，即将多幅子图绘制在同一画板。\"><a href=\"#3-绘制多轴图，即将多幅子图绘制在同一画板。\" class=\"headerlink\" title=\"3.绘制多轴图，即将多幅子图绘制在同一画板。\"></a>3.绘制多轴图，即将多幅子图绘制在同一画板。</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><span class=\"hljs-keyword\">import</span> matplotlib.<span class=\"hljs-property\">pyplot</span> <span class=\"hljs-keyword\">as</span> plt<br>plt.<span class=\"hljs-title function_\">subplot</span>(<span class=\"hljs-number\">221</span>)<br>x = np.<span class=\"hljs-title function_\">arange</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>*np.<span class=\"hljs-property\">pi</span>, <span class=\"hljs-number\">0.01</span>)<br>y = np.<span class=\"hljs-title function_\">cos</span>(x)<br>plt.<span class=\"hljs-title function_\">plot</span>(x, y)<br>plt.<span class=\"hljs-title function_\">subplot</span>(<span class=\"hljs-number\">222</span>)<br>plt.<span class=\"hljs-title function_\">axis</span>([-<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, -<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>])<br>plt.<span class=\"hljs-title function_\">axvline</span>(x=<span class=\"hljs-number\">0</span>, ymin=<span class=\"hljs-number\">0</span>, linewidth=<span class=\"hljs-number\">4</span>, color=<span class=\"hljs-string\">&#x27;g&#x27;</span>)<br>plt.<span class=\"hljs-title function_\">axvline</span>(x=<span class=\"hljs-number\">1.0</span>, ymin=-<span class=\"hljs-number\">0.5</span>, ymax=<span class=\"hljs-number\">0.5</span>, linewidth=<span class=\"hljs-number\">4</span>, color=<span class=\"hljs-string\">&#x27;y&#x27;</span>)<br>plt.<span class=\"hljs-title function_\">show</span>()<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/92e24ad4-0f7a-48fc-9a4c-f80ce9499c87.png\" alt=\"image.png\"></p>\n<h4 id=\"4-直方图的绘制-数据自己定义）\"><a href=\"#4-直方图的绘制-数据自己定义）\" class=\"headerlink\" title=\"4.直方图的绘制(数据自己定义）\"></a>4.直方图的绘制(数据自己定义）</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><span class=\"hljs-keyword\">import</span> matplotlib.<span class=\"hljs-property\">pyplot</span> <span class=\"hljs-keyword\">as</span> plt<br>bins = np.<span class=\"hljs-title function_\">arange</span>(-<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">3</span>)<br>plt.<span class=\"hljs-title function_\">hist</span>(bins)<br>plt.<span class=\"hljs-title function_\">show</span>()<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/517a7374-5d40-42b0-9d08-e23c660e211c.png\" alt=\"image.png\"></p>\n<h4 id=\"5-绘制散点图\"><a href=\"#5-绘制散点图\" class=\"headerlink\" title=\"5.绘制散点图\"></a>5.绘制散点图</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><span class=\"hljs-keyword\">import</span> matplotlib.<span class=\"hljs-property\">pyplot</span> <span class=\"hljs-keyword\">as</span> plt<br>x = np.<span class=\"hljs-property\">random</span>.<span class=\"hljs-title function_\">rand</span>(<span class=\"hljs-number\">30</span>)<br>y = np.<span class=\"hljs-property\">random</span>.<span class=\"hljs-title function_\">rand</span>(<span class=\"hljs-number\">30</span>)<br>area = np.<span class=\"hljs-property\">pi</span>*(<span class=\"hljs-number\">15</span>*np.<span class=\"hljs-property\">random</span>.<span class=\"hljs-title function_\">rand</span>(<span class=\"hljs-number\">30</span>))**<span class=\"hljs-number\">2</span><br>color = <span class=\"hljs-number\">2</span>*np.<span class=\"hljs-property\">pi</span>*np.<span class=\"hljs-property\">random</span>.<span class=\"hljs-title function_\">rand</span>(<span class=\"hljs-number\">30</span>)<br>plt.<span class=\"hljs-title function_\">scatter</span>(x, y, s=area, c=color, alpha=<span class=\"hljs-number\">0.5</span>, cmap=plt.<span class=\"hljs-property\">cm</span>.<span class=\"hljs-property\">hsv</span>)<br>plt.<span class=\"hljs-title function_\">show</span>()<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/bb907d89-2d42-45fe-bfb9-88d85bec2f67.png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"6-绘制盒状图\"><a href=\"#6-绘制盒状图\" class=\"headerlink\" title=\"6.绘制盒状图\"></a>6.绘制盒状图</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><span class=\"hljs-keyword\">import</span> matplotlib.<span class=\"hljs-property\">pyplot</span> <span class=\"hljs-keyword\">as</span> plt<br>data = np.<span class=\"hljs-property\">random</span>.<span class=\"hljs-title function_\">randn</span>(<span class=\"hljs-number\">200</span>)<br>fig, (ax2) = plt.<span class=\"hljs-title function_\">subplots</span>(<span class=\"hljs-number\">1</span>, figsize=(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">6</span>))<br>ax2.<span class=\"hljs-title function_\">boxplot</span>(data)<br>plt.<span class=\"hljs-title function_\">show</span>()<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/2e965599-4959-44c8-8ec7-5612434816ca.png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"7-尝试matplotlib库的其它功能，如2D-3D等\"><a href=\"#7-尝试matplotlib库的其它功能，如2D-3D等\" class=\"headerlink\" title=\"7.尝试matplotlib库的其它功能，如2D,3D等\"></a>7.尝试matplotlib库的其它功能，如2D,3D等</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><span class=\"hljs-keyword\">import</span> matplotlib.<span class=\"hljs-property\">pyplot</span> <span class=\"hljs-keyword\">as</span> plt<br>y,x = np.<span class=\"hljs-property\">ogrid</span>[-<span class=\"hljs-number\">2</span>:<span class=\"hljs-number\">2</span>:200j, -<span class=\"hljs-number\">3</span>:<span class=\"hljs-number\">3</span>:300j]<br>z = x*np.<span class=\"hljs-title function_\">exp</span>(-x**<span class=\"hljs-number\">2</span> - y**<span class=\"hljs-number\">2</span>)<br>extent = [np.<span class=\"hljs-title function_\">min</span>(x), np.<span class=\"hljs-title function_\">max</span>(x), np.<span class=\"hljs-title function_\">min</span>(y), np.<span class=\"hljs-title function_\">max</span>(y)]<br>plt.<span class=\"hljs-title function_\">subplot</span>(<span class=\"hljs-number\">211</span>)<br>cs = plt.<span class=\"hljs-title function_\">contour</span>(z, <span class=\"hljs-number\">10</span>, extent=extent)<br>plt.<span class=\"hljs-title function_\">clabel</span>(cs)<br>plt.<span class=\"hljs-title function_\">subplot</span>(<span class=\"hljs-number\">111</span>)<br>plt.<span class=\"hljs-title function_\">contourf</span>(x.<span class=\"hljs-title function_\">reshape</span>(-<span class=\"hljs-number\">1</span>), y.<span class=\"hljs-title function_\">reshape</span>(-<span class=\"hljs-number\">1</span>), z, <span class=\"hljs-number\">20</span>)<br>plt.<span class=\"hljs-title function_\">show</span>()<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/030dd6b6-ddc1-4332-8b47-8ca16d732510.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"五、实验总结（写出本次实验的收获，遇到的问题等\"><a href=\"#五、实验总结（写出本次实验的收获，遇到的问题等\" class=\"headerlink\" title=\"五、实验总结（写出本次实验的收获，遇到的问题等)\"></a>五、实验总结（写出本次实验的收获，遇到的问题等)</h3><p>了解到matplotlib库不是只要你安装了numpy就有了这个库，刚开始做的时候因为没有导入matplotlib库而频频报错。在网上搜索了简易的安装matplotlib库的办法，直接在电脑cmd里面敲两行命令安装即可，不用再很繁琐的在电脑上还要配置环境变量。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"实验二、数据处理之Matplotlib\"><a href=\"#实验二、数据处理之Matplotlib\" class=\"headerlink\" title=\"实验二、数据处理之Matplotlib\"></a>实验二、数据处理之Matplotlib</h2><h3 id=\"一、实验目的\"><a href=\"#一、实验目的\" class=\"headerlink\" title=\"一、实验目的\"></a>一、实验目的</h3><h4 id=\"1-了解matplotlib库的基本功能\"><a href=\"#1-了解matplotlib库的基本功能\" class=\"headerlink\" title=\"1. 了解matplotlib库的基本功能\"></a>1. 了解matplotlib库的基本功能</h4><h4 id=\"2-掌握matplotlib库的使用方法\"><a href=\"#2-掌握matplotlib库的使用方法\" class=\"headerlink\" title=\"2. 掌握matplotlib库的使用方法\"></a>2. 掌握matplotlib库的使用方法</h4><h3 id=\"二、实验工具：\"><a href=\"#二、实验工具：\" class=\"headerlink\" title=\"二、实验工具：\"></a>二、实验工具：</h3><h4 id=\"1-Anaconda\"><a href=\"#1-Anaconda\" class=\"headerlink\" title=\"1. Anaconda\"></a>1. Anaconda</h4><h4 id=\"2-Numpy，matplotlib\"><a href=\"#2-Numpy，matplotlib\" class=\"headerlink\" title=\"2. Numpy，matplotlib\"></a>2. Numpy，matplotlib</h4><h3 id=\"三、Matplotlib简介\"><a href=\"#三、Matplotlib简介\" class=\"headerlink\" title=\"三、Matplotlib简介\"></a>三、Matplotlib简介</h3><p>Matplotlib 包含了几十个不同的模块， 如 matlab、mathtext、finance、dates 等，而 pylot 则是我们最常用的绘图模块</p>\n<h3 id=\"四、实验内容\"><a href=\"#四、实验内容\" class=\"headerlink\" title=\"四、实验内容\"></a>四、实验内容</h3><h4 id=\"1-绘制正弦曲线，并设置标题、坐标轴名称、坐标轴范围\"><a href=\"#1-绘制正弦曲线，并设置标题、坐标轴名称、坐标轴范围\" class=\"headerlink\" title=\"1.绘制正弦曲线，并设置标题、坐标轴名称、坐标轴范围\"></a>1.绘制正弦曲线，并设置标题、坐标轴名称、坐标轴范围</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><span class=\"hljs-keyword\">import</span> matplotlib.<span class=\"hljs-property\">pyplot</span> <span class=\"hljs-keyword\">as</span> plt<br><span class=\"hljs-keyword\">from</span> pylab <span class=\"hljs-keyword\">import</span> mpl<br>mpl.<span class=\"hljs-property\">rcParams</span>[<span class=\"hljs-string\">&#x27;font.sans-serif&#x27;</span>] = [<span class=\"hljs-string\">&#x27;FangSong&#x27;</span>]<br>mpl.<span class=\"hljs-property\">rcParams</span>[<span class=\"hljs-string\">&#x27;axes.unicode_minus&#x27;</span>] = <span class=\"hljs-title class_\">False</span><br>x=np.<span class=\"hljs-title function_\">arange</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>*np.<span class=\"hljs-property\">pi</span>, <span class=\"hljs-number\">0.01</span>)<br>y=np.<span class=\"hljs-title function_\">sin</span>(x)<br>plt.<span class=\"hljs-title function_\">plot</span>(x, y)<br>plt.<span class=\"hljs-title function_\">title</span>(u<span class=\"hljs-string\">&#x27;正弦曲线&#x27;</span>, fontdict=&#123;<span class=\"hljs-string\">&#x27;size&#x27;</span>: <span class=\"hljs-number\">20</span>&#125;)<br>plt.<span class=\"hljs-title function_\">xlabel</span>(u<span class=\"hljs-string\">&#x27;弧度&#x27;</span>, fontdict=&#123;<span class=\"hljs-string\">&#x27;size&#x27;</span>: <span class=\"hljs-number\">16</span>&#125;)<br>plt.<span class=\"hljs-title function_\">ylabel</span>(u<span class=\"hljs-string\">&#x27;正弦值&#x27;</span>, fontdict=&#123;<span class=\"hljs-string\">&#x27;size&#x27;</span>: <span class=\"hljs-number\">16</span>&#125;)<br>plt.<span class=\"hljs-title function_\">axis</span>([-<span class=\"hljs-number\">0.1</span>*np.<span class=\"hljs-property\">pi</span>, <span class=\"hljs-number\">2.1</span>*np.<span class=\"hljs-property\">pi</span>, -<span class=\"hljs-number\">1.1</span>, <span class=\"hljs-number\">1.1</span>])<br>plt.<span class=\"hljs-title function_\">show</span>()<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/e00e15b8-cf47-495a-bb18-6a9a4fa0623b.png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"2-同一坐标系中绘制多种曲线并通过样式、宽度、颜色加以区分\"><a href=\"#2-同一坐标系中绘制多种曲线并通过样式、宽度、颜色加以区分\" class=\"headerlink\" title=\"2. 同一坐标系中绘制多种曲线并通过样式、宽度、颜色加以区分\"></a>2. 同一坐标系中绘制多种曲线并通过样式、宽度、颜色加以区分</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><span class=\"hljs-keyword\">import</span> matplotlib.<span class=\"hljs-property\">pyplot</span> <span class=\"hljs-keyword\">as</span> plt<br><span class=\"hljs-keyword\">from</span> pylab <span class=\"hljs-keyword\">import</span> mpl<br>mpl.<span class=\"hljs-property\">rcParams</span>[<span class=\"hljs-string\">&#x27;font.sans-serif&#x27;</span>] = [<span class=\"hljs-string\">&#x27;FangSong&#x27;</span>]<br>mpl.<span class=\"hljs-property\">rcParams</span>[<span class=\"hljs-string\">&#x27;axes.unicode_minus&#x27;</span>] = <span class=\"hljs-title class_\">False</span><br>x = np.<span class=\"hljs-title function_\">linspace</span>(-<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">200</span>)<br>f1 =  np.<span class=\"hljs-title function_\">power</span>(<span class=\"hljs-number\">10</span>, x)<br>f2 = np.<span class=\"hljs-title function_\">power</span>(np.<span class=\"hljs-property\">e</span>, x)<br>f3 = np.<span class=\"hljs-title function_\">power</span>(<span class=\"hljs-number\">2</span>, x)<br>plt.<span class=\"hljs-title function_\">plot</span>(x, f1, <span class=\"hljs-string\">&#x27;r&#x27;</span>, ls=<span class=\"hljs-string\">&#x27;-&#x27;</span>, linewidth=<span class=\"hljs-number\">2</span>, label=<span class=\"hljs-string\">&#x27;$10^x$&#x27;</span>)<br>plt.<span class=\"hljs-title function_\">plot</span>(x, f2, <span class=\"hljs-string\">&#x27;b&#x27;</span>, ls=<span class=\"hljs-string\">&#x27;--&#x27;</span>, linewidth=<span class=\"hljs-number\">2</span>, label=<span class=\"hljs-string\">&#x27;$e^x$&#x27;</span>)<br>plt.<span class=\"hljs-title function_\">plot</span>(x, f3, <span class=\"hljs-string\">&#x27;g&#x27;</span>, ls=<span class=\"hljs-string\">&#x27;:&#x27;</span>, linewidth=<span class=\"hljs-number\">2</span>, label=<span class=\"hljs-string\">&#x27;$2^x$&#x27;</span>)<br>plt.<span class=\"hljs-title function_\">axis</span>([-<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>, -<span class=\"hljs-number\">0.5</span>, <span class=\"hljs-number\">8</span>])<br>plt.<span class=\"hljs-title function_\">title</span>(<span class=\"hljs-string\">&#x27;幂函数曲线&#x27;</span>, fontsize=<span class=\"hljs-number\">16</span>)<br>plt.<span class=\"hljs-title function_\">legend</span>(loc=<span class=\"hljs-string\">&#x27;lower right&#x27;</span>)<br>plt.<span class=\"hljs-title function_\">show</span>()<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/e48c8dd6-036b-4848-84d4-10469e4b4708.png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"3-绘制多轴图，即将多幅子图绘制在同一画板。\"><a href=\"#3-绘制多轴图，即将多幅子图绘制在同一画板。\" class=\"headerlink\" title=\"3.绘制多轴图，即将多幅子图绘制在同一画板。\"></a>3.绘制多轴图，即将多幅子图绘制在同一画板。</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><span class=\"hljs-keyword\">import</span> matplotlib.<span class=\"hljs-property\">pyplot</span> <span class=\"hljs-keyword\">as</span> plt<br>plt.<span class=\"hljs-title function_\">subplot</span>(<span class=\"hljs-number\">221</span>)<br>x = np.<span class=\"hljs-title function_\">arange</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>*np.<span class=\"hljs-property\">pi</span>, <span class=\"hljs-number\">0.01</span>)<br>y = np.<span class=\"hljs-title function_\">cos</span>(x)<br>plt.<span class=\"hljs-title function_\">plot</span>(x, y)<br>plt.<span class=\"hljs-title function_\">subplot</span>(<span class=\"hljs-number\">222</span>)<br>plt.<span class=\"hljs-title function_\">axis</span>([-<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, -<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>])<br>plt.<span class=\"hljs-title function_\">axvline</span>(x=<span class=\"hljs-number\">0</span>, ymin=<span class=\"hljs-number\">0</span>, linewidth=<span class=\"hljs-number\">4</span>, color=<span class=\"hljs-string\">&#x27;g&#x27;</span>)<br>plt.<span class=\"hljs-title function_\">axvline</span>(x=<span class=\"hljs-number\">1.0</span>, ymin=-<span class=\"hljs-number\">0.5</span>, ymax=<span class=\"hljs-number\">0.5</span>, linewidth=<span class=\"hljs-number\">4</span>, color=<span class=\"hljs-string\">&#x27;y&#x27;</span>)<br>plt.<span class=\"hljs-title function_\">show</span>()<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/92e24ad4-0f7a-48fc-9a4c-f80ce9499c87.png\" alt=\"image.png\"></p>\n<h4 id=\"4-直方图的绘制-数据自己定义）\"><a href=\"#4-直方图的绘制-数据自己定义）\" class=\"headerlink\" title=\"4.直方图的绘制(数据自己定义）\"></a>4.直方图的绘制(数据自己定义）</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><span class=\"hljs-keyword\">import</span> matplotlib.<span class=\"hljs-property\">pyplot</span> <span class=\"hljs-keyword\">as</span> plt<br>bins = np.<span class=\"hljs-title function_\">arange</span>(-<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">3</span>)<br>plt.<span class=\"hljs-title function_\">hist</span>(bins)<br>plt.<span class=\"hljs-title function_\">show</span>()<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/517a7374-5d40-42b0-9d08-e23c660e211c.png\" alt=\"image.png\"></p>\n<h4 id=\"5-绘制散点图\"><a href=\"#5-绘制散点图\" class=\"headerlink\" title=\"5.绘制散点图\"></a>5.绘制散点图</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><span class=\"hljs-keyword\">import</span> matplotlib.<span class=\"hljs-property\">pyplot</span> <span class=\"hljs-keyword\">as</span> plt<br>x = np.<span class=\"hljs-property\">random</span>.<span class=\"hljs-title function_\">rand</span>(<span class=\"hljs-number\">30</span>)<br>y = np.<span class=\"hljs-property\">random</span>.<span class=\"hljs-title function_\">rand</span>(<span class=\"hljs-number\">30</span>)<br>area = np.<span class=\"hljs-property\">pi</span>*(<span class=\"hljs-number\">15</span>*np.<span class=\"hljs-property\">random</span>.<span class=\"hljs-title function_\">rand</span>(<span class=\"hljs-number\">30</span>))**<span class=\"hljs-number\">2</span><br>color = <span class=\"hljs-number\">2</span>*np.<span class=\"hljs-property\">pi</span>*np.<span class=\"hljs-property\">random</span>.<span class=\"hljs-title function_\">rand</span>(<span class=\"hljs-number\">30</span>)<br>plt.<span class=\"hljs-title function_\">scatter</span>(x, y, s=area, c=color, alpha=<span class=\"hljs-number\">0.5</span>, cmap=plt.<span class=\"hljs-property\">cm</span>.<span class=\"hljs-property\">hsv</span>)<br>plt.<span class=\"hljs-title function_\">show</span>()<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/bb907d89-2d42-45fe-bfb9-88d85bec2f67.png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"6-绘制盒状图\"><a href=\"#6-绘制盒状图\" class=\"headerlink\" title=\"6.绘制盒状图\"></a>6.绘制盒状图</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><span class=\"hljs-keyword\">import</span> matplotlib.<span class=\"hljs-property\">pyplot</span> <span class=\"hljs-keyword\">as</span> plt<br>data = np.<span class=\"hljs-property\">random</span>.<span class=\"hljs-title function_\">randn</span>(<span class=\"hljs-number\">200</span>)<br>fig, (ax2) = plt.<span class=\"hljs-title function_\">subplots</span>(<span class=\"hljs-number\">1</span>, figsize=(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">6</span>))<br>ax2.<span class=\"hljs-title function_\">boxplot</span>(data)<br>plt.<span class=\"hljs-title function_\">show</span>()<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/2e965599-4959-44c8-8ec7-5612434816ca.png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"7-尝试matplotlib库的其它功能，如2D-3D等\"><a href=\"#7-尝试matplotlib库的其它功能，如2D-3D等\" class=\"headerlink\" title=\"7.尝试matplotlib库的其它功能，如2D,3D等\"></a>7.尝试matplotlib库的其它功能，如2D,3D等</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><span class=\"hljs-keyword\">import</span> matplotlib.<span class=\"hljs-property\">pyplot</span> <span class=\"hljs-keyword\">as</span> plt<br>y,x = np.<span class=\"hljs-property\">ogrid</span>[-<span class=\"hljs-number\">2</span>:<span class=\"hljs-number\">2</span>:200j, -<span class=\"hljs-number\">3</span>:<span class=\"hljs-number\">3</span>:300j]<br>z = x*np.<span class=\"hljs-title function_\">exp</span>(-x**<span class=\"hljs-number\">2</span> - y**<span class=\"hljs-number\">2</span>)<br>extent = [np.<span class=\"hljs-title function_\">min</span>(x), np.<span class=\"hljs-title function_\">max</span>(x), np.<span class=\"hljs-title function_\">min</span>(y), np.<span class=\"hljs-title function_\">max</span>(y)]<br>plt.<span class=\"hljs-title function_\">subplot</span>(<span class=\"hljs-number\">211</span>)<br>cs = plt.<span class=\"hljs-title function_\">contour</span>(z, <span class=\"hljs-number\">10</span>, extent=extent)<br>plt.<span class=\"hljs-title function_\">clabel</span>(cs)<br>plt.<span class=\"hljs-title function_\">subplot</span>(<span class=\"hljs-number\">111</span>)<br>plt.<span class=\"hljs-title function_\">contourf</span>(x.<span class=\"hljs-title function_\">reshape</span>(-<span class=\"hljs-number\">1</span>), y.<span class=\"hljs-title function_\">reshape</span>(-<span class=\"hljs-number\">1</span>), z, <span class=\"hljs-number\">20</span>)<br>plt.<span class=\"hljs-title function_\">show</span>()<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/030dd6b6-ddc1-4332-8b47-8ca16d732510.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"五、实验总结（写出本次实验的收获，遇到的问题等\"><a href=\"#五、实验总结（写出本次实验的收获，遇到的问题等\" class=\"headerlink\" title=\"五、实验总结（写出本次实验的收获，遇到的问题等)\"></a>五、实验总结（写出本次实验的收获，遇到的问题等)</h3><p>了解到matplotlib库不是只要你安装了numpy就有了这个库，刚开始做的时候因为没有导入matplotlib库而频频报错。在网上搜索了简易的安装matplotlib库的办法，直接在电脑cmd里面敲两行命令安装即可，不用再很繁琐的在电脑上还要配置环境变量。</p>\n"},{"title":"数据处理之Numpy-入门篇","author":null,"date":"2021-04-06T01:26:31.000Z","_content":"## 实验一、数据处理之Numpy\n\n### 一、实验目的\n\n#### 1. 了解numpy库的基本功能\n\n#### 2. 掌握Numpy库的对数组的操作与运算\n\n### 二、实验工具：\n\n#### 1. Anaconda\n\n#### 2. Numpy\n\n### 三、Numpy简介\n\nNumpy 的英文全称为 Numerical Python，指Python 面向数值计算的第三方库。Numpy 的特点在于，针对 Python 内建的数组类型做了扩充，支持更高维度的数组和矩阵运算，以及更丰富的数学函数。Numpy 是 Scipy.org 中最重要的库之一，它同时也被 Pandas，Matplotlib 等我们熟知的第三方库作为核心计算库。\nNumPy（Numeric Python）提供了许多高级的数值编程工具，如：矩阵数据类型、矢量处理，以及精密的运算库。专为进行严格的数字处理而产生。多为很多大型金融公司使用，以及核心的科学计算组织如：Lawrence Livermore，NASA用其处理一些本来使用C++，Fortran或Matlab等所做的任务。\nNumpy包括了：1、一个强大的N维数组对象Array；2、比较成熟的（广播）函数库；3、用于整合C/C++和Fortran代码的工具包；4、实用的线性代数、傅里叶变换和随机数生成函数。Numpy和稀疏矩阵运算包scipy配合使用更加方便。\n\n### 四、实验内容\n\n#### 1. 数组的创建（创建全0数组，全1数组，随机数数组）\n\n```js \nimport numpy as np\n\na = np.ones(5, int)\n\nb = np.zeros(5, int)\n\nf = np.random.randint(0, 10, 6)\nprint(\"全1数组：\\n\", a)\n\nprint(\"全0数组:\\n\", b)\n\nprint(\"随机数数组:\\n\", f)\n```\n\n![image.png](../images/39083d12-6736-4043-bbbe-8f2e9a858ffb.png)\n\n#### 2. 数组的属性（查看数组的维度，数组元素的个数）\n\n```js \nimport numpy as np\n\na = np.ones(5, int)\n\nprint(\"全1数组维度：\\n\", a.ndim)\n\nprint(\"全1数组元素个数：\\n\", a.shape)\n```\n\n![image.png](../images/804a573c-9673-4cfc-85f0-16bdd075fb84.png)\n\n#### 3. 数组的维度操作（将数组的行变列，返回最后一个元素，返回第2到第4个元素，返回逆序的数组）\n\n```js \nimport numpy as np\n\nc = np.arange(9).reshape(3, 3)\nprint(\"转置前：\\n\", c)\nd = c.T\nprint(\"转置后：\\n\", d)\n\ne = np.arange(10)\nprint(\"数组为：\\n\", e)\nprint(\"最后一个元素为：\\n\", e[-1])\nprint(\"第2到第4元素为：\\n\", e[1:4])\nprint(\"逆序数组为：\\n\", e[::-1])\n```\n\n![image.png](../images/c305a0fc-95de-49da-8323-4848537aaa7c.png)\n\n#### 4. 数组的合并（数组的水平合并，垂直合并，深度合并）\n\n```js \nimport numpy as np\n\nc = np.arange(-9, 0).reshape(3, 3)\nd = np.arange(0, 9).reshape(3, 3)\nprint(\"第一个数组为：\\n\", c)\nprint(\"第二个数组为：\\n\", d)\n\nprint(\"水平合并：\\n\", np.hstack((c, d)))\nprint(\"垂直合并：\\n\", np.hstack((c, d)))\nprint(\"深度合并：\\n\", np.hstack((c, d)))\n```\n\n![image.png](../images/4a236cbd-4c66-4bf6-ac38-2664a1027261.png)\n\n#### 5. 数组的拆分（数组的水平拆分，垂直拆分，深度拆分）\n\n```js \nimport numpy as np\n\nc = np.arange(-9, 0).reshape(3, 3)\nprint(\"数组为：\\n\", c)\n\nprint(\"水平拆分为：\\n\", np.hsplit(c, 3))\nprint(\"垂直拆分为：\\n\", np.vsplit(c, 3))\n\nd = np.arange(8).reshape(2, 2, 2)\nprint(\"待深度拆分数组为：\\n\", d)\nprint(\"深度拆分为：\\n\", np.dsplit(d, 2))\n```\n\n![image.png](../images/af2ece3b-1895-4bd7-8fd7-f0372f66111a.png)\n![image.png](../images/b2d52458-0e15-4e7d-9480-1800755cb85d.png)\n![image.png](../images/f5202819-abe1-400d-a6f2-dcf0a3fcc9f4.png)\n\n#### 6. 数组运算（与常的四则运算，与数组的四则运算，判断数组是否相等）\n\n```js \nimport numpy as np\n\na = np.arange(4)\nb = np.arange(4, 8)\nprint(\"两个数组分别为：\\n\", a, b)\nprint(\"a+2为：\\n\", a + 2)\nprint(\"a+b为：\\n\", a+b)\nprint(\"a-b为：\\n\", a-b)\nprint(\"a*b为：\\n\", a*b)\nprint(\"a/b为：\\n\", a/b)\n```\n\n![image.png](../images/e78eea16-0e8b-474d-95c7-327e0e2e806d.png)\n\n#### 7. 数组的常用函数（数组所有元素的和、积、平均值、最大值、最小值、元素替换、方差、标准差）\n\n```js \nimport numpy as np\n\na = np.arange(7)\nprint(\"数组为：\", a)\nprint(\"数组所有元素的和为：\", a.sum())\nprint(\"数组所有元素的积为：\", a.prod())\nprint(\"数组所有元素的平均值为：\", a.mean())\nprint(\"数组所有元素的最大值为：\", a.max())\nprint(\"数组所有元素的最小值为：\", a.min())\nprint(\"数组所有元素的元素小于3的元素替换为3，大于4的元素替换为4：\", a.clip(2, 5))\nprint(\"数组所有元素的方差为：\", a.var())\nprint(\"数组所有元素的标准差为：\", a.std())\n```\n\n![image.png](../images/8b115823-a4ed-416e-95f2-5fffad4d6649.png)\n\n### 五、实验总结（写出本次实验的收获，遇到的问题等）\n\n学习到了numpy库中的一些函数的使用方法。受益良多，感觉到python库的强大之处，日后一定多加练习，以求对python的常用库的使用更加熟练。","source":"_posts/数据处理之Numpy-入门篇.md","raw":"---\ntitle: 数据处理之Numpy-入门篇\nauthor: \ntags: \n       - python\n\ncategory: \n       - 其它\n\ndate: 2021-04-06 09:26:31\n---\n## 实验一、数据处理之Numpy\n\n### 一、实验目的\n\n#### 1. 了解numpy库的基本功能\n\n#### 2. 掌握Numpy库的对数组的操作与运算\n\n### 二、实验工具：\n\n#### 1. Anaconda\n\n#### 2. Numpy\n\n### 三、Numpy简介\n\nNumpy 的英文全称为 Numerical Python，指Python 面向数值计算的第三方库。Numpy 的特点在于，针对 Python 内建的数组类型做了扩充，支持更高维度的数组和矩阵运算，以及更丰富的数学函数。Numpy 是 Scipy.org 中最重要的库之一，它同时也被 Pandas，Matplotlib 等我们熟知的第三方库作为核心计算库。\nNumPy（Numeric Python）提供了许多高级的数值编程工具，如：矩阵数据类型、矢量处理，以及精密的运算库。专为进行严格的数字处理而产生。多为很多大型金融公司使用，以及核心的科学计算组织如：Lawrence Livermore，NASA用其处理一些本来使用C++，Fortran或Matlab等所做的任务。\nNumpy包括了：1、一个强大的N维数组对象Array；2、比较成熟的（广播）函数库；3、用于整合C/C++和Fortran代码的工具包；4、实用的线性代数、傅里叶变换和随机数生成函数。Numpy和稀疏矩阵运算包scipy配合使用更加方便。\n\n### 四、实验内容\n\n#### 1. 数组的创建（创建全0数组，全1数组，随机数数组）\n\n```js \nimport numpy as np\n\na = np.ones(5, int)\n\nb = np.zeros(5, int)\n\nf = np.random.randint(0, 10, 6)\nprint(\"全1数组：\\n\", a)\n\nprint(\"全0数组:\\n\", b)\n\nprint(\"随机数数组:\\n\", f)\n```\n\n![image.png](../images/39083d12-6736-4043-bbbe-8f2e9a858ffb.png)\n\n#### 2. 数组的属性（查看数组的维度，数组元素的个数）\n\n```js \nimport numpy as np\n\na = np.ones(5, int)\n\nprint(\"全1数组维度：\\n\", a.ndim)\n\nprint(\"全1数组元素个数：\\n\", a.shape)\n```\n\n![image.png](../images/804a573c-9673-4cfc-85f0-16bdd075fb84.png)\n\n#### 3. 数组的维度操作（将数组的行变列，返回最后一个元素，返回第2到第4个元素，返回逆序的数组）\n\n```js \nimport numpy as np\n\nc = np.arange(9).reshape(3, 3)\nprint(\"转置前：\\n\", c)\nd = c.T\nprint(\"转置后：\\n\", d)\n\ne = np.arange(10)\nprint(\"数组为：\\n\", e)\nprint(\"最后一个元素为：\\n\", e[-1])\nprint(\"第2到第4元素为：\\n\", e[1:4])\nprint(\"逆序数组为：\\n\", e[::-1])\n```\n\n![image.png](../images/c305a0fc-95de-49da-8323-4848537aaa7c.png)\n\n#### 4. 数组的合并（数组的水平合并，垂直合并，深度合并）\n\n```js \nimport numpy as np\n\nc = np.arange(-9, 0).reshape(3, 3)\nd = np.arange(0, 9).reshape(3, 3)\nprint(\"第一个数组为：\\n\", c)\nprint(\"第二个数组为：\\n\", d)\n\nprint(\"水平合并：\\n\", np.hstack((c, d)))\nprint(\"垂直合并：\\n\", np.hstack((c, d)))\nprint(\"深度合并：\\n\", np.hstack((c, d)))\n```\n\n![image.png](../images/4a236cbd-4c66-4bf6-ac38-2664a1027261.png)\n\n#### 5. 数组的拆分（数组的水平拆分，垂直拆分，深度拆分）\n\n```js \nimport numpy as np\n\nc = np.arange(-9, 0).reshape(3, 3)\nprint(\"数组为：\\n\", c)\n\nprint(\"水平拆分为：\\n\", np.hsplit(c, 3))\nprint(\"垂直拆分为：\\n\", np.vsplit(c, 3))\n\nd = np.arange(8).reshape(2, 2, 2)\nprint(\"待深度拆分数组为：\\n\", d)\nprint(\"深度拆分为：\\n\", np.dsplit(d, 2))\n```\n\n![image.png](../images/af2ece3b-1895-4bd7-8fd7-f0372f66111a.png)\n![image.png](../images/b2d52458-0e15-4e7d-9480-1800755cb85d.png)\n![image.png](../images/f5202819-abe1-400d-a6f2-dcf0a3fcc9f4.png)\n\n#### 6. 数组运算（与常的四则运算，与数组的四则运算，判断数组是否相等）\n\n```js \nimport numpy as np\n\na = np.arange(4)\nb = np.arange(4, 8)\nprint(\"两个数组分别为：\\n\", a, b)\nprint(\"a+2为：\\n\", a + 2)\nprint(\"a+b为：\\n\", a+b)\nprint(\"a-b为：\\n\", a-b)\nprint(\"a*b为：\\n\", a*b)\nprint(\"a/b为：\\n\", a/b)\n```\n\n![image.png](../images/e78eea16-0e8b-474d-95c7-327e0e2e806d.png)\n\n#### 7. 数组的常用函数（数组所有元素的和、积、平均值、最大值、最小值、元素替换、方差、标准差）\n\n```js \nimport numpy as np\n\na = np.arange(7)\nprint(\"数组为：\", a)\nprint(\"数组所有元素的和为：\", a.sum())\nprint(\"数组所有元素的积为：\", a.prod())\nprint(\"数组所有元素的平均值为：\", a.mean())\nprint(\"数组所有元素的最大值为：\", a.max())\nprint(\"数组所有元素的最小值为：\", a.min())\nprint(\"数组所有元素的元素小于3的元素替换为3，大于4的元素替换为4：\", a.clip(2, 5))\nprint(\"数组所有元素的方差为：\", a.var())\nprint(\"数组所有元素的标准差为：\", a.std())\n```\n\n![image.png](../images/8b115823-a4ed-416e-95f2-5fffad4d6649.png)\n\n### 五、实验总结（写出本次实验的收获，遇到的问题等）\n\n学习到了numpy库中的一些函数的使用方法。受益良多，感觉到python库的强大之处，日后一定多加练习，以求对python的常用库的使用更加熟练。","slug":"数据处理之Numpy-入门篇","published":1,"updated":"2024-03-15T11:52:50.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clttq59c2002tzwvee80wesh3","content":"<h2 id=\"实验一、数据处理之Numpy\"><a href=\"#实验一、数据处理之Numpy\" class=\"headerlink\" title=\"实验一、数据处理之Numpy\"></a>实验一、数据处理之Numpy</h2><h3 id=\"一、实验目的\"><a href=\"#一、实验目的\" class=\"headerlink\" title=\"一、实验目的\"></a>一、实验目的</h3><h4 id=\"1-了解numpy库的基本功能\"><a href=\"#1-了解numpy库的基本功能\" class=\"headerlink\" title=\"1. 了解numpy库的基本功能\"></a>1. 了解numpy库的基本功能</h4><h4 id=\"2-掌握Numpy库的对数组的操作与运算\"><a href=\"#2-掌握Numpy库的对数组的操作与运算\" class=\"headerlink\" title=\"2. 掌握Numpy库的对数组的操作与运算\"></a>2. 掌握Numpy库的对数组的操作与运算</h4><h3 id=\"二、实验工具：\"><a href=\"#二、实验工具：\" class=\"headerlink\" title=\"二、实验工具：\"></a>二、实验工具：</h3><h4 id=\"1-Anaconda\"><a href=\"#1-Anaconda\" class=\"headerlink\" title=\"1. Anaconda\"></a>1. Anaconda</h4><h4 id=\"2-Numpy\"><a href=\"#2-Numpy\" class=\"headerlink\" title=\"2. Numpy\"></a>2. Numpy</h4><h3 id=\"三、Numpy简介\"><a href=\"#三、Numpy简介\" class=\"headerlink\" title=\"三、Numpy简介\"></a>三、Numpy简介</h3><p>Numpy 的英文全称为 Numerical Python，指Python 面向数值计算的第三方库。Numpy 的特点在于，针对 Python 内建的数组类型做了扩充，支持更高维度的数组和矩阵运算，以及更丰富的数学函数。Numpy 是 Scipy.org 中最重要的库之一，它同时也被 Pandas，Matplotlib 等我们熟知的第三方库作为核心计算库。<br>NumPy（Numeric Python）提供了许多高级的数值编程工具，如：矩阵数据类型、矢量处理，以及精密的运算库。专为进行严格的数字处理而产生。多为很多大型金融公司使用，以及核心的科学计算组织如：Lawrence Livermore，NASA用其处理一些本来使用C++，Fortran或Matlab等所做的任务。<br>Numpy包括了：1、一个强大的N维数组对象Array；2、比较成熟的（广播）函数库；3、用于整合C&#x2F;C++和Fortran代码的工具包；4、实用的线性代数、傅里叶变换和随机数生成函数。Numpy和稀疏矩阵运算包scipy配合使用更加方便。</p>\n<h3 id=\"四、实验内容\"><a href=\"#四、实验内容\" class=\"headerlink\" title=\"四、实验内容\"></a>四、实验内容</h3><h4 id=\"1-数组的创建（创建全0数组，全1数组，随机数数组）\"><a href=\"#1-数组的创建（创建全0数组，全1数组，随机数数组）\" class=\"headerlink\" title=\"1. 数组的创建（创建全0数组，全1数组，随机数数组）\"></a>1. 数组的创建（创建全0数组，全1数组，随机数数组）</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><br>a = np.<span class=\"hljs-title function_\">ones</span>(<span class=\"hljs-number\">5</span>, int)<br><br>b = np.<span class=\"hljs-title function_\">zeros</span>(<span class=\"hljs-number\">5</span>, int)<br><br>f = np.<span class=\"hljs-property\">random</span>.<span class=\"hljs-title function_\">randint</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">6</span>)<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;全1数组：\\n&quot;</span>, a)<br><br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;全0数组:\\n&quot;</span>, b)<br><br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;随机数数组:\\n&quot;</span>, f)<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/39083d12-6736-4043-bbbe-8f2e9a858ffb.png\" alt=\"image.png\"></p>\n<h4 id=\"2-数组的属性（查看数组的维度，数组元素的个数）\"><a href=\"#2-数组的属性（查看数组的维度，数组元素的个数）\" class=\"headerlink\" title=\"2. 数组的属性（查看数组的维度，数组元素的个数）\"></a>2. 数组的属性（查看数组的维度，数组元素的个数）</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><br>a = np.<span class=\"hljs-title function_\">ones</span>(<span class=\"hljs-number\">5</span>, int)<br><br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;全1数组维度：\\n&quot;</span>, a.<span class=\"hljs-property\">ndim</span>)<br><br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;全1数组元素个数：\\n&quot;</span>, a.<span class=\"hljs-property\">shape</span>)<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/804a573c-9673-4cfc-85f0-16bdd075fb84.png\" alt=\"image.png\"></p>\n<h4 id=\"3-数组的维度操作（将数组的行变列，返回最后一个元素，返回第2到第4个元素，返回逆序的数组）\"><a href=\"#3-数组的维度操作（将数组的行变列，返回最后一个元素，返回第2到第4个元素，返回逆序的数组）\" class=\"headerlink\" title=\"3. 数组的维度操作（将数组的行变列，返回最后一个元素，返回第2到第4个元素，返回逆序的数组）\"></a>3. 数组的维度操作（将数组的行变列，返回最后一个元素，返回第2到第4个元素，返回逆序的数组）</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><br>c = np.<span class=\"hljs-title function_\">arange</span>(<span class=\"hljs-number\">9</span>).<span class=\"hljs-title function_\">reshape</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>)<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;转置前：\\n&quot;</span>, c)<br>d = c.<span class=\"hljs-property\">T</span><br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;转置后：\\n&quot;</span>, d)<br><br>e = np.<span class=\"hljs-title function_\">arange</span>(<span class=\"hljs-number\">10</span>)<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;数组为：\\n&quot;</span>, e)<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;最后一个元素为：\\n&quot;</span>, e[-<span class=\"hljs-number\">1</span>])<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;第2到第4元素为：\\n&quot;</span>, e[<span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">4</span>])<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;逆序数组为：\\n&quot;</span>, e[::-<span class=\"hljs-number\">1</span>])<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/c305a0fc-95de-49da-8323-4848537aaa7c.png\" alt=\"image.png\"></p>\n<h4 id=\"4-数组的合并（数组的水平合并，垂直合并，深度合并）\"><a href=\"#4-数组的合并（数组的水平合并，垂直合并，深度合并）\" class=\"headerlink\" title=\"4. 数组的合并（数组的水平合并，垂直合并，深度合并）\"></a>4. 数组的合并（数组的水平合并，垂直合并，深度合并）</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><br>c = np.<span class=\"hljs-title function_\">arange</span>(-<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">0</span>).<span class=\"hljs-title function_\">reshape</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>)<br>d = np.<span class=\"hljs-title function_\">arange</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">9</span>).<span class=\"hljs-title function_\">reshape</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>)<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;第一个数组为：\\n&quot;</span>, c)<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;第二个数组为：\\n&quot;</span>, d)<br><br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;水平合并：\\n&quot;</span>, np.<span class=\"hljs-title function_\">hstack</span>((c, d)))<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;垂直合并：\\n&quot;</span>, np.<span class=\"hljs-title function_\">hstack</span>((c, d)))<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;深度合并：\\n&quot;</span>, np.<span class=\"hljs-title function_\">hstack</span>((c, d)))<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/4a236cbd-4c66-4bf6-ac38-2664a1027261.png\" alt=\"image.png\"></p>\n<h4 id=\"5-数组的拆分（数组的水平拆分，垂直拆分，深度拆分）\"><a href=\"#5-数组的拆分（数组的水平拆分，垂直拆分，深度拆分）\" class=\"headerlink\" title=\"5. 数组的拆分（数组的水平拆分，垂直拆分，深度拆分）\"></a>5. 数组的拆分（数组的水平拆分，垂直拆分，深度拆分）</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><br>c = np.<span class=\"hljs-title function_\">arange</span>(-<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">0</span>).<span class=\"hljs-title function_\">reshape</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>)<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;数组为：\\n&quot;</span>, c)<br><br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;水平拆分为：\\n&quot;</span>, np.<span class=\"hljs-title function_\">hsplit</span>(c, <span class=\"hljs-number\">3</span>))<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;垂直拆分为：\\n&quot;</span>, np.<span class=\"hljs-title function_\">vsplit</span>(c, <span class=\"hljs-number\">3</span>))<br><br>d = np.<span class=\"hljs-title function_\">arange</span>(<span class=\"hljs-number\">8</span>).<span class=\"hljs-title function_\">reshape</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>)<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;待深度拆分数组为：\\n&quot;</span>, d)<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;深度拆分为：\\n&quot;</span>, np.<span class=\"hljs-title function_\">dsplit</span>(d, <span class=\"hljs-number\">2</span>))<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/af2ece3b-1895-4bd7-8fd7-f0372f66111a.png\" alt=\"image.png\"><br><img src=\"/../images/b2d52458-0e15-4e7d-9480-1800755cb85d.png\" alt=\"image.png\"><br><img src=\"/../images/f5202819-abe1-400d-a6f2-dcf0a3fcc9f4.png\" alt=\"image.png\"></p>\n<h4 id=\"6-数组运算（与常的四则运算，与数组的四则运算，判断数组是否相等）\"><a href=\"#6-数组运算（与常的四则运算，与数组的四则运算，判断数组是否相等）\" class=\"headerlink\" title=\"6. 数组运算（与常的四则运算，与数组的四则运算，判断数组是否相等）\"></a>6. 数组运算（与常的四则运算，与数组的四则运算，判断数组是否相等）</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><br>a = np.<span class=\"hljs-title function_\">arange</span>(<span class=\"hljs-number\">4</span>)<br>b = np.<span class=\"hljs-title function_\">arange</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>)<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;两个数组分别为：\\n&quot;</span>, a, b)<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;a+2为：\\n&quot;</span>, a + <span class=\"hljs-number\">2</span>)<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;a+b为：\\n&quot;</span>, a+b)<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;a-b为：\\n&quot;</span>, a-b)<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;a*b为：\\n&quot;</span>, a*b)<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;a/b为：\\n&quot;</span>, a/b)<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/e78eea16-0e8b-474d-95c7-327e0e2e806d.png\" alt=\"image.png\"></p>\n<h4 id=\"7-数组的常用函数（数组所有元素的和、积、平均值、最大值、最小值、元素替换、方差、标准差）\"><a href=\"#7-数组的常用函数（数组所有元素的和、积、平均值、最大值、最小值、元素替换、方差、标准差）\" class=\"headerlink\" title=\"7. 数组的常用函数（数组所有元素的和、积、平均值、最大值、最小值、元素替换、方差、标准差）\"></a>7. 数组的常用函数（数组所有元素的和、积、平均值、最大值、最小值、元素替换、方差、标准差）</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><br>a = np.<span class=\"hljs-title function_\">arange</span>(<span class=\"hljs-number\">7</span>)<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;数组为：&quot;</span>, a)<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;数组所有元素的和为：&quot;</span>, a.<span class=\"hljs-title function_\">sum</span>())<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;数组所有元素的积为：&quot;</span>, a.<span class=\"hljs-title function_\">prod</span>())<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;数组所有元素的平均值为：&quot;</span>, a.<span class=\"hljs-title function_\">mean</span>())<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;数组所有元素的最大值为：&quot;</span>, a.<span class=\"hljs-title function_\">max</span>())<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;数组所有元素的最小值为：&quot;</span>, a.<span class=\"hljs-title function_\">min</span>())<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;数组所有元素的元素小于3的元素替换为3，大于4的元素替换为4：&quot;</span>, a.<span class=\"hljs-title function_\">clip</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>))<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;数组所有元素的方差为：&quot;</span>, a.<span class=\"hljs-title function_\">var</span>())<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;数组所有元素的标准差为：&quot;</span>, a.<span class=\"hljs-title function_\">std</span>())<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/8b115823-a4ed-416e-95f2-5fffad4d6649.png\" alt=\"image.png\"></p>\n<h3 id=\"五、实验总结（写出本次实验的收获，遇到的问题等）\"><a href=\"#五、实验总结（写出本次实验的收获，遇到的问题等）\" class=\"headerlink\" title=\"五、实验总结（写出本次实验的收获，遇到的问题等）\"></a>五、实验总结（写出本次实验的收获，遇到的问题等）</h3><p>学习到了numpy库中的一些函数的使用方法。受益良多，感觉到python库的强大之处，日后一定多加练习，以求对python的常用库的使用更加熟练。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"实验一、数据处理之Numpy\"><a href=\"#实验一、数据处理之Numpy\" class=\"headerlink\" title=\"实验一、数据处理之Numpy\"></a>实验一、数据处理之Numpy</h2><h3 id=\"一、实验目的\"><a href=\"#一、实验目的\" class=\"headerlink\" title=\"一、实验目的\"></a>一、实验目的</h3><h4 id=\"1-了解numpy库的基本功能\"><a href=\"#1-了解numpy库的基本功能\" class=\"headerlink\" title=\"1. 了解numpy库的基本功能\"></a>1. 了解numpy库的基本功能</h4><h4 id=\"2-掌握Numpy库的对数组的操作与运算\"><a href=\"#2-掌握Numpy库的对数组的操作与运算\" class=\"headerlink\" title=\"2. 掌握Numpy库的对数组的操作与运算\"></a>2. 掌握Numpy库的对数组的操作与运算</h4><h3 id=\"二、实验工具：\"><a href=\"#二、实验工具：\" class=\"headerlink\" title=\"二、实验工具：\"></a>二、实验工具：</h3><h4 id=\"1-Anaconda\"><a href=\"#1-Anaconda\" class=\"headerlink\" title=\"1. Anaconda\"></a>1. Anaconda</h4><h4 id=\"2-Numpy\"><a href=\"#2-Numpy\" class=\"headerlink\" title=\"2. Numpy\"></a>2. Numpy</h4><h3 id=\"三、Numpy简介\"><a href=\"#三、Numpy简介\" class=\"headerlink\" title=\"三、Numpy简介\"></a>三、Numpy简介</h3><p>Numpy 的英文全称为 Numerical Python，指Python 面向数值计算的第三方库。Numpy 的特点在于，针对 Python 内建的数组类型做了扩充，支持更高维度的数组和矩阵运算，以及更丰富的数学函数。Numpy 是 Scipy.org 中最重要的库之一，它同时也被 Pandas，Matplotlib 等我们熟知的第三方库作为核心计算库。<br>NumPy（Numeric Python）提供了许多高级的数值编程工具，如：矩阵数据类型、矢量处理，以及精密的运算库。专为进行严格的数字处理而产生。多为很多大型金融公司使用，以及核心的科学计算组织如：Lawrence Livermore，NASA用其处理一些本来使用C++，Fortran或Matlab等所做的任务。<br>Numpy包括了：1、一个强大的N维数组对象Array；2、比较成熟的（广播）函数库；3、用于整合C&#x2F;C++和Fortran代码的工具包；4、实用的线性代数、傅里叶变换和随机数生成函数。Numpy和稀疏矩阵运算包scipy配合使用更加方便。</p>\n<h3 id=\"四、实验内容\"><a href=\"#四、实验内容\" class=\"headerlink\" title=\"四、实验内容\"></a>四、实验内容</h3><h4 id=\"1-数组的创建（创建全0数组，全1数组，随机数数组）\"><a href=\"#1-数组的创建（创建全0数组，全1数组，随机数数组）\" class=\"headerlink\" title=\"1. 数组的创建（创建全0数组，全1数组，随机数数组）\"></a>1. 数组的创建（创建全0数组，全1数组，随机数数组）</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><br>a = np.<span class=\"hljs-title function_\">ones</span>(<span class=\"hljs-number\">5</span>, int)<br><br>b = np.<span class=\"hljs-title function_\">zeros</span>(<span class=\"hljs-number\">5</span>, int)<br><br>f = np.<span class=\"hljs-property\">random</span>.<span class=\"hljs-title function_\">randint</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">6</span>)<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;全1数组：\\n&quot;</span>, a)<br><br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;全0数组:\\n&quot;</span>, b)<br><br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;随机数数组:\\n&quot;</span>, f)<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/39083d12-6736-4043-bbbe-8f2e9a858ffb.png\" alt=\"image.png\"></p>\n<h4 id=\"2-数组的属性（查看数组的维度，数组元素的个数）\"><a href=\"#2-数组的属性（查看数组的维度，数组元素的个数）\" class=\"headerlink\" title=\"2. 数组的属性（查看数组的维度，数组元素的个数）\"></a>2. 数组的属性（查看数组的维度，数组元素的个数）</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><br>a = np.<span class=\"hljs-title function_\">ones</span>(<span class=\"hljs-number\">5</span>, int)<br><br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;全1数组维度：\\n&quot;</span>, a.<span class=\"hljs-property\">ndim</span>)<br><br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;全1数组元素个数：\\n&quot;</span>, a.<span class=\"hljs-property\">shape</span>)<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/804a573c-9673-4cfc-85f0-16bdd075fb84.png\" alt=\"image.png\"></p>\n<h4 id=\"3-数组的维度操作（将数组的行变列，返回最后一个元素，返回第2到第4个元素，返回逆序的数组）\"><a href=\"#3-数组的维度操作（将数组的行变列，返回最后一个元素，返回第2到第4个元素，返回逆序的数组）\" class=\"headerlink\" title=\"3. 数组的维度操作（将数组的行变列，返回最后一个元素，返回第2到第4个元素，返回逆序的数组）\"></a>3. 数组的维度操作（将数组的行变列，返回最后一个元素，返回第2到第4个元素，返回逆序的数组）</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><br>c = np.<span class=\"hljs-title function_\">arange</span>(<span class=\"hljs-number\">9</span>).<span class=\"hljs-title function_\">reshape</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>)<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;转置前：\\n&quot;</span>, c)<br>d = c.<span class=\"hljs-property\">T</span><br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;转置后：\\n&quot;</span>, d)<br><br>e = np.<span class=\"hljs-title function_\">arange</span>(<span class=\"hljs-number\">10</span>)<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;数组为：\\n&quot;</span>, e)<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;最后一个元素为：\\n&quot;</span>, e[-<span class=\"hljs-number\">1</span>])<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;第2到第4元素为：\\n&quot;</span>, e[<span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">4</span>])<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;逆序数组为：\\n&quot;</span>, e[::-<span class=\"hljs-number\">1</span>])<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/c305a0fc-95de-49da-8323-4848537aaa7c.png\" alt=\"image.png\"></p>\n<h4 id=\"4-数组的合并（数组的水平合并，垂直合并，深度合并）\"><a href=\"#4-数组的合并（数组的水平合并，垂直合并，深度合并）\" class=\"headerlink\" title=\"4. 数组的合并（数组的水平合并，垂直合并，深度合并）\"></a>4. 数组的合并（数组的水平合并，垂直合并，深度合并）</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><br>c = np.<span class=\"hljs-title function_\">arange</span>(-<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">0</span>).<span class=\"hljs-title function_\">reshape</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>)<br>d = np.<span class=\"hljs-title function_\">arange</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">9</span>).<span class=\"hljs-title function_\">reshape</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>)<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;第一个数组为：\\n&quot;</span>, c)<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;第二个数组为：\\n&quot;</span>, d)<br><br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;水平合并：\\n&quot;</span>, np.<span class=\"hljs-title function_\">hstack</span>((c, d)))<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;垂直合并：\\n&quot;</span>, np.<span class=\"hljs-title function_\">hstack</span>((c, d)))<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;深度合并：\\n&quot;</span>, np.<span class=\"hljs-title function_\">hstack</span>((c, d)))<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/4a236cbd-4c66-4bf6-ac38-2664a1027261.png\" alt=\"image.png\"></p>\n<h4 id=\"5-数组的拆分（数组的水平拆分，垂直拆分，深度拆分）\"><a href=\"#5-数组的拆分（数组的水平拆分，垂直拆分，深度拆分）\" class=\"headerlink\" title=\"5. 数组的拆分（数组的水平拆分，垂直拆分，深度拆分）\"></a>5. 数组的拆分（数组的水平拆分，垂直拆分，深度拆分）</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><br>c = np.<span class=\"hljs-title function_\">arange</span>(-<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">0</span>).<span class=\"hljs-title function_\">reshape</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>)<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;数组为：\\n&quot;</span>, c)<br><br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;水平拆分为：\\n&quot;</span>, np.<span class=\"hljs-title function_\">hsplit</span>(c, <span class=\"hljs-number\">3</span>))<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;垂直拆分为：\\n&quot;</span>, np.<span class=\"hljs-title function_\">vsplit</span>(c, <span class=\"hljs-number\">3</span>))<br><br>d = np.<span class=\"hljs-title function_\">arange</span>(<span class=\"hljs-number\">8</span>).<span class=\"hljs-title function_\">reshape</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>)<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;待深度拆分数组为：\\n&quot;</span>, d)<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;深度拆分为：\\n&quot;</span>, np.<span class=\"hljs-title function_\">dsplit</span>(d, <span class=\"hljs-number\">2</span>))<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/af2ece3b-1895-4bd7-8fd7-f0372f66111a.png\" alt=\"image.png\"><br><img src=\"/../images/b2d52458-0e15-4e7d-9480-1800755cb85d.png\" alt=\"image.png\"><br><img src=\"/../images/f5202819-abe1-400d-a6f2-dcf0a3fcc9f4.png\" alt=\"image.png\"></p>\n<h4 id=\"6-数组运算（与常的四则运算，与数组的四则运算，判断数组是否相等）\"><a href=\"#6-数组运算（与常的四则运算，与数组的四则运算，判断数组是否相等）\" class=\"headerlink\" title=\"6. 数组运算（与常的四则运算，与数组的四则运算，判断数组是否相等）\"></a>6. 数组运算（与常的四则运算，与数组的四则运算，判断数组是否相等）</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><br>a = np.<span class=\"hljs-title function_\">arange</span>(<span class=\"hljs-number\">4</span>)<br>b = np.<span class=\"hljs-title function_\">arange</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>)<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;两个数组分别为：\\n&quot;</span>, a, b)<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;a+2为：\\n&quot;</span>, a + <span class=\"hljs-number\">2</span>)<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;a+b为：\\n&quot;</span>, a+b)<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;a-b为：\\n&quot;</span>, a-b)<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;a*b为：\\n&quot;</span>, a*b)<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;a/b为：\\n&quot;</span>, a/b)<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/e78eea16-0e8b-474d-95c7-327e0e2e806d.png\" alt=\"image.png\"></p>\n<h4 id=\"7-数组的常用函数（数组所有元素的和、积、平均值、最大值、最小值、元素替换、方差、标准差）\"><a href=\"#7-数组的常用函数（数组所有元素的和、积、平均值、最大值、最小值、元素替换、方差、标准差）\" class=\"headerlink\" title=\"7. 数组的常用函数（数组所有元素的和、积、平均值、最大值、最小值、元素替换、方差、标准差）\"></a>7. 数组的常用函数（数组所有元素的和、积、平均值、最大值、最小值、元素替换、方差、标准差）</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><br>a = np.<span class=\"hljs-title function_\">arange</span>(<span class=\"hljs-number\">7</span>)<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;数组为：&quot;</span>, a)<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;数组所有元素的和为：&quot;</span>, a.<span class=\"hljs-title function_\">sum</span>())<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;数组所有元素的积为：&quot;</span>, a.<span class=\"hljs-title function_\">prod</span>())<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;数组所有元素的平均值为：&quot;</span>, a.<span class=\"hljs-title function_\">mean</span>())<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;数组所有元素的最大值为：&quot;</span>, a.<span class=\"hljs-title function_\">max</span>())<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;数组所有元素的最小值为：&quot;</span>, a.<span class=\"hljs-title function_\">min</span>())<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;数组所有元素的元素小于3的元素替换为3，大于4的元素替换为4：&quot;</span>, a.<span class=\"hljs-title function_\">clip</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>))<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;数组所有元素的方差为：&quot;</span>, a.<span class=\"hljs-title function_\">var</span>())<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;数组所有元素的标准差为：&quot;</span>, a.<span class=\"hljs-title function_\">std</span>())<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/8b115823-a4ed-416e-95f2-5fffad4d6649.png\" alt=\"image.png\"></p>\n<h3 id=\"五、实验总结（写出本次实验的收获，遇到的问题等）\"><a href=\"#五、实验总结（写出本次实验的收获，遇到的问题等）\" class=\"headerlink\" title=\"五、实验总结（写出本次实验的收获，遇到的问题等）\"></a>五、实验总结（写出本次实验的收获，遇到的问题等）</h3><p>学习到了numpy库中的一些函数的使用方法。受益良多，感觉到python库的强大之处，日后一定多加练习，以求对python的常用库的使用更加熟练。</p>\n"},{"title":"测试文章","date":"2024-03-16T02:29:07.000Z","_content":"","source":"_posts/测试文章.md","raw":"---\ntitle: 测试文章\ndate: 2024-03-16 10:29:07\ntags:\n---\n","slug":"测试文章","published":1,"updated":"2024-03-16T02:29:07.836Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clttq59c4002xzwve0h5n0vhj","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"矩形面积重叠---蓝桥杯训练题","author":null,"date":"2020-04-24T07:02:52.000Z","_content":"### 试题 基础练习 矩形面积交\n\n##### 题目\n\n**资源限制**\n时间限制：1.0s 内存限制：512.0MB\n\n**问题描述**\n平面上有两个矩形，它们的边平行于直角坐标系的X轴或Y轴。对于每个矩形，我们给出它的一对相对顶点的坐标，请你编程算出两个矩形的交的面积。\n**输入格式**\n输入仅包含两行，每行描述一个矩形。\n在每行中，给出矩形的一对相对顶点的坐标，每个点的坐标都用两个绝对值不超过10^7的实数表示。\n**输出格式**\n输出仅包含一个实数，为交的面积，保留到小数后两位。\n**样例输入**\n1 1 3 3\n2 2 4 4\n\n**样例输出**\n1.00\n\n##### 问题分析\n\n![在这里插入图片描述](../images/1ee5c762-5668-4222-8a84-336c47fa31d4.png)\n![在这里插入图片描述](../images/b4add3be-a4ed-4361-95ae-b8f73a7f4cae.png)\n\n经过简单的画图我们可以得知，我们需要的其实至少两个五角星位置的坐标。\n\n那么这两个五角星的位置是什么呢？\n\n其实就是两个矩形各自靠左的x坐标里面的右边的那一个，\n俩矩形各自靠右的x坐标的左边那一个。\n俩矩形各自靠上的y坐标的下面那一个，\n俩矩形各自靠下的y坐标的上面那一个。\n\n##### Java代码\n\n```js \nimport java.util.Scanner;\n\npublic class Main {\n    \n\tpublic static void main(String[] args) {\n    \n\t\t\n\t\tScanner scanner = new Scanner(System.in);\n\t\tdouble x1 = scanner.nextDouble();\n\t\tdouble y1 = scanner.nextDouble();\n\t\tdouble x2 = scanner.nextDouble();\n\t\tdouble y2 = scanner.nextDouble();\n\t\tdouble x3 = scanner.nextDouble();\n\t\tdouble y3 = scanner.nextDouble();\n\t\tdouble x4 = scanner.nextDouble();\n\t\tdouble y4 = scanner.nextDouble();\n\t\t\n\t\tdouble a1 = Math.max(Math.min(x1, x2), Math.min(x3, x4));\n\t\tdouble b1 = Math.max(Math.min(y1, y2), Math.min(y3, y4));\n\t\tdouble a2 = Math.min(Math.max(x1, x2), Math.max(x3, x4));\n\t\tdouble b2 = Math.min(Math.max(y1, y2), Math.max(y3, y4));\n\t\t\n\t\tif((a1 < a2) && (b1 < b2)) {\n    \n\t\t\tSystem.out.printf(\"%.2f\",(b2-b1)*(a2-a1));\n\t\t}else {\n    \n\t\t\tSystem.out.println(\"0.00\");\n\t\t}\n\t}\n\n}\n```","source":"_posts/矩形面积重叠---蓝桥杯训练题.md","raw":"---\ntitle: 矩形面积重叠---蓝桥杯训练题\nauthor: \ntags: \n       - java\n\ncategory: \n       - 算法\n\ndate: 2020-04-24 15:02:52\n---\n### 试题 基础练习 矩形面积交\n\n##### 题目\n\n**资源限制**\n时间限制：1.0s 内存限制：512.0MB\n\n**问题描述**\n平面上有两个矩形，它们的边平行于直角坐标系的X轴或Y轴。对于每个矩形，我们给出它的一对相对顶点的坐标，请你编程算出两个矩形的交的面积。\n**输入格式**\n输入仅包含两行，每行描述一个矩形。\n在每行中，给出矩形的一对相对顶点的坐标，每个点的坐标都用两个绝对值不超过10^7的实数表示。\n**输出格式**\n输出仅包含一个实数，为交的面积，保留到小数后两位。\n**样例输入**\n1 1 3 3\n2 2 4 4\n\n**样例输出**\n1.00\n\n##### 问题分析\n\n![在这里插入图片描述](../images/1ee5c762-5668-4222-8a84-336c47fa31d4.png)\n![在这里插入图片描述](../images/b4add3be-a4ed-4361-95ae-b8f73a7f4cae.png)\n\n经过简单的画图我们可以得知，我们需要的其实至少两个五角星位置的坐标。\n\n那么这两个五角星的位置是什么呢？\n\n其实就是两个矩形各自靠左的x坐标里面的右边的那一个，\n俩矩形各自靠右的x坐标的左边那一个。\n俩矩形各自靠上的y坐标的下面那一个，\n俩矩形各自靠下的y坐标的上面那一个。\n\n##### Java代码\n\n```js \nimport java.util.Scanner;\n\npublic class Main {\n    \n\tpublic static void main(String[] args) {\n    \n\t\t\n\t\tScanner scanner = new Scanner(System.in);\n\t\tdouble x1 = scanner.nextDouble();\n\t\tdouble y1 = scanner.nextDouble();\n\t\tdouble x2 = scanner.nextDouble();\n\t\tdouble y2 = scanner.nextDouble();\n\t\tdouble x3 = scanner.nextDouble();\n\t\tdouble y3 = scanner.nextDouble();\n\t\tdouble x4 = scanner.nextDouble();\n\t\tdouble y4 = scanner.nextDouble();\n\t\t\n\t\tdouble a1 = Math.max(Math.min(x1, x2), Math.min(x3, x4));\n\t\tdouble b1 = Math.max(Math.min(y1, y2), Math.min(y3, y4));\n\t\tdouble a2 = Math.min(Math.max(x1, x2), Math.max(x3, x4));\n\t\tdouble b2 = Math.min(Math.max(y1, y2), Math.max(y3, y4));\n\t\t\n\t\tif((a1 < a2) && (b1 < b2)) {\n    \n\t\t\tSystem.out.printf(\"%.2f\",(b2-b1)*(a2-a1));\n\t\t}else {\n    \n\t\t\tSystem.out.println(\"0.00\");\n\t\t}\n\t}\n\n}\n```","slug":"矩形面积重叠---蓝桥杯训练题","published":1,"updated":"2024-03-15T08:23:59.866Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clttq59c50031zwvef1m34svo","content":"<h3 id=\"试题-基础练习-矩形面积交\"><a href=\"#试题-基础练习-矩形面积交\" class=\"headerlink\" title=\"试题 基础练习 矩形面积交\"></a>试题 基础练习 矩形面积交</h3><h5 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h5><p><strong>资源限制</strong><br>时间限制：1.0s 内存限制：512.0MB</p>\n<p><strong>问题描述</strong><br>平面上有两个矩形，它们的边平行于直角坐标系的X轴或Y轴。对于每个矩形，我们给出它的一对相对顶点的坐标，请你编程算出两个矩形的交的面积。<br><strong>输入格式</strong><br>输入仅包含两行，每行描述一个矩形。<br>在每行中，给出矩形的一对相对顶点的坐标，每个点的坐标都用两个绝对值不超过10^7的实数表示。<br><strong>输出格式</strong><br>输出仅包含一个实数，为交的面积，保留到小数后两位。<br><strong>样例输入</strong><br>1 1 3 3<br>2 2 4 4</p>\n<p><strong>样例输出</strong><br>1.00</p>\n<h5 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h5><p><img src=\"/../images/1ee5c762-5668-4222-8a84-336c47fa31d4.png\" alt=\"在这里插入图片描述\"><br><img src=\"/../images/b4add3be-a4ed-4361-95ae-b8f73a7f4cae.png\" alt=\"在这里插入图片描述\"></p>\n<p>经过简单的画图我们可以得知，我们需要的其实至少两个五角星位置的坐标。</p>\n<p>那么这两个五角星的位置是什么呢？</p>\n<p>其实就是两个矩形各自靠左的x坐标里面的右边的那一个，<br>俩矩形各自靠右的x坐标的左边那一个。<br>俩矩形各自靠上的y坐标的下面那一个，<br>俩矩形各自靠下的y坐标的上面那一个。</p>\n<h5 id=\"Java代码\"><a href=\"#Java代码\" class=\"headerlink\" title=\"Java代码\"></a>Java代码</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">util</span>.<span class=\"hljs-property\">Scanner</span>;<br><br>public <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Main</span> &#123;<br>    <br>\tpublic <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span>[] args</span>) &#123;<br>    <br>\t\t<br>\t\t<span class=\"hljs-title class_\">Scanner</span> scanner = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">in</span>);<br>\t\tdouble x1 = scanner.<span class=\"hljs-title function_\">nextDouble</span>();<br>\t\tdouble y1 = scanner.<span class=\"hljs-title function_\">nextDouble</span>();<br>\t\tdouble x2 = scanner.<span class=\"hljs-title function_\">nextDouble</span>();<br>\t\tdouble y2 = scanner.<span class=\"hljs-title function_\">nextDouble</span>();<br>\t\tdouble x3 = scanner.<span class=\"hljs-title function_\">nextDouble</span>();<br>\t\tdouble y3 = scanner.<span class=\"hljs-title function_\">nextDouble</span>();<br>\t\tdouble x4 = scanner.<span class=\"hljs-title function_\">nextDouble</span>();<br>\t\tdouble y4 = scanner.<span class=\"hljs-title function_\">nextDouble</span>();<br>\t\t<br>\t\tdouble a1 = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">min</span>(x1, x2), <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">min</span>(x3, x4));<br>\t\tdouble b1 = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">min</span>(y1, y2), <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">min</span>(y3, y4));<br>\t\tdouble a2 = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">min</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(x1, x2), <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(x3, x4));<br>\t\tdouble b2 = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">min</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(y1, y2), <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(y3, y4));<br>\t\t<br>\t\t<span class=\"hljs-keyword\">if</span>((a1 &lt; a2) &amp;&amp; (b1 &lt; b2)) &#123;<br>    <br>\t\t\t<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">&quot;%.2f&quot;</span>,(b2-b1)*(a2-a1));<br>\t\t&#125;<span class=\"hljs-keyword\">else</span> &#123;<br>    <br>\t\t\t<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">&quot;0.00&quot;</span>);<br>\t\t&#125;<br>\t&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"试题-基础练习-矩形面积交\"><a href=\"#试题-基础练习-矩形面积交\" class=\"headerlink\" title=\"试题 基础练习 矩形面积交\"></a>试题 基础练习 矩形面积交</h3><h5 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h5><p><strong>资源限制</strong><br>时间限制：1.0s 内存限制：512.0MB</p>\n<p><strong>问题描述</strong><br>平面上有两个矩形，它们的边平行于直角坐标系的X轴或Y轴。对于每个矩形，我们给出它的一对相对顶点的坐标，请你编程算出两个矩形的交的面积。<br><strong>输入格式</strong><br>输入仅包含两行，每行描述一个矩形。<br>在每行中，给出矩形的一对相对顶点的坐标，每个点的坐标都用两个绝对值不超过10^7的实数表示。<br><strong>输出格式</strong><br>输出仅包含一个实数，为交的面积，保留到小数后两位。<br><strong>样例输入</strong><br>1 1 3 3<br>2 2 4 4</p>\n<p><strong>样例输出</strong><br>1.00</p>\n<h5 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h5><p><img src=\"/../images/1ee5c762-5668-4222-8a84-336c47fa31d4.png\" alt=\"在这里插入图片描述\"><br><img src=\"/../images/b4add3be-a4ed-4361-95ae-b8f73a7f4cae.png\" alt=\"在这里插入图片描述\"></p>\n<p>经过简单的画图我们可以得知，我们需要的其实至少两个五角星位置的坐标。</p>\n<p>那么这两个五角星的位置是什么呢？</p>\n<p>其实就是两个矩形各自靠左的x坐标里面的右边的那一个，<br>俩矩形各自靠右的x坐标的左边那一个。<br>俩矩形各自靠上的y坐标的下面那一个，<br>俩矩形各自靠下的y坐标的上面那一个。</p>\n<h5 id=\"Java代码\"><a href=\"#Java代码\" class=\"headerlink\" title=\"Java代码\"></a>Java代码</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">util</span>.<span class=\"hljs-property\">Scanner</span>;<br><br>public <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Main</span> &#123;<br>    <br>\tpublic <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span>[] args</span>) &#123;<br>    <br>\t\t<br>\t\t<span class=\"hljs-title class_\">Scanner</span> scanner = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">in</span>);<br>\t\tdouble x1 = scanner.<span class=\"hljs-title function_\">nextDouble</span>();<br>\t\tdouble y1 = scanner.<span class=\"hljs-title function_\">nextDouble</span>();<br>\t\tdouble x2 = scanner.<span class=\"hljs-title function_\">nextDouble</span>();<br>\t\tdouble y2 = scanner.<span class=\"hljs-title function_\">nextDouble</span>();<br>\t\tdouble x3 = scanner.<span class=\"hljs-title function_\">nextDouble</span>();<br>\t\tdouble y3 = scanner.<span class=\"hljs-title function_\">nextDouble</span>();<br>\t\tdouble x4 = scanner.<span class=\"hljs-title function_\">nextDouble</span>();<br>\t\tdouble y4 = scanner.<span class=\"hljs-title function_\">nextDouble</span>();<br>\t\t<br>\t\tdouble a1 = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">min</span>(x1, x2), <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">min</span>(x3, x4));<br>\t\tdouble b1 = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">min</span>(y1, y2), <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">min</span>(y3, y4));<br>\t\tdouble a2 = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">min</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(x1, x2), <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(x3, x4));<br>\t\tdouble b2 = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">min</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(y1, y2), <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(y3, y4));<br>\t\t<br>\t\t<span class=\"hljs-keyword\">if</span>((a1 &lt; a2) &amp;&amp; (b1 &lt; b2)) &#123;<br>    <br>\t\t\t<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">&quot;%.2f&quot;</span>,(b2-b1)*(a2-a1));<br>\t\t&#125;<span class=\"hljs-keyword\">else</span> &#123;<br>    <br>\t\t\t<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">&quot;0.00&quot;</span>);<br>\t\t&#125;<br>\t&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"矩阵的幂运算--蓝桥杯","author":null,"date":"2020-04-24T07:41:33.000Z","_content":"### 试题 基础练习 矩阵乘法\n\n##### 题目\n\n**资源限制**\n时间限制：1.0s 内存限制：512.0MB\n**问题描述**\n给定一个N阶矩阵A，输出A的M次幂（M是非负整数）\n例如：\nA =\n1 2\n3 4\nA的2次幂\n7 10\n15 22\n**输入格式**\n第一行是一个正整数N、M（1<=N<=30, 0<=M<=5），表示矩阵A的阶数和要求的幂数\n接下来N行，每行N个绝对值不超过10的非负整数，描述矩阵A的值\n**输出格式**\n输出共N行，每行N个整数，表示A的M次幂所对应的矩阵。相邻的数之间用一个空格隔开\n**样例输入**\n2 2\n1 2\n3 4\n**样例输出**\n7 10\n15 22\n\n##### 问题分析\n\n这里我们需要注意，矩阵的幂可能为0，也就是说，我们需要考虑到输出01对角矩阵的情况。\n\n##### 解题思路\n\n-》建立三个矩阵的二维数组，\n-》如果幂为0，打印01对角矩阵\n-》否则\n-》》》循环\n-》》》》》第一，二个矩阵相乘得第三个矩阵，而后将第三个矩阵赋值给第二个矩阵\n-》》》打印输出第二个矩阵\n\n### Java实现代码\n\n```js \nimport java.util.Scanner;\n\npublic class Main {\n    \n\tpublic static void main(String[] args) {\n    \n\t\tScanner scanner = new Scanner(System.in);\n\t\tint n = scanner.nextInt();\n\t\tint m = scanner.nextInt();\n\t\tint[][] arr1 = new int[n][n];\n\t\tint[][] arr2 = new int[n][n];\n\t\tint[][] arr3 = new int[n][n];\n\t\tfor (int i = 0; i < n; i++) {\n    \n\t\t\tfor (int j = 0; j < n; j++) {\n    \n\t\t\t\tarr1[i][j] = scanner.nextInt();\n\t\t\t\tarr2[i][j] = arr1[i][j];\n\t\t\t}\n\t\t}\n\t\tscanner.close();\n\t\t\n\t\tif(m == 0) {\n    \n\t\t\tfor (int i = 0; i < n; i++) {\n    \n\t\t\t\tfor (int j = 0; j < n; j++) {\n    \n\t\t\t\t\tif( i == j ) {\n    \n\t\t\t\t\t\tSystem.out.print(\"1 \");\n\t\t\t\t\t}\n\t\t\t\t\telse {\n    \n\t\t\t\t\t\tSystem.out.print(\"0 \");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tfor (int h = 1; h < m; h++) {\n    \n\t\t\tfor (int i = 0; i < n; i++) {\n    \n\t\t\t\tfor (int j = 0; j < n; j++) {\n    \n\t\t\t\t\tarr3[i][j] = 0;\n\t\t\t\t\tfor (int k = 0,t=0; k < n && t<n; k++,t++) {\n    \n\t\t\t\t\t\tarr3[i][j] += arr1[i][t] * arr2[k][j];  \n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int i = 0; i < n; i++) {\n    \n\t\t\t\tfor (int j = 0; j < n; j++) {\n    \n\t\t\t\t\tarr2[i][j] = arr3[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t} \n\t\tfor (int i = 0; i < n; i++) {\n    \n\t\t\tfor (int j = 0; j < n; j++) {\n    \n\t\t\t\tSystem.out.print(arr2[i][j] + \" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\t\n\t}\n}\n```","source":"_posts/矩阵的幂运算--蓝桥杯.md","raw":"---\ntitle: 矩阵的幂运算--蓝桥杯\nauthor: \ntags: \n       - java\n\ncategory: \n       - 算法\n\ndate: 2020-04-24 15:41:33\n---\n### 试题 基础练习 矩阵乘法\n\n##### 题目\n\n**资源限制**\n时间限制：1.0s 内存限制：512.0MB\n**问题描述**\n给定一个N阶矩阵A，输出A的M次幂（M是非负整数）\n例如：\nA =\n1 2\n3 4\nA的2次幂\n7 10\n15 22\n**输入格式**\n第一行是一个正整数N、M（1<=N<=30, 0<=M<=5），表示矩阵A的阶数和要求的幂数\n接下来N行，每行N个绝对值不超过10的非负整数，描述矩阵A的值\n**输出格式**\n输出共N行，每行N个整数，表示A的M次幂所对应的矩阵。相邻的数之间用一个空格隔开\n**样例输入**\n2 2\n1 2\n3 4\n**样例输出**\n7 10\n15 22\n\n##### 问题分析\n\n这里我们需要注意，矩阵的幂可能为0，也就是说，我们需要考虑到输出01对角矩阵的情况。\n\n##### 解题思路\n\n-》建立三个矩阵的二维数组，\n-》如果幂为0，打印01对角矩阵\n-》否则\n-》》》循环\n-》》》》》第一，二个矩阵相乘得第三个矩阵，而后将第三个矩阵赋值给第二个矩阵\n-》》》打印输出第二个矩阵\n\n### Java实现代码\n\n```js \nimport java.util.Scanner;\n\npublic class Main {\n    \n\tpublic static void main(String[] args) {\n    \n\t\tScanner scanner = new Scanner(System.in);\n\t\tint n = scanner.nextInt();\n\t\tint m = scanner.nextInt();\n\t\tint[][] arr1 = new int[n][n];\n\t\tint[][] arr2 = new int[n][n];\n\t\tint[][] arr3 = new int[n][n];\n\t\tfor (int i = 0; i < n; i++) {\n    \n\t\t\tfor (int j = 0; j < n; j++) {\n    \n\t\t\t\tarr1[i][j] = scanner.nextInt();\n\t\t\t\tarr2[i][j] = arr1[i][j];\n\t\t\t}\n\t\t}\n\t\tscanner.close();\n\t\t\n\t\tif(m == 0) {\n    \n\t\t\tfor (int i = 0; i < n; i++) {\n    \n\t\t\t\tfor (int j = 0; j < n; j++) {\n    \n\t\t\t\t\tif( i == j ) {\n    \n\t\t\t\t\t\tSystem.out.print(\"1 \");\n\t\t\t\t\t}\n\t\t\t\t\telse {\n    \n\t\t\t\t\t\tSystem.out.print(\"0 \");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tfor (int h = 1; h < m; h++) {\n    \n\t\t\tfor (int i = 0; i < n; i++) {\n    \n\t\t\t\tfor (int j = 0; j < n; j++) {\n    \n\t\t\t\t\tarr3[i][j] = 0;\n\t\t\t\t\tfor (int k = 0,t=0; k < n && t<n; k++,t++) {\n    \n\t\t\t\t\t\tarr3[i][j] += arr1[i][t] * arr2[k][j];  \n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int i = 0; i < n; i++) {\n    \n\t\t\t\tfor (int j = 0; j < n; j++) {\n    \n\t\t\t\t\tarr2[i][j] = arr3[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t} \n\t\tfor (int i = 0; i < n; i++) {\n    \n\t\t\tfor (int j = 0; j < n; j++) {\n    \n\t\t\t\tSystem.out.print(arr2[i][j] + \" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\t\n\t}\n}\n```","slug":"矩阵的幂运算--蓝桥杯","published":1,"updated":"2024-03-15T11:52:25.207Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clttq59c70035zwve46zeb0ho","content":"<h3 id=\"试题-基础练习-矩阵乘法\"><a href=\"#试题-基础练习-矩阵乘法\" class=\"headerlink\" title=\"试题 基础练习 矩阵乘法\"></a>试题 基础练习 矩阵乘法</h3><h5 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h5><p><strong>资源限制</strong><br>时间限制：1.0s 内存限制：512.0MB<br><strong>问题描述</strong><br>给定一个N阶矩阵A，输出A的M次幂（M是非负整数）<br>例如：<br>A &#x3D;<br>1 2<br>3 4<br>A的2次幂<br>7 10<br>15 22<br><strong>输入格式</strong><br>第一行是一个正整数N、M（1&lt;&#x3D;N&lt;&#x3D;30, 0&lt;&#x3D;M&lt;&#x3D;5），表示矩阵A的阶数和要求的幂数<br>接下来N行，每行N个绝对值不超过10的非负整数，描述矩阵A的值<br><strong>输出格式</strong><br>输出共N行，每行N个整数，表示A的M次幂所对应的矩阵。相邻的数之间用一个空格隔开<br><strong>样例输入</strong><br>2 2<br>1 2<br>3 4<br><strong>样例输出</strong><br>7 10<br>15 22</p>\n<h5 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h5><p>这里我们需要注意，矩阵的幂可能为0，也就是说，我们需要考虑到输出01对角矩阵的情况。</p>\n<h5 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><p>-》建立三个矩阵的二维数组，<br>-》如果幂为0，打印01对角矩阵<br>-》否则<br>-》》》循环<br>-》》》》》第一，二个矩阵相乘得第三个矩阵，而后将第三个矩阵赋值给第二个矩阵<br>-》》》打印输出第二个矩阵</p>\n<h3 id=\"Java实现代码\"><a href=\"#Java实现代码\" class=\"headerlink\" title=\"Java实现代码\"></a>Java实现代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">util</span>.<span class=\"hljs-property\">Scanner</span>;<br><br>public <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Main</span> &#123;<br>    <br>\tpublic <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span>[] args</span>) &#123;<br>    <br>\t\t<span class=\"hljs-title class_\">Scanner</span> scanner = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">in</span>);<br>\t\tint n = scanner.<span class=\"hljs-title function_\">nextInt</span>();<br>\t\tint m = scanner.<span class=\"hljs-title function_\">nextInt</span>();<br>\t\tint[][] arr1 = <span class=\"hljs-keyword\">new</span> int[n][n];<br>\t\tint[][] arr2 = <span class=\"hljs-keyword\">new</span> int[n][n];<br>\t\tint[][] arr3 = <span class=\"hljs-keyword\">new</span> int[n][n];<br>\t\t<span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) &#123;<br>    <br>\t\t\t<span class=\"hljs-keyword\">for</span> (int j = <span class=\"hljs-number\">0</span>; j &lt; n; j++) &#123;<br>    <br>\t\t\t\tarr1[i][j] = scanner.<span class=\"hljs-title function_\">nextInt</span>();<br>\t\t\t\tarr2[i][j] = arr1[i][j];<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tscanner.<span class=\"hljs-title function_\">close</span>();<br>\t\t<br>\t\t<span class=\"hljs-keyword\">if</span>(m == <span class=\"hljs-number\">0</span>) &#123;<br>    <br>\t\t\t<span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) &#123;<br>    <br>\t\t\t\t<span class=\"hljs-keyword\">for</span> (int j = <span class=\"hljs-number\">0</span>; j &lt; n; j++) &#123;<br>    <br>\t\t\t\t\t<span class=\"hljs-keyword\">if</span>( i == j ) &#123;<br>    <br>\t\t\t\t\t\t<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;1 &quot;</span>);<br>\t\t\t\t\t&#125;<br>\t\t\t\t\t<span class=\"hljs-keyword\">else</span> &#123;<br>    <br>\t\t\t\t\t\t<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;0 &quot;</span>);<br>\t\t\t\t\t&#125;<br>\t\t\t\t&#125;<br>\t\t\t\t<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>();<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">return</span>;<br>\t\t&#125;<br>\t\t<br>\t\t<span class=\"hljs-keyword\">for</span> (int h = <span class=\"hljs-number\">1</span>; h &lt; m; h++) &#123;<br>    <br>\t\t\t<span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) &#123;<br>    <br>\t\t\t\t<span class=\"hljs-keyword\">for</span> (int j = <span class=\"hljs-number\">0</span>; j &lt; n; j++) &#123;<br>    <br>\t\t\t\t\tarr3[i][j] = <span class=\"hljs-number\">0</span>;<br>\t\t\t\t\t<span class=\"hljs-keyword\">for</span> (int k = <span class=\"hljs-number\">0</span>,t=<span class=\"hljs-number\">0</span>; k &lt; n &amp;&amp; t&lt;n; k++,t++) &#123;<br>    <br>\t\t\t\t\t\tarr3[i][j] += arr1[i][t] * arr2[k][j];  <br>\t\t\t\t\t&#125;<br>\t\t\t\t&#125;<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) &#123;<br>    <br>\t\t\t\t<span class=\"hljs-keyword\">for</span> (int j = <span class=\"hljs-number\">0</span>; j &lt; n; j++) &#123;<br>    <br>\t\t\t\t\tarr2[i][j] = arr3[i][j];<br>\t\t\t\t&#125;<br>\t\t\t&#125;<br>\t\t&#125; <br>\t\t<span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) &#123;<br>    <br>\t\t\t<span class=\"hljs-keyword\">for</span> (int j = <span class=\"hljs-number\">0</span>; j &lt; n; j++) &#123;<br>    <br>\t\t\t\t<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">print</span>(arr2[i][j] + <span class=\"hljs-string\">&quot; &quot;</span>);<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>();<br>\t\t&#125;\t<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"试题-基础练习-矩阵乘法\"><a href=\"#试题-基础练习-矩阵乘法\" class=\"headerlink\" title=\"试题 基础练习 矩阵乘法\"></a>试题 基础练习 矩阵乘法</h3><h5 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h5><p><strong>资源限制</strong><br>时间限制：1.0s 内存限制：512.0MB<br><strong>问题描述</strong><br>给定一个N阶矩阵A，输出A的M次幂（M是非负整数）<br>例如：<br>A &#x3D;<br>1 2<br>3 4<br>A的2次幂<br>7 10<br>15 22<br><strong>输入格式</strong><br>第一行是一个正整数N、M（1&lt;&#x3D;N&lt;&#x3D;30, 0&lt;&#x3D;M&lt;&#x3D;5），表示矩阵A的阶数和要求的幂数<br>接下来N行，每行N个绝对值不超过10的非负整数，描述矩阵A的值<br><strong>输出格式</strong><br>输出共N行，每行N个整数，表示A的M次幂所对应的矩阵。相邻的数之间用一个空格隔开<br><strong>样例输入</strong><br>2 2<br>1 2<br>3 4<br><strong>样例输出</strong><br>7 10<br>15 22</p>\n<h5 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h5><p>这里我们需要注意，矩阵的幂可能为0，也就是说，我们需要考虑到输出01对角矩阵的情况。</p>\n<h5 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h5><p>-》建立三个矩阵的二维数组，<br>-》如果幂为0，打印01对角矩阵<br>-》否则<br>-》》》循环<br>-》》》》》第一，二个矩阵相乘得第三个矩阵，而后将第三个矩阵赋值给第二个矩阵<br>-》》》打印输出第二个矩阵</p>\n<h3 id=\"Java实现代码\"><a href=\"#Java实现代码\" class=\"headerlink\" title=\"Java实现代码\"></a>Java实现代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">util</span>.<span class=\"hljs-property\">Scanner</span>;<br><br>public <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Main</span> &#123;<br>    <br>\tpublic <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span>[] args</span>) &#123;<br>    <br>\t\t<span class=\"hljs-title class_\">Scanner</span> scanner = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">in</span>);<br>\t\tint n = scanner.<span class=\"hljs-title function_\">nextInt</span>();<br>\t\tint m = scanner.<span class=\"hljs-title function_\">nextInt</span>();<br>\t\tint[][] arr1 = <span class=\"hljs-keyword\">new</span> int[n][n];<br>\t\tint[][] arr2 = <span class=\"hljs-keyword\">new</span> int[n][n];<br>\t\tint[][] arr3 = <span class=\"hljs-keyword\">new</span> int[n][n];<br>\t\t<span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) &#123;<br>    <br>\t\t\t<span class=\"hljs-keyword\">for</span> (int j = <span class=\"hljs-number\">0</span>; j &lt; n; j++) &#123;<br>    <br>\t\t\t\tarr1[i][j] = scanner.<span class=\"hljs-title function_\">nextInt</span>();<br>\t\t\t\tarr2[i][j] = arr1[i][j];<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tscanner.<span class=\"hljs-title function_\">close</span>();<br>\t\t<br>\t\t<span class=\"hljs-keyword\">if</span>(m == <span class=\"hljs-number\">0</span>) &#123;<br>    <br>\t\t\t<span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) &#123;<br>    <br>\t\t\t\t<span class=\"hljs-keyword\">for</span> (int j = <span class=\"hljs-number\">0</span>; j &lt; n; j++) &#123;<br>    <br>\t\t\t\t\t<span class=\"hljs-keyword\">if</span>( i == j ) &#123;<br>    <br>\t\t\t\t\t\t<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;1 &quot;</span>);<br>\t\t\t\t\t&#125;<br>\t\t\t\t\t<span class=\"hljs-keyword\">else</span> &#123;<br>    <br>\t\t\t\t\t\t<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;0 &quot;</span>);<br>\t\t\t\t\t&#125;<br>\t\t\t\t&#125;<br>\t\t\t\t<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>();<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">return</span>;<br>\t\t&#125;<br>\t\t<br>\t\t<span class=\"hljs-keyword\">for</span> (int h = <span class=\"hljs-number\">1</span>; h &lt; m; h++) &#123;<br>    <br>\t\t\t<span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) &#123;<br>    <br>\t\t\t\t<span class=\"hljs-keyword\">for</span> (int j = <span class=\"hljs-number\">0</span>; j &lt; n; j++) &#123;<br>    <br>\t\t\t\t\tarr3[i][j] = <span class=\"hljs-number\">0</span>;<br>\t\t\t\t\t<span class=\"hljs-keyword\">for</span> (int k = <span class=\"hljs-number\">0</span>,t=<span class=\"hljs-number\">0</span>; k &lt; n &amp;&amp; t&lt;n; k++,t++) &#123;<br>    <br>\t\t\t\t\t\tarr3[i][j] += arr1[i][t] * arr2[k][j];  <br>\t\t\t\t\t&#125;<br>\t\t\t\t&#125;<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) &#123;<br>    <br>\t\t\t\t<span class=\"hljs-keyword\">for</span> (int j = <span class=\"hljs-number\">0</span>; j &lt; n; j++) &#123;<br>    <br>\t\t\t\t\tarr2[i][j] = arr3[i][j];<br>\t\t\t\t&#125;<br>\t\t\t&#125;<br>\t\t&#125; <br>\t\t<span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) &#123;<br>    <br>\t\t\t<span class=\"hljs-keyword\">for</span> (int j = <span class=\"hljs-number\">0</span>; j &lt; n; j++) &#123;<br>    <br>\t\t\t\t<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">print</span>(arr2[i][j] + <span class=\"hljs-string\">&quot; &quot;</span>);<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>();<br>\t\t&#125;\t<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"线程的创建与撤销 c++","author":null,"date":"2020-04-18T08:55:46.000Z","_content":"## 线程的创建与撤销\n\n### 一、目的\n\n(1)熟悉windows系统提供的线程创建与撤销系统调用.\n(2)掌握windows系统环境下线程的创建与撤销方法.\n\n### 二、准备\n\n##### 1. 线程的创建\n\nCeateThread()完成线程的创建.它在调用进程的地址空间上创建一个线程,执行指定的函数,并返回新建立的线程的句柄.\n原型:\n```js \nHANDLE CeateThread(\n\tLPSECURITY_ATTRIBUTES lpThreadAttributes,\n\tDWORD dwStackSize,\n\tLPSECURITY_START_ROUTINE lpStartAddress,\n\tLPVOID lpparameter,\n\tDWORD dwCreationFlags,\n\tLPDWORD lpThreadId\n);\n```\n\n参数说明:\n\n1. lpThreadAttributes:为线程指定安全属性.为NULL时,线程得到一个默认的安全描述符.\n1. dwStackSize:线程堆栈的大小.其值为0时,其大小与调用该线程的线程堆栈大小相同.\n1. lpStartAddress:指定线程要执行的函数.\n1. lpparameter:函数中要传递的参数.\n1. dwCreationFlags:指定线程创建后所处的状态.若为CRRATE_SUSPENDED,表示创建后出于挂起状态,用ResumeThread()激活线程才可以执行.若该值为0，表示线程创建后立即执行.\n1. lpThreadId:用一个32位的变量接受系统返回的线程标识符.若该值设为NULL,系统不返回线程标识符.\n返回值:\n如果线程创建成功,将返回线程的句柄;如果失败,系统返回NULL,可以调用函数GetLastError查询失败的原因.\n用法举例:\n```js \nstatic HANDLE hHandle1=NULL; //用于存储线程返回句柄的变量\nDWORD dwThreadID1;           //用于存储线程标识符的变量\n//创建一个名为ThreadName1的线程\nhHandle1=CeateThread((LPSECURITY_ATTRIBUTES)) NULL\n                     0,\n\t\t\t\t\t (LPSECURITY_START_ROUTINE)ThreadName1,\n\t\t\t\t\t (LPDWORD)NULL,\n\t\t\t\t\t 0,&dwThreadID1);\n```\n\n##### 2. 撤销线程\n\nExitThread()用于撤销当前进程.\n原型:\n```js \nVOID ExitThread(\nDWORD dwExitCode);   //线程返回码\n```\n\n参数说明:\ndwExitCode:指定线程返回码,可以调用GetExitCodeThread()查询返回码的含义.\n返回值:\n该函数没有返回值.\n用法举例:\n\n```js \nExitThread(0);\n```\n\n##### 3.终止线程\n\nTerminateThread()用于终止当前线程.该函数与ExitThread()的区别在于,ExitThread()在撤销线程时将该线程所拥有的资源全部归还给系统,而TerminateThread()不归还资源.\n原型:\n```js \nBOOL TerminateThread(\nHANDLE hHandle,       //线程句柄\nDWORD dwExitCode);    //线程返回码\n```\n\n参数说明:\n(1)hThread:要终止线程的线程句柄.\n(2)dwExitCode:指定线程返回码,可以调用GetExitCodeThread()查询返回码的含义.\n返回值:\n函数调用成功,将返回一个非0值;若失败,返回0，可以调用函数GetLastError()查询失败的原因.\n\n##### 4.挂起线程\n\nSleep()用于挂起当前正在执行的线程.\n原型:\n```js \nVOID Sleep(DWORD dwMilliseconds);\n```\n\n参数说明:\ndwMilliseconds;指定挂起时间,单位为ms(毫秒).\n返回值:\n该函数没有返回值.\n\n##### 5.关闭句柄\n\n函数CloseHandle()用于关闭已打开的对象的句柄,其作用与释放动态申请的内存空间类似,这样可以释放系统资源,使线程安全运行.\n原型:\n```js \nBOOL CloseHandle(HANDLE hObject);\n```\n\n参数说明:\nhObject:已打开对象的句柄.\n返回值:\n如果函数调用成功,则返回值为非0值;如果函数调用失败,则返回值为0.若要得到更多的错误信息,调用函数GetLastError()查询.\n\n### 三、内容\n\n使用系统调用CreatThread()创建一个子线程,并在子线程中显示;Thread is Running!.为了能让用户清楚地看到线程的运行情况,使用Sleep()使线程挂起5s,之后使用ExitThread(0)撤销进程.\n\n#### 要求\n\n能正确使用CreatThread(),ExitThread()及Sleep()等系统调用,进一步理解进程与线程理论.\n\n#### 指导\n\n本实验在WindowsXP,Microsoft Visual C++ 6.0环境下实现,利用Windows SDK提供的API完成程序的功能.实验在Windows XP环境下安装由于WindowsXP,Microsoft Visual C++ 6.0是一个集成开发环境,其中包含了Windows SDK 所有工具和定义,所以安装了WindowsXP,Microsoft Visual C++ 6.0后不用特意安装SDK.试验中所有的API是操作系统提供的用来进行应用程序开发的系统功能接口.\n\n1. 首先启动安装好的,Microsoft Visual C++ 6.0.\n1. 在,Microsoft Visual C++ 6.0环境下选择File->new命令,然后在Project选项卡中选择Win32 Console Application建立一个控制台工程文件.\n1. 由于CreatThread()等函数是Microsoft Windows操作系统的系统调用,因此,在下图中选择An application that supports MFC,之后单击Finish按钮.\n\n![在这里插入图片描述](../images/3e8b77cd-3dac-468c-94a0-0da4b15803a3.png)\n\n1. 创建一个单线程操作并观看结果\n![在这里插入图片描述](../images/cdecf844-c7c0-4b59-8eb0-a90db0e708fb.png)\n![在这里插入图片描述](../images/f01c088e-7663-4d75-aaef-4df7554944fe.png)\n1. 创建一个多线程操作，并观看结果\n![在这里插入图片描述](../images/f42ae8df-444c-4e5d-9fb8-f168dd28c1d1.png)\n![在这里插入图片描述](../images/9309b62e-e0a3-408d-99aa-1a4f18a836b3.png)\n\n#### 源程序\n\n```js \n// test1.cpp : Defines the entry point for the console application.\n//\n\n#include \"stdafx.h\"\n#include \"test1.h\"\n\n#ifdef _DEBUG\n#define new DEBUG_NEW\n#undef THIS_FILE\nstatic char THIS_FILE[] = __FILE__;\n#endif\n\n/\n// The one and only application object\n\nCWinApp theApp;\n\nusing namespace std;\n\n\n\nvoid eatApple(int apple_number)\n{\n    \n\tSleep((3-apple_number)*1000);\n\tprintf(\"i'm eating apple #%d.\\n\", apple_number);\n}\n\n\nint _tmain(int argc, TCHAR* argv[], TCHAR* envp[])\n{\n    \n\tHANDLE handle1 = NULL;\n\tHANDLE handle2 = NULL;\n\tHANDLE handle3 = NULL;\n\tDWORD ThreadID1 = NULL;\n\tDWORD ThreadID2 = NULL;\n\tDWORD ThreadID3 = NULL;\n\n\tint nRetCode;\n\n\tint a = 0;\n\tint b = 1;\n\tint c = 2;\n\t\n\thandle1 = CreateThread((LPSECURITY_ATTRIBUTES) NULL,\n\t\t0,\n\t\t(LPTHREAD_START_ROUTINE) eatApple,\n\t\t(LPVOID) a,\n\t\t0,\n\t\t&ThreadID1);\n\t\n\thandle2 = CreateThread((LPSECURITY_ATTRIBUTES) NULL,\n\t\t0,\n\t\t(LPTHREAD_START_ROUTINE) eatApple,\n\t\t(LPVOID) b,\n\t\t0,\n\t\t&ThreadID2);\n\t\n\thandle3 = CreateThread((LPSECURITY_ATTRIBUTES) NULL,\n\t\t0,\n\t\t(LPTHREAD_START_ROUTINE) eatApple,\n\t\t(LPVOID) c,\n\t\t0,\n\t\t&ThreadID3);\n\tSleep(10000);\n\treturn nRetCode;\n}\n```\n\n### 四、总结\n\n在Windows系统中进程是资源的拥有者,线程是系统调用的单位.进程创建后,其主线程也随即被创建.但是单线程只能执行完一个之后再执行另外一个线程，而多线程在一定程度上是多个线程一起执行的。","source":"_posts/线程的创建与撤销 c++.md","raw":"---\ntitle: 线程的创建与撤销 c++\nauthor: \ntags: \n       - c++\n\ncategory: \n       - 其它\n\ndate: 2020-04-18 16:55:46\n---\n## 线程的创建与撤销\n\n### 一、目的\n\n(1)熟悉windows系统提供的线程创建与撤销系统调用.\n(2)掌握windows系统环境下线程的创建与撤销方法.\n\n### 二、准备\n\n##### 1. 线程的创建\n\nCeateThread()完成线程的创建.它在调用进程的地址空间上创建一个线程,执行指定的函数,并返回新建立的线程的句柄.\n原型:\n```js \nHANDLE CeateThread(\n\tLPSECURITY_ATTRIBUTES lpThreadAttributes,\n\tDWORD dwStackSize,\n\tLPSECURITY_START_ROUTINE lpStartAddress,\n\tLPVOID lpparameter,\n\tDWORD dwCreationFlags,\n\tLPDWORD lpThreadId\n);\n```\n\n参数说明:\n\n1. lpThreadAttributes:为线程指定安全属性.为NULL时,线程得到一个默认的安全描述符.\n1. dwStackSize:线程堆栈的大小.其值为0时,其大小与调用该线程的线程堆栈大小相同.\n1. lpStartAddress:指定线程要执行的函数.\n1. lpparameter:函数中要传递的参数.\n1. dwCreationFlags:指定线程创建后所处的状态.若为CRRATE_SUSPENDED,表示创建后出于挂起状态,用ResumeThread()激活线程才可以执行.若该值为0，表示线程创建后立即执行.\n1. lpThreadId:用一个32位的变量接受系统返回的线程标识符.若该值设为NULL,系统不返回线程标识符.\n返回值:\n如果线程创建成功,将返回线程的句柄;如果失败,系统返回NULL,可以调用函数GetLastError查询失败的原因.\n用法举例:\n```js \nstatic HANDLE hHandle1=NULL; //用于存储线程返回句柄的变量\nDWORD dwThreadID1;           //用于存储线程标识符的变量\n//创建一个名为ThreadName1的线程\nhHandle1=CeateThread((LPSECURITY_ATTRIBUTES)) NULL\n                     0,\n\t\t\t\t\t (LPSECURITY_START_ROUTINE)ThreadName1,\n\t\t\t\t\t (LPDWORD)NULL,\n\t\t\t\t\t 0,&dwThreadID1);\n```\n\n##### 2. 撤销线程\n\nExitThread()用于撤销当前进程.\n原型:\n```js \nVOID ExitThread(\nDWORD dwExitCode);   //线程返回码\n```\n\n参数说明:\ndwExitCode:指定线程返回码,可以调用GetExitCodeThread()查询返回码的含义.\n返回值:\n该函数没有返回值.\n用法举例:\n\n```js \nExitThread(0);\n```\n\n##### 3.终止线程\n\nTerminateThread()用于终止当前线程.该函数与ExitThread()的区别在于,ExitThread()在撤销线程时将该线程所拥有的资源全部归还给系统,而TerminateThread()不归还资源.\n原型:\n```js \nBOOL TerminateThread(\nHANDLE hHandle,       //线程句柄\nDWORD dwExitCode);    //线程返回码\n```\n\n参数说明:\n(1)hThread:要终止线程的线程句柄.\n(2)dwExitCode:指定线程返回码,可以调用GetExitCodeThread()查询返回码的含义.\n返回值:\n函数调用成功,将返回一个非0值;若失败,返回0，可以调用函数GetLastError()查询失败的原因.\n\n##### 4.挂起线程\n\nSleep()用于挂起当前正在执行的线程.\n原型:\n```js \nVOID Sleep(DWORD dwMilliseconds);\n```\n\n参数说明:\ndwMilliseconds;指定挂起时间,单位为ms(毫秒).\n返回值:\n该函数没有返回值.\n\n##### 5.关闭句柄\n\n函数CloseHandle()用于关闭已打开的对象的句柄,其作用与释放动态申请的内存空间类似,这样可以释放系统资源,使线程安全运行.\n原型:\n```js \nBOOL CloseHandle(HANDLE hObject);\n```\n\n参数说明:\nhObject:已打开对象的句柄.\n返回值:\n如果函数调用成功,则返回值为非0值;如果函数调用失败,则返回值为0.若要得到更多的错误信息,调用函数GetLastError()查询.\n\n### 三、内容\n\n使用系统调用CreatThread()创建一个子线程,并在子线程中显示;Thread is Running!.为了能让用户清楚地看到线程的运行情况,使用Sleep()使线程挂起5s,之后使用ExitThread(0)撤销进程.\n\n#### 要求\n\n能正确使用CreatThread(),ExitThread()及Sleep()等系统调用,进一步理解进程与线程理论.\n\n#### 指导\n\n本实验在WindowsXP,Microsoft Visual C++ 6.0环境下实现,利用Windows SDK提供的API完成程序的功能.实验在Windows XP环境下安装由于WindowsXP,Microsoft Visual C++ 6.0是一个集成开发环境,其中包含了Windows SDK 所有工具和定义,所以安装了WindowsXP,Microsoft Visual C++ 6.0后不用特意安装SDK.试验中所有的API是操作系统提供的用来进行应用程序开发的系统功能接口.\n\n1. 首先启动安装好的,Microsoft Visual C++ 6.0.\n1. 在,Microsoft Visual C++ 6.0环境下选择File->new命令,然后在Project选项卡中选择Win32 Console Application建立一个控制台工程文件.\n1. 由于CreatThread()等函数是Microsoft Windows操作系统的系统调用,因此,在下图中选择An application that supports MFC,之后单击Finish按钮.\n\n![在这里插入图片描述](../images/3e8b77cd-3dac-468c-94a0-0da4b15803a3.png)\n\n1. 创建一个单线程操作并观看结果\n![在这里插入图片描述](../images/cdecf844-c7c0-4b59-8eb0-a90db0e708fb.png)\n![在这里插入图片描述](../images/f01c088e-7663-4d75-aaef-4df7554944fe.png)\n1. 创建一个多线程操作，并观看结果\n![在这里插入图片描述](../images/f42ae8df-444c-4e5d-9fb8-f168dd28c1d1.png)\n![在这里插入图片描述](../images/9309b62e-e0a3-408d-99aa-1a4f18a836b3.png)\n\n#### 源程序\n\n```js \n// test1.cpp : Defines the entry point for the console application.\n//\n\n#include \"stdafx.h\"\n#include \"test1.h\"\n\n#ifdef _DEBUG\n#define new DEBUG_NEW\n#undef THIS_FILE\nstatic char THIS_FILE[] = __FILE__;\n#endif\n\n/\n// The one and only application object\n\nCWinApp theApp;\n\nusing namespace std;\n\n\n\nvoid eatApple(int apple_number)\n{\n    \n\tSleep((3-apple_number)*1000);\n\tprintf(\"i'm eating apple #%d.\\n\", apple_number);\n}\n\n\nint _tmain(int argc, TCHAR* argv[], TCHAR* envp[])\n{\n    \n\tHANDLE handle1 = NULL;\n\tHANDLE handle2 = NULL;\n\tHANDLE handle3 = NULL;\n\tDWORD ThreadID1 = NULL;\n\tDWORD ThreadID2 = NULL;\n\tDWORD ThreadID3 = NULL;\n\n\tint nRetCode;\n\n\tint a = 0;\n\tint b = 1;\n\tint c = 2;\n\t\n\thandle1 = CreateThread((LPSECURITY_ATTRIBUTES) NULL,\n\t\t0,\n\t\t(LPTHREAD_START_ROUTINE) eatApple,\n\t\t(LPVOID) a,\n\t\t0,\n\t\t&ThreadID1);\n\t\n\thandle2 = CreateThread((LPSECURITY_ATTRIBUTES) NULL,\n\t\t0,\n\t\t(LPTHREAD_START_ROUTINE) eatApple,\n\t\t(LPVOID) b,\n\t\t0,\n\t\t&ThreadID2);\n\t\n\thandle3 = CreateThread((LPSECURITY_ATTRIBUTES) NULL,\n\t\t0,\n\t\t(LPTHREAD_START_ROUTINE) eatApple,\n\t\t(LPVOID) c,\n\t\t0,\n\t\t&ThreadID3);\n\tSleep(10000);\n\treturn nRetCode;\n}\n```\n\n### 四、总结\n\n在Windows系统中进程是资源的拥有者,线程是系统调用的单位.进程创建后,其主线程也随即被创建.但是单线程只能执行完一个之后再执行另外一个线程，而多线程在一定程度上是多个线程一起执行的。","slug":"线程的创建与撤销 c++","published":1,"updated":"2024-03-15T11:52:55.139Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clttq59c80039zwve6qf9hdru","content":"<h2 id=\"线程的创建与撤销\"><a href=\"#线程的创建与撤销\" class=\"headerlink\" title=\"线程的创建与撤销\"></a>线程的创建与撤销</h2><h3 id=\"一、目的\"><a href=\"#一、目的\" class=\"headerlink\" title=\"一、目的\"></a>一、目的</h3><p>(1)熟悉windows系统提供的线程创建与撤销系统调用.<br>(2)掌握windows系统环境下线程的创建与撤销方法.</p>\n<h3 id=\"二、准备\"><a href=\"#二、准备\" class=\"headerlink\" title=\"二、准备\"></a>二、准备</h3><h5 id=\"1-线程的创建\"><a href=\"#1-线程的创建\" class=\"headerlink\" title=\"1. 线程的创建\"></a>1. 线程的创建</h5><p>CeateThread()完成线程的创建.它在调用进程的地址空间上创建一个线程,执行指定的函数,并返回新建立的线程的句柄.<br>原型:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable constant_\">HANDLE</span> <span class=\"hljs-title class_\">CeateThread</span>(<br>\t<span class=\"hljs-variable constant_\">LPSECURITY_ATTRIBUTES</span> lpThreadAttributes,<br>\t<span class=\"hljs-variable constant_\">DWORD</span> dwStackSize,<br>\t<span class=\"hljs-variable constant_\">LPSECURITY_START_ROUTINE</span> lpStartAddress,<br>\t<span class=\"hljs-variable constant_\">LPVOID</span> lpparameter,<br>\t<span class=\"hljs-variable constant_\">DWORD</span> dwCreationFlags,<br>\t<span class=\"hljs-variable constant_\">LPDWORD</span> lpThreadId<br>);<br></code></pre></td></tr></table></figure>\n\n<p>参数说明:</p>\n<ol>\n<li>lpThreadAttributes:为线程指定安全属性.为NULL时,线程得到一个默认的安全描述符.</li>\n<li>dwStackSize:线程堆栈的大小.其值为0时,其大小与调用该线程的线程堆栈大小相同.</li>\n<li>lpStartAddress:指定线程要执行的函数.</li>\n<li>lpparameter:函数中要传递的参数.</li>\n<li>dwCreationFlags:指定线程创建后所处的状态.若为CRRATE_SUSPENDED,表示创建后出于挂起状态,用ResumeThread()激活线程才可以执行.若该值为0，表示线程创建后立即执行.</li>\n<li>lpThreadId:用一个32位的变量接受系统返回的线程标识符.若该值设为NULL,系统不返回线程标识符.<br>返回值:<br>如果线程创建成功,将返回线程的句柄;如果失败,系统返回NULL,可以调用函数GetLastError查询失败的原因.<br>用法举例:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-variable constant_\">HANDLE</span> hHandle1=<span class=\"hljs-variable constant_\">NULL</span>; <span class=\"hljs-comment\">//用于存储线程返回句柄的变量</span><br><span class=\"hljs-variable constant_\">DWORD</span> dwThreadID1;           <span class=\"hljs-comment\">//用于存储线程标识符的变量</span><br><span class=\"hljs-comment\">//创建一个名为ThreadName1的线程</span><br>hHandle1=<span class=\"hljs-title class_\">CeateThread</span>((<span class=\"hljs-variable constant_\">LPSECURITY_ATTRIBUTES</span>)) <span class=\"hljs-variable constant_\">NULL</span><br>                     <span class=\"hljs-number\">0</span>,<br>\t\t\t\t\t (<span class=\"hljs-variable constant_\">LPSECURITY_START_ROUTINE</span>)<span class=\"hljs-title class_\">ThreadName1</span>,<br>\t\t\t\t\t (<span class=\"hljs-variable constant_\">LPDWORD</span>)<span class=\"hljs-variable constant_\">NULL</span>,<br>\t\t\t\t\t <span class=\"hljs-number\">0</span>,&amp;dwThreadID1);<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h5 id=\"2-撤销线程\"><a href=\"#2-撤销线程\" class=\"headerlink\" title=\"2. 撤销线程\"></a>2. 撤销线程</h5><p>ExitThread()用于撤销当前进程.<br>原型:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable constant_\">VOID</span> <span class=\"hljs-title class_\">ExitThread</span>(<br><span class=\"hljs-variable constant_\">DWORD</span> dwExitCode);   <span class=\"hljs-comment\">//线程返回码</span><br></code></pre></td></tr></table></figure>\n\n<p>参数说明:<br>dwExitCode:指定线程返回码,可以调用GetExitCodeThread()查询返回码的含义.<br>返回值:<br>该函数没有返回值.<br>用法举例:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title class_\">ExitThread</span>(<span class=\"hljs-number\">0</span>);<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"3-终止线程\"><a href=\"#3-终止线程\" class=\"headerlink\" title=\"3.终止线程\"></a>3.终止线程</h5><p>TerminateThread()用于终止当前线程.该函数与ExitThread()的区别在于,ExitThread()在撤销线程时将该线程所拥有的资源全部归还给系统,而TerminateThread()不归还资源.<br>原型:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable constant_\">BOOL</span> <span class=\"hljs-title class_\">TerminateThread</span>(<br><span class=\"hljs-variable constant_\">HANDLE</span> hHandle,       <span class=\"hljs-comment\">//线程句柄</span><br><span class=\"hljs-variable constant_\">DWORD</span> dwExitCode);    <span class=\"hljs-comment\">//线程返回码</span><br></code></pre></td></tr></table></figure>\n\n<p>参数说明:<br>(1)hThread:要终止线程的线程句柄.<br>(2)dwExitCode:指定线程返回码,可以调用GetExitCodeThread()查询返回码的含义.<br>返回值:<br>函数调用成功,将返回一个非0值;若失败,返回0，可以调用函数GetLastError()查询失败的原因.</p>\n<h5 id=\"4-挂起线程\"><a href=\"#4-挂起线程\" class=\"headerlink\" title=\"4.挂起线程\"></a>4.挂起线程</h5><p>Sleep()用于挂起当前正在执行的线程.<br>原型:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable constant_\">VOID</span> <span class=\"hljs-title class_\">Sleep</span>(<span class=\"hljs-variable constant_\">DWORD</span> dwMilliseconds);<br></code></pre></td></tr></table></figure>\n\n<p>参数说明:<br>dwMilliseconds;指定挂起时间,单位为ms(毫秒).<br>返回值:<br>该函数没有返回值.</p>\n<h5 id=\"5-关闭句柄\"><a href=\"#5-关闭句柄\" class=\"headerlink\" title=\"5.关闭句柄\"></a>5.关闭句柄</h5><p>函数CloseHandle()用于关闭已打开的对象的句柄,其作用与释放动态申请的内存空间类似,这样可以释放系统资源,使线程安全运行.<br>原型:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable constant_\">BOOL</span> <span class=\"hljs-title class_\">CloseHandle</span>(<span class=\"hljs-variable constant_\">HANDLE</span> hObject);<br></code></pre></td></tr></table></figure>\n\n<p>参数说明:<br>hObject:已打开对象的句柄.<br>返回值:<br>如果函数调用成功,则返回值为非0值;如果函数调用失败,则返回值为0.若要得到更多的错误信息,调用函数GetLastError()查询.</p>\n<h3 id=\"三、内容\"><a href=\"#三、内容\" class=\"headerlink\" title=\"三、内容\"></a>三、内容</h3><p>使用系统调用CreatThread()创建一个子线程,并在子线程中显示;Thread is Running!.为了能让用户清楚地看到线程的运行情况,使用Sleep()使线程挂起5s,之后使用ExitThread(0)撤销进程.</p>\n<h4 id=\"要求\"><a href=\"#要求\" class=\"headerlink\" title=\"要求\"></a>要求</h4><p>能正确使用CreatThread(),ExitThread()及Sleep()等系统调用,进一步理解进程与线程理论.</p>\n<h4 id=\"指导\"><a href=\"#指导\" class=\"headerlink\" title=\"指导\"></a>指导</h4><p>本实验在WindowsXP,Microsoft Visual C++ 6.0环境下实现,利用Windows SDK提供的API完成程序的功能.实验在Windows XP环境下安装由于WindowsXP,Microsoft Visual C++ 6.0是一个集成开发环境,其中包含了Windows SDK 所有工具和定义,所以安装了WindowsXP,Microsoft Visual C++ 6.0后不用特意安装SDK.试验中所有的API是操作系统提供的用来进行应用程序开发的系统功能接口.</p>\n<ol>\n<li>首先启动安装好的,Microsoft Visual C++ 6.0.</li>\n<li>在,Microsoft Visual C++ 6.0环境下选择File-&gt;new命令,然后在Project选项卡中选择Win32 Console Application建立一个控制台工程文件.</li>\n<li>由于CreatThread()等函数是Microsoft Windows操作系统的系统调用,因此,在下图中选择An application that supports MFC,之后单击Finish按钮.</li>\n</ol>\n<p><img src=\"/../images/3e8b77cd-3dac-468c-94a0-0da4b15803a3.png\" alt=\"在这里插入图片描述\"></p>\n<ol>\n<li>创建一个单线程操作并观看结果<br><img src=\"/../images/cdecf844-c7c0-4b59-8eb0-a90db0e708fb.png\" alt=\"在这里插入图片描述\"><br><img src=\"/../images/f01c088e-7663-4d75-aaef-4df7554944fe.png\" alt=\"在这里插入图片描述\"></li>\n<li>创建一个多线程操作，并观看结果<br><img src=\"/../images/f42ae8df-444c-4e5d-9fb8-f168dd28c1d1.png\" alt=\"在这里插入图片描述\"><br><img src=\"/../images/9309b62e-e0a3-408d-99aa-1a4f18a836b3.png\" alt=\"在这里插入图片描述\"></li>\n</ol>\n<h4 id=\"源程序\"><a href=\"#源程序\" class=\"headerlink\" title=\"源程序\"></a>源程序</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// test1.cpp : Defines the entry point for the console application.</span><br><span class=\"hljs-comment\">//</span><br><br>#include <span class=\"hljs-string\">&quot;stdafx.h&quot;</span><br>#include <span class=\"hljs-string\">&quot;test1.h&quot;</span><br><br>#ifdef _DEBUG<br>#define <span class=\"hljs-keyword\">new</span> <span class=\"hljs-variable constant_\">DEBUG_NEW</span><br>#undef <span class=\"hljs-variable constant_\">THIS_FILE</span><br><span class=\"hljs-keyword\">static</span> char <span class=\"hljs-variable constant_\">THIS_FILE</span>[] = __FILE__;<br>#endif<br><br>/<br><span class=\"hljs-comment\">// The one and only application object</span><br><br><span class=\"hljs-title class_\">CWinApp</span> theApp;<br><br>using namespace std;<br><br><br><br><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">eatApple</span>(<span class=\"hljs-params\">int apple_number</span>)<br>&#123;<br>    <br>\t<span class=\"hljs-title class_\">Sleep</span>((<span class=\"hljs-number\">3</span>-apple_number)*<span class=\"hljs-number\">1000</span>);<br>\t<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">&quot;i&#x27;m eating apple #%d.\\n&quot;</span>, apple_number);<br>&#125;<br><br><br>int <span class=\"hljs-title function_\">_tmain</span>(<span class=\"hljs-params\">int argc, TCHAR* argv[], TCHAR* envp[]</span>)<br>&#123;<br>    <br>\t<span class=\"hljs-variable constant_\">HANDLE</span> handle1 = <span class=\"hljs-variable constant_\">NULL</span>;<br>\t<span class=\"hljs-variable constant_\">HANDLE</span> handle2 = <span class=\"hljs-variable constant_\">NULL</span>;<br>\t<span class=\"hljs-variable constant_\">HANDLE</span> handle3 = <span class=\"hljs-variable constant_\">NULL</span>;<br>\t<span class=\"hljs-variable constant_\">DWORD</span> <span class=\"hljs-title class_\">ThreadID1</span> = <span class=\"hljs-variable constant_\">NULL</span>;<br>\t<span class=\"hljs-variable constant_\">DWORD</span> <span class=\"hljs-title class_\">ThreadID2</span> = <span class=\"hljs-variable constant_\">NULL</span>;<br>\t<span class=\"hljs-variable constant_\">DWORD</span> <span class=\"hljs-title class_\">ThreadID3</span> = <span class=\"hljs-variable constant_\">NULL</span>;<br><br>\tint nRetCode;<br><br>\tint a = <span class=\"hljs-number\">0</span>;<br>\tint b = <span class=\"hljs-number\">1</span>;<br>\tint c = <span class=\"hljs-number\">2</span>;<br>\t<br>\thandle1 = <span class=\"hljs-title class_\">CreateThread</span>((<span class=\"hljs-variable constant_\">LPSECURITY_ATTRIBUTES</span>) <span class=\"hljs-variable constant_\">NULL</span>,<br>\t\t<span class=\"hljs-number\">0</span>,<br>\t\t(<span class=\"hljs-variable constant_\">LPTHREAD_START_ROUTINE</span>) eatApple,<br>\t\t(<span class=\"hljs-variable constant_\">LPVOID</span>) a,<br>\t\t<span class=\"hljs-number\">0</span>,<br>\t\t&amp;<span class=\"hljs-title class_\">ThreadID1</span>);<br>\t<br>\thandle2 = <span class=\"hljs-title class_\">CreateThread</span>((<span class=\"hljs-variable constant_\">LPSECURITY_ATTRIBUTES</span>) <span class=\"hljs-variable constant_\">NULL</span>,<br>\t\t<span class=\"hljs-number\">0</span>,<br>\t\t(<span class=\"hljs-variable constant_\">LPTHREAD_START_ROUTINE</span>) eatApple,<br>\t\t(<span class=\"hljs-variable constant_\">LPVOID</span>) b,<br>\t\t<span class=\"hljs-number\">0</span>,<br>\t\t&amp;<span class=\"hljs-title class_\">ThreadID2</span>);<br>\t<br>\thandle3 = <span class=\"hljs-title class_\">CreateThread</span>((<span class=\"hljs-variable constant_\">LPSECURITY_ATTRIBUTES</span>) <span class=\"hljs-variable constant_\">NULL</span>,<br>\t\t<span class=\"hljs-number\">0</span>,<br>\t\t(<span class=\"hljs-variable constant_\">LPTHREAD_START_ROUTINE</span>) eatApple,<br>\t\t(<span class=\"hljs-variable constant_\">LPVOID</span>) c,<br>\t\t<span class=\"hljs-number\">0</span>,<br>\t\t&amp;<span class=\"hljs-title class_\">ThreadID3</span>);<br>\t<span class=\"hljs-title class_\">Sleep</span>(<span class=\"hljs-number\">10000</span>);<br>\t<span class=\"hljs-keyword\">return</span> nRetCode;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h3><p>在Windows系统中进程是资源的拥有者,线程是系统调用的单位.进程创建后,其主线程也随即被创建.但是单线程只能执行完一个之后再执行另外一个线程，而多线程在一定程度上是多个线程一起执行的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"线程的创建与撤销\"><a href=\"#线程的创建与撤销\" class=\"headerlink\" title=\"线程的创建与撤销\"></a>线程的创建与撤销</h2><h3 id=\"一、目的\"><a href=\"#一、目的\" class=\"headerlink\" title=\"一、目的\"></a>一、目的</h3><p>(1)熟悉windows系统提供的线程创建与撤销系统调用.<br>(2)掌握windows系统环境下线程的创建与撤销方法.</p>\n<h3 id=\"二、准备\"><a href=\"#二、准备\" class=\"headerlink\" title=\"二、准备\"></a>二、准备</h3><h5 id=\"1-线程的创建\"><a href=\"#1-线程的创建\" class=\"headerlink\" title=\"1. 线程的创建\"></a>1. 线程的创建</h5><p>CeateThread()完成线程的创建.它在调用进程的地址空间上创建一个线程,执行指定的函数,并返回新建立的线程的句柄.<br>原型:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable constant_\">HANDLE</span> <span class=\"hljs-title class_\">CeateThread</span>(<br>\t<span class=\"hljs-variable constant_\">LPSECURITY_ATTRIBUTES</span> lpThreadAttributes,<br>\t<span class=\"hljs-variable constant_\">DWORD</span> dwStackSize,<br>\t<span class=\"hljs-variable constant_\">LPSECURITY_START_ROUTINE</span> lpStartAddress,<br>\t<span class=\"hljs-variable constant_\">LPVOID</span> lpparameter,<br>\t<span class=\"hljs-variable constant_\">DWORD</span> dwCreationFlags,<br>\t<span class=\"hljs-variable constant_\">LPDWORD</span> lpThreadId<br>);<br></code></pre></td></tr></table></figure>\n\n<p>参数说明:</p>\n<ol>\n<li>lpThreadAttributes:为线程指定安全属性.为NULL时,线程得到一个默认的安全描述符.</li>\n<li>dwStackSize:线程堆栈的大小.其值为0时,其大小与调用该线程的线程堆栈大小相同.</li>\n<li>lpStartAddress:指定线程要执行的函数.</li>\n<li>lpparameter:函数中要传递的参数.</li>\n<li>dwCreationFlags:指定线程创建后所处的状态.若为CRRATE_SUSPENDED,表示创建后出于挂起状态,用ResumeThread()激活线程才可以执行.若该值为0，表示线程创建后立即执行.</li>\n<li>lpThreadId:用一个32位的变量接受系统返回的线程标识符.若该值设为NULL,系统不返回线程标识符.<br>返回值:<br>如果线程创建成功,将返回线程的句柄;如果失败,系统返回NULL,可以调用函数GetLastError查询失败的原因.<br>用法举例:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-variable constant_\">HANDLE</span> hHandle1=<span class=\"hljs-variable constant_\">NULL</span>; <span class=\"hljs-comment\">//用于存储线程返回句柄的变量</span><br><span class=\"hljs-variable constant_\">DWORD</span> dwThreadID1;           <span class=\"hljs-comment\">//用于存储线程标识符的变量</span><br><span class=\"hljs-comment\">//创建一个名为ThreadName1的线程</span><br>hHandle1=<span class=\"hljs-title class_\">CeateThread</span>((<span class=\"hljs-variable constant_\">LPSECURITY_ATTRIBUTES</span>)) <span class=\"hljs-variable constant_\">NULL</span><br>                     <span class=\"hljs-number\">0</span>,<br>\t\t\t\t\t (<span class=\"hljs-variable constant_\">LPSECURITY_START_ROUTINE</span>)<span class=\"hljs-title class_\">ThreadName1</span>,<br>\t\t\t\t\t (<span class=\"hljs-variable constant_\">LPDWORD</span>)<span class=\"hljs-variable constant_\">NULL</span>,<br>\t\t\t\t\t <span class=\"hljs-number\">0</span>,&amp;dwThreadID1);<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h5 id=\"2-撤销线程\"><a href=\"#2-撤销线程\" class=\"headerlink\" title=\"2. 撤销线程\"></a>2. 撤销线程</h5><p>ExitThread()用于撤销当前进程.<br>原型:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable constant_\">VOID</span> <span class=\"hljs-title class_\">ExitThread</span>(<br><span class=\"hljs-variable constant_\">DWORD</span> dwExitCode);   <span class=\"hljs-comment\">//线程返回码</span><br></code></pre></td></tr></table></figure>\n\n<p>参数说明:<br>dwExitCode:指定线程返回码,可以调用GetExitCodeThread()查询返回码的含义.<br>返回值:<br>该函数没有返回值.<br>用法举例:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title class_\">ExitThread</span>(<span class=\"hljs-number\">0</span>);<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"3-终止线程\"><a href=\"#3-终止线程\" class=\"headerlink\" title=\"3.终止线程\"></a>3.终止线程</h5><p>TerminateThread()用于终止当前线程.该函数与ExitThread()的区别在于,ExitThread()在撤销线程时将该线程所拥有的资源全部归还给系统,而TerminateThread()不归还资源.<br>原型:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable constant_\">BOOL</span> <span class=\"hljs-title class_\">TerminateThread</span>(<br><span class=\"hljs-variable constant_\">HANDLE</span> hHandle,       <span class=\"hljs-comment\">//线程句柄</span><br><span class=\"hljs-variable constant_\">DWORD</span> dwExitCode);    <span class=\"hljs-comment\">//线程返回码</span><br></code></pre></td></tr></table></figure>\n\n<p>参数说明:<br>(1)hThread:要终止线程的线程句柄.<br>(2)dwExitCode:指定线程返回码,可以调用GetExitCodeThread()查询返回码的含义.<br>返回值:<br>函数调用成功,将返回一个非0值;若失败,返回0，可以调用函数GetLastError()查询失败的原因.</p>\n<h5 id=\"4-挂起线程\"><a href=\"#4-挂起线程\" class=\"headerlink\" title=\"4.挂起线程\"></a>4.挂起线程</h5><p>Sleep()用于挂起当前正在执行的线程.<br>原型:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable constant_\">VOID</span> <span class=\"hljs-title class_\">Sleep</span>(<span class=\"hljs-variable constant_\">DWORD</span> dwMilliseconds);<br></code></pre></td></tr></table></figure>\n\n<p>参数说明:<br>dwMilliseconds;指定挂起时间,单位为ms(毫秒).<br>返回值:<br>该函数没有返回值.</p>\n<h5 id=\"5-关闭句柄\"><a href=\"#5-关闭句柄\" class=\"headerlink\" title=\"5.关闭句柄\"></a>5.关闭句柄</h5><p>函数CloseHandle()用于关闭已打开的对象的句柄,其作用与释放动态申请的内存空间类似,这样可以释放系统资源,使线程安全运行.<br>原型:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable constant_\">BOOL</span> <span class=\"hljs-title class_\">CloseHandle</span>(<span class=\"hljs-variable constant_\">HANDLE</span> hObject);<br></code></pre></td></tr></table></figure>\n\n<p>参数说明:<br>hObject:已打开对象的句柄.<br>返回值:<br>如果函数调用成功,则返回值为非0值;如果函数调用失败,则返回值为0.若要得到更多的错误信息,调用函数GetLastError()查询.</p>\n<h3 id=\"三、内容\"><a href=\"#三、内容\" class=\"headerlink\" title=\"三、内容\"></a>三、内容</h3><p>使用系统调用CreatThread()创建一个子线程,并在子线程中显示;Thread is Running!.为了能让用户清楚地看到线程的运行情况,使用Sleep()使线程挂起5s,之后使用ExitThread(0)撤销进程.</p>\n<h4 id=\"要求\"><a href=\"#要求\" class=\"headerlink\" title=\"要求\"></a>要求</h4><p>能正确使用CreatThread(),ExitThread()及Sleep()等系统调用,进一步理解进程与线程理论.</p>\n<h4 id=\"指导\"><a href=\"#指导\" class=\"headerlink\" title=\"指导\"></a>指导</h4><p>本实验在WindowsXP,Microsoft Visual C++ 6.0环境下实现,利用Windows SDK提供的API完成程序的功能.实验在Windows XP环境下安装由于WindowsXP,Microsoft Visual C++ 6.0是一个集成开发环境,其中包含了Windows SDK 所有工具和定义,所以安装了WindowsXP,Microsoft Visual C++ 6.0后不用特意安装SDK.试验中所有的API是操作系统提供的用来进行应用程序开发的系统功能接口.</p>\n<ol>\n<li>首先启动安装好的,Microsoft Visual C++ 6.0.</li>\n<li>在,Microsoft Visual C++ 6.0环境下选择File-&gt;new命令,然后在Project选项卡中选择Win32 Console Application建立一个控制台工程文件.</li>\n<li>由于CreatThread()等函数是Microsoft Windows操作系统的系统调用,因此,在下图中选择An application that supports MFC,之后单击Finish按钮.</li>\n</ol>\n<p><img src=\"/../images/3e8b77cd-3dac-468c-94a0-0da4b15803a3.png\" alt=\"在这里插入图片描述\"></p>\n<ol>\n<li>创建一个单线程操作并观看结果<br><img src=\"/../images/cdecf844-c7c0-4b59-8eb0-a90db0e708fb.png\" alt=\"在这里插入图片描述\"><br><img src=\"/../images/f01c088e-7663-4d75-aaef-4df7554944fe.png\" alt=\"在这里插入图片描述\"></li>\n<li>创建一个多线程操作，并观看结果<br><img src=\"/../images/f42ae8df-444c-4e5d-9fb8-f168dd28c1d1.png\" alt=\"在这里插入图片描述\"><br><img src=\"/../images/9309b62e-e0a3-408d-99aa-1a4f18a836b3.png\" alt=\"在这里插入图片描述\"></li>\n</ol>\n<h4 id=\"源程序\"><a href=\"#源程序\" class=\"headerlink\" title=\"源程序\"></a>源程序</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// test1.cpp : Defines the entry point for the console application.</span><br><span class=\"hljs-comment\">//</span><br><br>#include <span class=\"hljs-string\">&quot;stdafx.h&quot;</span><br>#include <span class=\"hljs-string\">&quot;test1.h&quot;</span><br><br>#ifdef _DEBUG<br>#define <span class=\"hljs-keyword\">new</span> <span class=\"hljs-variable constant_\">DEBUG_NEW</span><br>#undef <span class=\"hljs-variable constant_\">THIS_FILE</span><br><span class=\"hljs-keyword\">static</span> char <span class=\"hljs-variable constant_\">THIS_FILE</span>[] = __FILE__;<br>#endif<br><br>/<br><span class=\"hljs-comment\">// The one and only application object</span><br><br><span class=\"hljs-title class_\">CWinApp</span> theApp;<br><br>using namespace std;<br><br><br><br><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">eatApple</span>(<span class=\"hljs-params\">int apple_number</span>)<br>&#123;<br>    <br>\t<span class=\"hljs-title class_\">Sleep</span>((<span class=\"hljs-number\">3</span>-apple_number)*<span class=\"hljs-number\">1000</span>);<br>\t<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">&quot;i&#x27;m eating apple #%d.\\n&quot;</span>, apple_number);<br>&#125;<br><br><br>int <span class=\"hljs-title function_\">_tmain</span>(<span class=\"hljs-params\">int argc, TCHAR* argv[], TCHAR* envp[]</span>)<br>&#123;<br>    <br>\t<span class=\"hljs-variable constant_\">HANDLE</span> handle1 = <span class=\"hljs-variable constant_\">NULL</span>;<br>\t<span class=\"hljs-variable constant_\">HANDLE</span> handle2 = <span class=\"hljs-variable constant_\">NULL</span>;<br>\t<span class=\"hljs-variable constant_\">HANDLE</span> handle3 = <span class=\"hljs-variable constant_\">NULL</span>;<br>\t<span class=\"hljs-variable constant_\">DWORD</span> <span class=\"hljs-title class_\">ThreadID1</span> = <span class=\"hljs-variable constant_\">NULL</span>;<br>\t<span class=\"hljs-variable constant_\">DWORD</span> <span class=\"hljs-title class_\">ThreadID2</span> = <span class=\"hljs-variable constant_\">NULL</span>;<br>\t<span class=\"hljs-variable constant_\">DWORD</span> <span class=\"hljs-title class_\">ThreadID3</span> = <span class=\"hljs-variable constant_\">NULL</span>;<br><br>\tint nRetCode;<br><br>\tint a = <span class=\"hljs-number\">0</span>;<br>\tint b = <span class=\"hljs-number\">1</span>;<br>\tint c = <span class=\"hljs-number\">2</span>;<br>\t<br>\thandle1 = <span class=\"hljs-title class_\">CreateThread</span>((<span class=\"hljs-variable constant_\">LPSECURITY_ATTRIBUTES</span>) <span class=\"hljs-variable constant_\">NULL</span>,<br>\t\t<span class=\"hljs-number\">0</span>,<br>\t\t(<span class=\"hljs-variable constant_\">LPTHREAD_START_ROUTINE</span>) eatApple,<br>\t\t(<span class=\"hljs-variable constant_\">LPVOID</span>) a,<br>\t\t<span class=\"hljs-number\">0</span>,<br>\t\t&amp;<span class=\"hljs-title class_\">ThreadID1</span>);<br>\t<br>\thandle2 = <span class=\"hljs-title class_\">CreateThread</span>((<span class=\"hljs-variable constant_\">LPSECURITY_ATTRIBUTES</span>) <span class=\"hljs-variable constant_\">NULL</span>,<br>\t\t<span class=\"hljs-number\">0</span>,<br>\t\t(<span class=\"hljs-variable constant_\">LPTHREAD_START_ROUTINE</span>) eatApple,<br>\t\t(<span class=\"hljs-variable constant_\">LPVOID</span>) b,<br>\t\t<span class=\"hljs-number\">0</span>,<br>\t\t&amp;<span class=\"hljs-title class_\">ThreadID2</span>);<br>\t<br>\thandle3 = <span class=\"hljs-title class_\">CreateThread</span>((<span class=\"hljs-variable constant_\">LPSECURITY_ATTRIBUTES</span>) <span class=\"hljs-variable constant_\">NULL</span>,<br>\t\t<span class=\"hljs-number\">0</span>,<br>\t\t(<span class=\"hljs-variable constant_\">LPTHREAD_START_ROUTINE</span>) eatApple,<br>\t\t(<span class=\"hljs-variable constant_\">LPVOID</span>) c,<br>\t\t<span class=\"hljs-number\">0</span>,<br>\t\t&amp;<span class=\"hljs-title class_\">ThreadID3</span>);<br>\t<span class=\"hljs-title class_\">Sleep</span>(<span class=\"hljs-number\">10000</span>);<br>\t<span class=\"hljs-keyword\">return</span> nRetCode;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h3><p>在Windows系统中进程是资源的拥有者,线程是系统调用的单位.进程创建后,其主线程也随即被创建.但是单线程只能执行完一个之后再执行另外一个线程，而多线程在一定程度上是多个线程一起执行的。</p>\n"},{"title":"螺旋矩阵——蓝桥杯模拟题","author":null,"date":"2020-04-18T09:50:40.000Z","_content":"### 题目\n\n问题描述\n\n对于一个 n 行 m 列的表格，我们可以使用螺旋的方式给表格依次填上正整数，我们称填好的表格为一个螺旋矩阵。\n例如，一个 4 行 5 列的螺旋矩阵如下：\n```js \n1  2  3  4 5\n14 15 16 17 6\n13 20 19 18 7\n12 11 10  9 8\n```\n\n输入格式\n\n输入的第一行包含两个整数 n, m，分别表示螺旋矩阵的行数和列数。\n第二行包含两个整数 r, c，表示要求的行号和列号。\n\n输出格式\n\n输出一个整数，表示螺旋矩阵中第 r 行第 c 列的元素的值。\n\n样例输入\n\n4 5\n2 2\n\n样例输出\n\n15\n\n评测用例规模与约定\n\n对于 30% 的评测用例，2 <= n, m <= 20。\n对于 70% 的评测用例，2 <= n, m <= 100。\n对于所有评测用例，2 <= n, m <= 1000，1 <= r <= n，1 <= c <= m。\n\n### 问题分析\n\n我们只需要知道某个特定位置的值，所以我们并不需要建立二维数组去存储每一个值。\n\n### 解题思路\n\n按照矩阵螺旋的方向去遍历每一个行列的坐标，直到找到我们想要的坐标，然后输出相对应的值。\n\n利用for循环遍历行，列，行，列，并且使用 k 表示当前位置的值。\n\n### Java代码\n\n```js \nimport java.util.Scanner;\n\npublic class Main {\n    \n\tpublic static void main(String[] args) {\n    \n\t\t\n\t\tScanner scanner = new Scanner(System.in);\n\t\t\n\t\tint n,m,r,c;  \n\t\tint i,j,k;\n\t\tint flag1,flag2;\n\t\tn = scanner.nextInt();\n\t\tm = scanner.nextInt();\n\t\tr = scanner.nextInt();\n\t\tc = scanner.nextInt();\n\t\tscanner.close();\n\t\t\n\t\tflag1 = n;\t//flag1用来控制行数范围\n\t\tflag2 = m;\t//flag2用来控制列数范围\n\t\t\n\t\t\n\t\t//k表示当前位置的值\n\t\t//i表示当前所在行\n\t\t//j表示当前所在列\n\t\tfor (k = 1, i=1, j=1; k <= n*m ; ) {\n    \n\t\t\tfor( ; j <= flag2; j++) {\n       \t//行从左向右开始遍历\n\t\t\t\tif( (i == r) && (j == c)) {\n    \n\t\t\t\t\tSystem.out.println(k);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tj--;\n\t\t\tfor(i = i+1 ; i <= flag1; i++) {\n    //列从上向下开始遍历\n\t\t\t\tif( (i == r) && (j == c)) {\n    \n\t\t\t\t\tSystem.out.println(k);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tk++;\n\t\t\t}\n\t\t\ti--;\n\t\t\tfor(j = j-1; j > m-flag2 ; j--) {\n    //行从右向左开始遍历\n\t\t\t\tif( (i == r) && (j == c)) {\n    \n\t\t\t\t\tSystem.out.println(k);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tj++;\n\t\t\tfor(i = i-1; i > n-flag1+1; i--) {\n    //列从下向上开始遍历\n\t\t\t\tif( (i == r) && (j == c)) {\n    \n\t\t\t\t\tSystem.out.println(k);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tk++;\n\t\t\t}\n\t\t\ti++;\n\t\t\tj++;\n\t\t\tflag1--;\n\t\t\tflag2--;\n\t\t}\n\t}\n}\n```\n\n### PS\n\n因为写这篇博客的时候还不知道这题过没过，仅测试了部分数据，如果问题，call me","source":"_posts/螺旋矩阵——蓝桥杯模拟题.md","raw":"---\ntitle: 螺旋矩阵——蓝桥杯模拟题\nauthor: \ntags: \n       - java\n\ncategory: \n       - 算法\n\ndate: 2020-04-18 17:50:40\n---\n### 题目\n\n问题描述\n\n对于一个 n 行 m 列的表格，我们可以使用螺旋的方式给表格依次填上正整数，我们称填好的表格为一个螺旋矩阵。\n例如，一个 4 行 5 列的螺旋矩阵如下：\n```js \n1  2  3  4 5\n14 15 16 17 6\n13 20 19 18 7\n12 11 10  9 8\n```\n\n输入格式\n\n输入的第一行包含两个整数 n, m，分别表示螺旋矩阵的行数和列数。\n第二行包含两个整数 r, c，表示要求的行号和列号。\n\n输出格式\n\n输出一个整数，表示螺旋矩阵中第 r 行第 c 列的元素的值。\n\n样例输入\n\n4 5\n2 2\n\n样例输出\n\n15\n\n评测用例规模与约定\n\n对于 30% 的评测用例，2 <= n, m <= 20。\n对于 70% 的评测用例，2 <= n, m <= 100。\n对于所有评测用例，2 <= n, m <= 1000，1 <= r <= n，1 <= c <= m。\n\n### 问题分析\n\n我们只需要知道某个特定位置的值，所以我们并不需要建立二维数组去存储每一个值。\n\n### 解题思路\n\n按照矩阵螺旋的方向去遍历每一个行列的坐标，直到找到我们想要的坐标，然后输出相对应的值。\n\n利用for循环遍历行，列，行，列，并且使用 k 表示当前位置的值。\n\n### Java代码\n\n```js \nimport java.util.Scanner;\n\npublic class Main {\n    \n\tpublic static void main(String[] args) {\n    \n\t\t\n\t\tScanner scanner = new Scanner(System.in);\n\t\t\n\t\tint n,m,r,c;  \n\t\tint i,j,k;\n\t\tint flag1,flag2;\n\t\tn = scanner.nextInt();\n\t\tm = scanner.nextInt();\n\t\tr = scanner.nextInt();\n\t\tc = scanner.nextInt();\n\t\tscanner.close();\n\t\t\n\t\tflag1 = n;\t//flag1用来控制行数范围\n\t\tflag2 = m;\t//flag2用来控制列数范围\n\t\t\n\t\t\n\t\t//k表示当前位置的值\n\t\t//i表示当前所在行\n\t\t//j表示当前所在列\n\t\tfor (k = 1, i=1, j=1; k <= n*m ; ) {\n    \n\t\t\tfor( ; j <= flag2; j++) {\n       \t//行从左向右开始遍历\n\t\t\t\tif( (i == r) && (j == c)) {\n    \n\t\t\t\t\tSystem.out.println(k);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tj--;\n\t\t\tfor(i = i+1 ; i <= flag1; i++) {\n    //列从上向下开始遍历\n\t\t\t\tif( (i == r) && (j == c)) {\n    \n\t\t\t\t\tSystem.out.println(k);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tk++;\n\t\t\t}\n\t\t\ti--;\n\t\t\tfor(j = j-1; j > m-flag2 ; j--) {\n    //行从右向左开始遍历\n\t\t\t\tif( (i == r) && (j == c)) {\n    \n\t\t\t\t\tSystem.out.println(k);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tj++;\n\t\t\tfor(i = i-1; i > n-flag1+1; i--) {\n    //列从下向上开始遍历\n\t\t\t\tif( (i == r) && (j == c)) {\n    \n\t\t\t\t\tSystem.out.println(k);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tk++;\n\t\t\t}\n\t\t\ti++;\n\t\t\tj++;\n\t\t\tflag1--;\n\t\t\tflag2--;\n\t\t}\n\t}\n}\n```\n\n### PS\n\n因为写这篇博客的时候还不知道这题过没过，仅测试了部分数据，如果问题，call me","slug":"螺旋矩阵——蓝桥杯模拟题","published":1,"updated":"2024-03-15T08:24:03.174Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clttq59c9003dzwve0tvs5xp0","content":"<h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>问题描述</p>\n<p>对于一个 n 行 m 列的表格，我们可以使用螺旋的方式给表格依次填上正整数，我们称填好的表格为一个螺旋矩阵。<br>例如，一个 4 行 5 列的螺旋矩阵如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-number\">2</span>  <span class=\"hljs-number\">3</span>  <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">5</span><br><span class=\"hljs-number\">14</span> <span class=\"hljs-number\">15</span> <span class=\"hljs-number\">16</span> <span class=\"hljs-number\">17</span> <span class=\"hljs-number\">6</span><br><span class=\"hljs-number\">13</span> <span class=\"hljs-number\">20</span> <span class=\"hljs-number\">19</span> <span class=\"hljs-number\">18</span> <span class=\"hljs-number\">7</span><br><span class=\"hljs-number\">12</span> <span class=\"hljs-number\">11</span> <span class=\"hljs-number\">10</span>  <span class=\"hljs-number\">9</span> <span class=\"hljs-number\">8</span><br></code></pre></td></tr></table></figure>\n\n<p>输入格式</p>\n<p>输入的第一行包含两个整数 n, m，分别表示螺旋矩阵的行数和列数。<br>第二行包含两个整数 r, c，表示要求的行号和列号。</p>\n<p>输出格式</p>\n<p>输出一个整数，表示螺旋矩阵中第 r 行第 c 列的元素的值。</p>\n<p>样例输入</p>\n<p>4 5<br>2 2</p>\n<p>样例输出</p>\n<p>15</p>\n<p>评测用例规模与约定</p>\n<p>对于 30% 的评测用例，2 &lt;&#x3D; n, m &lt;&#x3D; 20。<br>对于 70% 的评测用例，2 &lt;&#x3D; n, m &lt;&#x3D; 100。<br>对于所有评测用例，2 &lt;&#x3D; n, m &lt;&#x3D; 1000，1 &lt;&#x3D; r &lt;&#x3D; n，1 &lt;&#x3D; c &lt;&#x3D; m。</p>\n<h3 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h3><p>我们只需要知道某个特定位置的值，所以我们并不需要建立二维数组去存储每一个值。</p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>按照矩阵螺旋的方向去遍历每一个行列的坐标，直到找到我们想要的坐标，然后输出相对应的值。</p>\n<p>利用for循环遍历行，列，行，列，并且使用 k 表示当前位置的值。</p>\n<h3 id=\"Java代码\"><a href=\"#Java代码\" class=\"headerlink\" title=\"Java代码\"></a>Java代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">util</span>.<span class=\"hljs-property\">Scanner</span>;<br><br>public <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Main</span> &#123;<br>    <br>\tpublic <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span>[] args</span>) &#123;<br>    <br>\t\t<br>\t\t<span class=\"hljs-title class_\">Scanner</span> scanner = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">in</span>);<br>\t\t<br>\t\tint n,m,r,c;  <br>\t\tint i,j,k;<br>\t\tint flag1,flag2;<br>\t\tn = scanner.<span class=\"hljs-title function_\">nextInt</span>();<br>\t\tm = scanner.<span class=\"hljs-title function_\">nextInt</span>();<br>\t\tr = scanner.<span class=\"hljs-title function_\">nextInt</span>();<br>\t\tc = scanner.<span class=\"hljs-title function_\">nextInt</span>();<br>\t\tscanner.<span class=\"hljs-title function_\">close</span>();<br>\t\t<br>\t\tflag1 = n;\t<span class=\"hljs-comment\">//flag1用来控制行数范围</span><br>\t\tflag2 = m;\t<span class=\"hljs-comment\">//flag2用来控制列数范围</span><br>\t\t<br>\t\t<br>\t\t<span class=\"hljs-comment\">//k表示当前位置的值</span><br>\t\t<span class=\"hljs-comment\">//i表示当前所在行</span><br>\t\t<span class=\"hljs-comment\">//j表示当前所在列</span><br>\t\t<span class=\"hljs-keyword\">for</span> (k = <span class=\"hljs-number\">1</span>, i=<span class=\"hljs-number\">1</span>, j=<span class=\"hljs-number\">1</span>; k &lt;= n*m ; ) &#123;<br>    <br>\t\t\t<span class=\"hljs-keyword\">for</span>( ; j &lt;= flag2; j++) &#123;<br>       \t<span class=\"hljs-comment\">//行从左向右开始遍历</span><br>\t\t\t\t<span class=\"hljs-keyword\">if</span>( (i == r) &amp;&amp; (j == c)) &#123;<br>    <br>\t\t\t\t\t<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(k);<br>\t\t\t\t\t<span class=\"hljs-keyword\">return</span>;<br>\t\t\t\t&#125;<br>\t\t\t\tk++;<br>\t\t\t&#125;<br>\t\t\tj--;<br>\t\t\t<span class=\"hljs-keyword\">for</span>(i = i+<span class=\"hljs-number\">1</span> ; i &lt;= flag1; i++) &#123;<br>    <span class=\"hljs-comment\">//列从上向下开始遍历</span><br>\t\t\t\t<span class=\"hljs-keyword\">if</span>( (i == r) &amp;&amp; (j == c)) &#123;<br>    <br>\t\t\t\t\t<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(k);<br>\t\t\t\t\t<span class=\"hljs-keyword\">return</span>;<br>\t\t\t\t&#125;<br>\t\t\t\tk++;<br>\t\t\t&#125;<br>\t\t\ti--;<br>\t\t\t<span class=\"hljs-keyword\">for</span>(j = j-<span class=\"hljs-number\">1</span>; j &gt; m-flag2 ; j--) &#123;<br>    <span class=\"hljs-comment\">//行从右向左开始遍历</span><br>\t\t\t\t<span class=\"hljs-keyword\">if</span>( (i == r) &amp;&amp; (j == c)) &#123;<br>    <br>\t\t\t\t\t<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(k);<br>\t\t\t\t\t<span class=\"hljs-keyword\">return</span>;<br>\t\t\t\t&#125;<br>\t\t\t\tk++;<br>\t\t\t&#125;<br>\t\t\tj++;<br>\t\t\t<span class=\"hljs-keyword\">for</span>(i = i-<span class=\"hljs-number\">1</span>; i &gt; n-flag1+<span class=\"hljs-number\">1</span>; i--) &#123;<br>    <span class=\"hljs-comment\">//列从下向上开始遍历</span><br>\t\t\t\t<span class=\"hljs-keyword\">if</span>( (i == r) &amp;&amp; (j == c)) &#123;<br>    <br>\t\t\t\t\t<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(k);<br>\t\t\t\t\t<span class=\"hljs-keyword\">return</span>;<br>\t\t\t\t&#125;<br>\t\t\t\tk++;<br>\t\t\t&#125;<br>\t\t\ti++;<br>\t\t\tj++;<br>\t\t\tflag1--;<br>\t\t\tflag2--;<br>\t\t&#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"PS\"><a href=\"#PS\" class=\"headerlink\" title=\"PS\"></a>PS</h3><p>因为写这篇博客的时候还不知道这题过没过，仅测试了部分数据，如果问题，call me</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>问题描述</p>\n<p>对于一个 n 行 m 列的表格，我们可以使用螺旋的方式给表格依次填上正整数，我们称填好的表格为一个螺旋矩阵。<br>例如，一个 4 行 5 列的螺旋矩阵如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-number\">1</span>  <span class=\"hljs-number\">2</span>  <span class=\"hljs-number\">3</span>  <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">5</span><br><span class=\"hljs-number\">14</span> <span class=\"hljs-number\">15</span> <span class=\"hljs-number\">16</span> <span class=\"hljs-number\">17</span> <span class=\"hljs-number\">6</span><br><span class=\"hljs-number\">13</span> <span class=\"hljs-number\">20</span> <span class=\"hljs-number\">19</span> <span class=\"hljs-number\">18</span> <span class=\"hljs-number\">7</span><br><span class=\"hljs-number\">12</span> <span class=\"hljs-number\">11</span> <span class=\"hljs-number\">10</span>  <span class=\"hljs-number\">9</span> <span class=\"hljs-number\">8</span><br></code></pre></td></tr></table></figure>\n\n<p>输入格式</p>\n<p>输入的第一行包含两个整数 n, m，分别表示螺旋矩阵的行数和列数。<br>第二行包含两个整数 r, c，表示要求的行号和列号。</p>\n<p>输出格式</p>\n<p>输出一个整数，表示螺旋矩阵中第 r 行第 c 列的元素的值。</p>\n<p>样例输入</p>\n<p>4 5<br>2 2</p>\n<p>样例输出</p>\n<p>15</p>\n<p>评测用例规模与约定</p>\n<p>对于 30% 的评测用例，2 &lt;&#x3D; n, m &lt;&#x3D; 20。<br>对于 70% 的评测用例，2 &lt;&#x3D; n, m &lt;&#x3D; 100。<br>对于所有评测用例，2 &lt;&#x3D; n, m &lt;&#x3D; 1000，1 &lt;&#x3D; r &lt;&#x3D; n，1 &lt;&#x3D; c &lt;&#x3D; m。</p>\n<h3 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h3><p>我们只需要知道某个特定位置的值，所以我们并不需要建立二维数组去存储每一个值。</p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>按照矩阵螺旋的方向去遍历每一个行列的坐标，直到找到我们想要的坐标，然后输出相对应的值。</p>\n<p>利用for循环遍历行，列，行，列，并且使用 k 表示当前位置的值。</p>\n<h3 id=\"Java代码\"><a href=\"#Java代码\" class=\"headerlink\" title=\"Java代码\"></a>Java代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">util</span>.<span class=\"hljs-property\">Scanner</span>;<br><br>public <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Main</span> &#123;<br>    <br>\tpublic <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span>[] args</span>) &#123;<br>    <br>\t\t<br>\t\t<span class=\"hljs-title class_\">Scanner</span> scanner = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">in</span>);<br>\t\t<br>\t\tint n,m,r,c;  <br>\t\tint i,j,k;<br>\t\tint flag1,flag2;<br>\t\tn = scanner.<span class=\"hljs-title function_\">nextInt</span>();<br>\t\tm = scanner.<span class=\"hljs-title function_\">nextInt</span>();<br>\t\tr = scanner.<span class=\"hljs-title function_\">nextInt</span>();<br>\t\tc = scanner.<span class=\"hljs-title function_\">nextInt</span>();<br>\t\tscanner.<span class=\"hljs-title function_\">close</span>();<br>\t\t<br>\t\tflag1 = n;\t<span class=\"hljs-comment\">//flag1用来控制行数范围</span><br>\t\tflag2 = m;\t<span class=\"hljs-comment\">//flag2用来控制列数范围</span><br>\t\t<br>\t\t<br>\t\t<span class=\"hljs-comment\">//k表示当前位置的值</span><br>\t\t<span class=\"hljs-comment\">//i表示当前所在行</span><br>\t\t<span class=\"hljs-comment\">//j表示当前所在列</span><br>\t\t<span class=\"hljs-keyword\">for</span> (k = <span class=\"hljs-number\">1</span>, i=<span class=\"hljs-number\">1</span>, j=<span class=\"hljs-number\">1</span>; k &lt;= n*m ; ) &#123;<br>    <br>\t\t\t<span class=\"hljs-keyword\">for</span>( ; j &lt;= flag2; j++) &#123;<br>       \t<span class=\"hljs-comment\">//行从左向右开始遍历</span><br>\t\t\t\t<span class=\"hljs-keyword\">if</span>( (i == r) &amp;&amp; (j == c)) &#123;<br>    <br>\t\t\t\t\t<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(k);<br>\t\t\t\t\t<span class=\"hljs-keyword\">return</span>;<br>\t\t\t\t&#125;<br>\t\t\t\tk++;<br>\t\t\t&#125;<br>\t\t\tj--;<br>\t\t\t<span class=\"hljs-keyword\">for</span>(i = i+<span class=\"hljs-number\">1</span> ; i &lt;= flag1; i++) &#123;<br>    <span class=\"hljs-comment\">//列从上向下开始遍历</span><br>\t\t\t\t<span class=\"hljs-keyword\">if</span>( (i == r) &amp;&amp; (j == c)) &#123;<br>    <br>\t\t\t\t\t<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(k);<br>\t\t\t\t\t<span class=\"hljs-keyword\">return</span>;<br>\t\t\t\t&#125;<br>\t\t\t\tk++;<br>\t\t\t&#125;<br>\t\t\ti--;<br>\t\t\t<span class=\"hljs-keyword\">for</span>(j = j-<span class=\"hljs-number\">1</span>; j &gt; m-flag2 ; j--) &#123;<br>    <span class=\"hljs-comment\">//行从右向左开始遍历</span><br>\t\t\t\t<span class=\"hljs-keyword\">if</span>( (i == r) &amp;&amp; (j == c)) &#123;<br>    <br>\t\t\t\t\t<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(k);<br>\t\t\t\t\t<span class=\"hljs-keyword\">return</span>;<br>\t\t\t\t&#125;<br>\t\t\t\tk++;<br>\t\t\t&#125;<br>\t\t\tj++;<br>\t\t\t<span class=\"hljs-keyword\">for</span>(i = i-<span class=\"hljs-number\">1</span>; i &gt; n-flag1+<span class=\"hljs-number\">1</span>; i--) &#123;<br>    <span class=\"hljs-comment\">//列从下向上开始遍历</span><br>\t\t\t\t<span class=\"hljs-keyword\">if</span>( (i == r) &amp;&amp; (j == c)) &#123;<br>    <br>\t\t\t\t\t<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(k);<br>\t\t\t\t\t<span class=\"hljs-keyword\">return</span>;<br>\t\t\t\t&#125;<br>\t\t\t\tk++;<br>\t\t\t&#125;<br>\t\t\ti++;<br>\t\t\tj++;<br>\t\t\tflag1--;<br>\t\t\tflag2--;<br>\t\t&#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"PS\"><a href=\"#PS\" class=\"headerlink\" title=\"PS\"></a>PS</h3><p>因为写这篇博客的时候还不知道这题过没过，仅测试了部分数据，如果问题，call me</p>\n"},{"title":"计算力扣银行的钱（leetcode1716）","author":null,"date":"2022-01-15T09:45:09.000Z","_content":"#### 前言\n\neasy题我重拳出击！\n\n#### 题目\n\nHercy 想要为购买第一辆车存钱。他 每天 都往力扣银行里存钱。\n\n最开始，他在周一的时候存入 1 块钱。从周二到周日，他每天都比前一天多存入 1 块钱。在接下来每一个周一，他都会比 前一个周一 多存入 1 块钱。\n\n给你 n ，请你返回在第 n 天结束的时候他在力扣银行总共存了多少块钱。\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/calculate-money-in-leetcode-bank\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\n点击跳转题目https://leetcode-cn.com/problems/calculate-money-in-leetcode-bank/\n\n#### 思路\n\n简单的等差数列公式。\n\n#### 代码\n\nelse语句中\n第一部分为所有完整周的原始形态的值，\n第二部分为所有完整周的增加部分的值，\n第三部分为剩余天数的值。\n \n```js \nclass Solution {\n    \npublic:\n    int totalMoney(int n) {\n    \n        if(n<=7){\n    \n            return (1+n)*n/2;\n        }\n        else{\n    \n            return (n/7*28 + 7*(n/7-1)*(n/7)/2 + (1+n-n/7*7 + 2*(n/7))*(n-n/7*7)/2);\n        }\n    }\n};\n```","source":"_posts/计算力扣银行的钱（leetcode1716）.md","raw":"---\ntitle: 计算力扣银行的钱（leetcode1716）\nauthor: \ntags: \n       - 算法\n\ncategory: \n       - 算法\n\ndate: 2022-01-15 17:45:09\n---\n#### 前言\n\neasy题我重拳出击！\n\n#### 题目\n\nHercy 想要为购买第一辆车存钱。他 每天 都往力扣银行里存钱。\n\n最开始，他在周一的时候存入 1 块钱。从周二到周日，他每天都比前一天多存入 1 块钱。在接下来每一个周一，他都会比 前一个周一 多存入 1 块钱。\n\n给你 n ，请你返回在第 n 天结束的时候他在力扣银行总共存了多少块钱。\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/calculate-money-in-leetcode-bank\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\n点击跳转题目https://leetcode-cn.com/problems/calculate-money-in-leetcode-bank/\n\n#### 思路\n\n简单的等差数列公式。\n\n#### 代码\n\nelse语句中\n第一部分为所有完整周的原始形态的值，\n第二部分为所有完整周的增加部分的值，\n第三部分为剩余天数的值。\n \n```js \nclass Solution {\n    \npublic:\n    int totalMoney(int n) {\n    \n        if(n<=7){\n    \n            return (1+n)*n/2;\n        }\n        else{\n    \n            return (n/7*28 + 7*(n/7-1)*(n/7)/2 + (1+n-n/7*7 + 2*(n/7))*(n-n/7*7)/2);\n        }\n    }\n};\n```","slug":"计算力扣银行的钱（leetcode1716）","published":1,"updated":"2024-03-15T08:23:33.845Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clttq59ca003hzwve9iyi9jo7","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>easy题我重拳出击！</p>\n<h4 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h4><p>Hercy 想要为购买第一辆车存钱。他 每天 都往力扣银行里存钱。</p>\n<p>最开始，他在周一的时候存入 1 块钱。从周二到周日，他每天都比前一天多存入 1 块钱。在接下来每一个周一，他都会比 前一个周一 多存入 1 块钱。</p>\n<p>给你 n ，请你返回在第 n 天结束的时候他在力扣银行总共存了多少块钱。</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/calculate-money-in-leetcode-bank\">https://leetcode-cn.com/problems/calculate-money-in-leetcode-bank</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。<br>点击跳转题目<a href=\"https://leetcode-cn.com/problems/calculate-money-in-leetcode-bank/\">https://leetcode-cn.com/problems/calculate-money-in-leetcode-bank/</a></p>\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>简单的等差数列公式。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><p>else语句中<br>第一部分为所有完整周的原始形态的值，<br>第二部分为所有完整周的增加部分的值，<br>第三部分为剩余天数的值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br>    <br><span class=\"hljs-attr\">public</span>:<br>    int <span class=\"hljs-title function_\">totalMoney</span>(<span class=\"hljs-params\">int n</span>) &#123;<br>    <br>        <span class=\"hljs-keyword\">if</span>(n&lt;=<span class=\"hljs-number\">7</span>)&#123;<br>    <br>            <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">1</span>+n)*n/<span class=\"hljs-number\">2</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span>&#123;<br>    <br>            <span class=\"hljs-keyword\">return</span> (n/<span class=\"hljs-number\">7</span>*<span class=\"hljs-number\">28</span> + <span class=\"hljs-number\">7</span>*(n/<span class=\"hljs-number\">7</span>-<span class=\"hljs-number\">1</span>)*(n/<span class=\"hljs-number\">7</span>)/<span class=\"hljs-number\">2</span> + (<span class=\"hljs-number\">1</span>+n-n/<span class=\"hljs-number\">7</span>*<span class=\"hljs-number\">7</span> + <span class=\"hljs-number\">2</span>*(n/<span class=\"hljs-number\">7</span>))*(n-n/<span class=\"hljs-number\">7</span>*<span class=\"hljs-number\">7</span>)/<span class=\"hljs-number\">2</span>);<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>easy题我重拳出击！</p>\n<h4 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h4><p>Hercy 想要为购买第一辆车存钱。他 每天 都往力扣银行里存钱。</p>\n<p>最开始，他在周一的时候存入 1 块钱。从周二到周日，他每天都比前一天多存入 1 块钱。在接下来每一个周一，他都会比 前一个周一 多存入 1 块钱。</p>\n<p>给你 n ，请你返回在第 n 天结束的时候他在力扣银行总共存了多少块钱。</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/calculate-money-in-leetcode-bank\">https://leetcode-cn.com/problems/calculate-money-in-leetcode-bank</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。<br>点击跳转题目<a href=\"https://leetcode-cn.com/problems/calculate-money-in-leetcode-bank/\">https://leetcode-cn.com/problems/calculate-money-in-leetcode-bank/</a></p>\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>简单的等差数列公式。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><p>else语句中<br>第一部分为所有完整周的原始形态的值，<br>第二部分为所有完整周的增加部分的值，<br>第三部分为剩余天数的值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br>    <br><span class=\"hljs-attr\">public</span>:<br>    int <span class=\"hljs-title function_\">totalMoney</span>(<span class=\"hljs-params\">int n</span>) &#123;<br>    <br>        <span class=\"hljs-keyword\">if</span>(n&lt;=<span class=\"hljs-number\">7</span>)&#123;<br>    <br>            <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">1</span>+n)*n/<span class=\"hljs-number\">2</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span>&#123;<br>    <br>            <span class=\"hljs-keyword\">return</span> (n/<span class=\"hljs-number\">7</span>*<span class=\"hljs-number\">28</span> + <span class=\"hljs-number\">7</span>*(n/<span class=\"hljs-number\">7</span>-<span class=\"hljs-number\">1</span>)*(n/<span class=\"hljs-number\">7</span>)/<span class=\"hljs-number\">2</span> + (<span class=\"hljs-number\">1</span>+n-n/<span class=\"hljs-number\">7</span>*<span class=\"hljs-number\">7</span> + <span class=\"hljs-number\">2</span>*(n/<span class=\"hljs-number\">7</span>))*(n-n/<span class=\"hljs-number\">7</span>*<span class=\"hljs-number\">7</span>)/<span class=\"hljs-number\">2</span>);<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>"},{"title":"识别图中模糊的手写数字（菜鸟做法）","author":null,"date":"2020-11-29T06:59:44.000Z","_content":"#### 预备知识\n\npython语言基础\n\n#### 目标\n\n导入图片数据集，分析图片的特点、定义变量，构建模型，训练模型并输出中间状态参数，测试、保存、读取模型\n\n#### 如何搞定它\n\n##### 1.1导入图片数据集\n\n首先来看看数据集是什么样的。\nMNIST是一个入门级的计算机视觉数据集。当我们开始学习编程时，第一件事往往是学习打印Hello World。在机器学习入门的领域里，我们会用MNIST数据集来实验各种模型。\n\n1.1.1数据集介绍\n\nMNIST里包含各种手写数字图片，如图所示。\n![在这里插入图片描述](../images/7192d300-a66b-4804-9c83-4299a47a6021.png)\n它也包含每一张图片对应的标签，告诉我们这个是数字几。例如，上面这4张图片的标签分别是5、0、4、1。\n\n1.1.2下载并安装MNIST数据集\n\n介绍完MNIST数据集后，下面来演示一下如何通过代码来对其操作。\n\n（1）利用TensorFlow代码下载MNIST\n\nTensorFlow提供了一个库，可以直接用来自动下载与安装MNIST，见如下代码：\n```js \n# MNIST数据集\nfrom tensorflow.examples.tutorials.mnist import input_data\nmnist=input_data.read_data_sets(\"MNIST_data/\",one_hot=True))\n```\n\n```js \n运行上面的代码，会自动下载数据集并将文件解压到当前代码所在同级目录下的MNIST_data文件夹下。\n注意：代码中的one_hot=True，表示将样本标签转化为one_hot编码。\n```\n\n举例来解释one_hot编码：\n假如一共10类。0的one_hot为1000000000，1的one_hot为0100000000，2的one_hot为0010000000，3的one_hot为0001000000……依此类推。只有一个位为1，1所在的位置就代表着第几类。\n\nMNIST数据集中的图片是28×28像素，所以，每一幅图就是1行784（28×28）列的数据，括号中的每一个值代表一个像素。\n\n* 如果是黑白的图片，图片中黑色的地方数值为0；有图案的地方，数值为0～255之间的数字，代表其颜色的深度。\n* 如果是彩色的图片，一个像素会由3个值来表示RGB（红、黄、蓝）。在后面讲解其他数据集时会具体讲到。\n\n接下来通过几行代码将MNIST里面的信息打印出来，看看它的具体内容。\n```js \n# MNIST数据集（续）\nprint ('输入数据:',mnist.train.images)\nprint ('输入数据打印shape:',mnist.train.images.shape)\nimport pylab\nim = mnist.train.images[1]\nim = im.reshape(-1,28)\npylab.imshow(im)\npylab.show()\n```\n\n运行上面的代码，输出信息如下：\n\n输出结果如图所示\n![在这里插入图片描述](../images/147d32f7-4009-4b9f-bdb5-ba8d8e55dc6b.png)\n刚开始的打印信息是解压数据集的意思。如果是第一次运行，还会显示下载数据的相关信息。\n接着打印出来的是训练集的图片信息，是一个55000行、784列的矩阵。即，训练集里有55000张图片。\n\n（2）MNIST数据集组成\n\n在MNIST训练数据集中，mnist.train.images是一个形状为[55000，784]的张量。其中，第1个维度数字用来索引图片，第2个维度数字用来索引每张图片中的像素点。此张量里的每一个元素，都表示某张图片里的某个像素的强度值，值介于0～255之间。\nMNIST里包含3个数据集：第一个是训练数据集，另外两个分别是测试数据集（mnist.test）和验证数据集（mnist.validation）。可使用如下命令查看里面的数据信息：\n```js \nMNIST数据集（续）\nprint ('输入数据打印shape:',mnist.test.images.shape)\nprint ('输入数据打印shape:',mnist.validation.images.shape)\n```\n\n运行完上面的命令，可以发现在测试数据集里有10000条样本图片，验证数据集里有5000个图片。\n\n在实际的机器学习模型设计时，样本一般分为3部分：\n\n* 一部分用于训练；\n* 一部分用于评估训练过程中的准确度（测试数据集）；\n* 一部分用于评估最终模型的准确度（验证数据集）。\n\n训练过程中，模型并没有遇到过验证数据集中的数据，所以利用验证数据集可以评估出模型的准确度。这个准确度越高，代表模型的泛化能力越强。\n\n另外，这3个数据集还有分别对应的3个文件（标签文件），用来标注每个图片上的数字是几。把图片和标签放在一起，称为“样本”。通过样本来就可以实现一个有监督信号的深度学习模型。\n\n相对应的，MNIST数据集的标签是介于0～9之间的数字，用来描述给定图片里表示的数字。标签数据是“one-hot vectors”：一个one-hot向量，除了某一位的数字是1外，其余各维度数字都是0。例如，标签0将表示为（[1，0，0，0，0，0，0，0，0，0，0]）。因此，mnist.train.labels是一个[55000，10]的数字矩阵。\n\n##### 1.2分析图片的特点，定义变量\n\n由于输入图片是个55000×784的矩阵，所以先创建一个[None，784]的占位符x和一个[None，10]的占位符y，然后使用feed机制将图片和标签输入进去。具体代码如下。\n```js \n# MNIST分类\nimport tensorflow as tf  # 导入tensorflow库\nfrom tensorflow.examples.tutorials.mnist import input_data\nmnist = input_data.read_data_sets(\"MNIST_data/\",one_hot=True)\nimport pylab \ntf.reset_default_graph()\n# 定义占位符\nx = tf.placeholder(tf.float32, [None, 784]) # MNIST数据集的维度是  28×28=784\ny = tf.placeholder(tf.float32, [None, 10])  # 数字0～9 ，共10个类别\n#代码中第8行的None，表示此张量的第一个维度可以是任何长度的。x就代表能够输入任意数量的MNIST图像，每一张图展平成784维的向量。\n```\n\n##### 1.3构建模型\n\n样本完成后就可以构建模型了。下面列出了构建模型的相关步骤。\n\n1.3.1　定义学习参数\n\n模型也需要权重值和偏置量，它们被统一叫做学习参数。在TensorFlow里，使用Variable来定义学习参数。\n一个Variable代表一个可修改的张量，定义在TensorFlow的图（一个执行任务）中，其本身也是一种变量。使用Variable定义的学习参数可以用于计算输入值，也可以在计算中被修改。\n```js \n# MNIST分类（续）\nW = tf.Variable(tf.random_normal(([784,10]))\nb = tf.Variable(tf.zeros([10]))\n```\n\n在这里赋予tf.Variable不同的初值来创建不同的参数。一般将W设为一个随机值，将b设为0。\n注意：W的维度是[784，10]，因为想要用784维的图片向量乘以它，以得到一个10维的证据值向量，每一位对应不同数字类。b的形状是[10]，所以可以直接把它加到输出上面。\n\n1.3.2　定义输出节点\n\n有了输入和模型参数，接着便可以将它们串起来构建成真正的模型。\n```js \n# MNIST分类（续）\npred = tf.nn.softmax(tf.matmul(x, W) + b) # Softmax分类\n```\n\n首先，用tf.matmul（x，W）表示x乘以W，这里x是一个二维张量，拥有多个输入。然后再加上b，把它们的和输入到tf.nn.softmax函数里。\n至此就构建好了正向传播的结构。也就是表明，只要模型中的参数合适，通过具体的数据输入，就能得到我们想要的分类。\n\n1.3.3　定义反向传播的结构\n\n下面定义一个反向传播的结构，编译训练模型，以得到合适的参数。\n这里涉及一个“学习率”的概念。学习率，是指每次改变学习参数的大小。在这里读者只要先有个概念即可，后面章节还会详细介绍。\n先看下面代码。\n```js \n代码1-2　MNIST分类（续）\n# 损失函数\ncost=tf.reduce_mean(-tf.reduce_sum(y*tf.log(pred),reduction_indices=1))\n  \n# 定义参数\nlearning_rate = 0.01\n# 使用梯度下降优化器\noptimizer=tf.train.GradientDescentOptimizer(learning_rate).minimize(cost)\n```\n\n上面的代码可以这样来理解：\n（1）将生成的pred与样本标签y进行一次交叉熵的运算，然后取平均值。\n（2）将这个结果作为一次正向传播的误差，通过梯度下降的优化方法找到能够使这个误差最小化的b和W的偏移量。\n（3）更新b和W，使其调整为合适的参数。\n整个过程就是不断地让损失值（误差值cost）变小。因为损失值越小，才能表明输出的结果跟标签数据越相近。当cost小到我们的需求时，这时的b和W就是训练出来的合适值。\n\n##### 1.4　训练模型并输出中间状态参数\n\n现在开始真正地训练模型了，先定义训练相关的参数。\n下面代码中\n\n* 第1行中，training_epochs代表要把整个训练样本集迭代25次；\n* 第2行中，batch_size代表在训练过程中一次取100条数据进行训练\n* 第3行中，display_step代表每训练一次就把具体的中间状态显示出来。\n\n注意：batch_size参数代表的意义很关键，在深度学习中，都是将数据按批次地向里面放的。在后面章节中还会详细介绍这么做的目的。\n参数定义好后，启动一个session就可以开始训练过程了。session中有两个run，第一个run是运行初始化，第二个run是运行具体的运算模型。模型运算之后便将里面的状态打印出来。\n```js \ntraining_epochs = 25\nbatch_size = 100\ndisplay_step = 1\n\nsaver = tf.train.Saver()\nmodel_path = \"log/521model.ckpt\"\n\n# 启动session\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())# Initializing OP\n    # 启动循环开始训练\n    for epoch in range(training_epochs):\n        avg_cost = 0.\n        total_batch = int(mnist.train.num_examples/batch_size)\n        # 循环所有数据集\n        for i in range(total_batch):\n            batch_xs, batch_ys = mnist.train.next_batch(batch_size)\n            # 运行优化器\n            _, c = sess.run([optimizer, cost], feed_dict={\n    x: batch_xs,\n                                                       y: batch_ys})\n            # 计算平均loss值\n            avg_cost += c / total_batch\n        # 显示训练中的详细信息\n        if (epoch+1) % display_step == 0:\n           print (\"Epoch:\", '%04d' % (epoch+1), \"cost=\", \"{:.9f}\".            format(avg_cost))\n\n    print( \" Finished!\")\n```\n\n执行上面的代码，会输出如下信息：\n![在这里插入图片描述](../images/f05686cc-f555-45cc-af01-76a123f2838e.png)\n\n这里输出的中间状态是cost损失值。读者也可以把自己关心的内容打印出来。可以看到，从第1次迭代到第25次迭代的损失值在逐渐减小，最终的误差只有0.8。\n\n##### 1.5　测试模型\n\n还记得MNIST里面有测试数据吗？现在我们使用测试数据来测试一下训练完的模型吧。\n与前面的过程类似，也是先将计算测试的网络结构建立起来，然后通过最终节点的eval将测试值运算出来。\n注意：这个过程仍然是在session里进行的。\n测试错误率的算法是：直接判断预测的结果与真实的标签是否相同，如是相同的就表明是正确的，如是不相同的就表示是错误的。然后将正确的个数除以总个数，得到的值即为正确率。由于是onehot编码，这里使用了tf.argmax函数返回onehot编码中数值为1的那个元素的下标。下面是具体代码。\n```js \n#MNIST分类（续）\n    correct_prediction = tf.equal(tf.argmax(pred, 1), tf.argmax(y, 1))\n    # 计算准确率\n    accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n    print (\"Accuracy:\", accuracy.eval({\n    x: mnist.test.images, y: mnist.test.labels}))\n```\n\n上面代码执行后，显示信息如下：\n![在这里插入图片描述](../images/2bcb27c0-4e9d-4ea7-8de2-bd52513612ed.png)\n\n测试正确率的算法与损失值的算法略有差别，但代表的意义却很类似。当然，也可以直接拿计算损失值的交叉熵结果来代表模型测试的错误率。\n注意：\n（1）并不是所有模型的测试错误率和训练时的最后一次损失值都很接近，这取决于训练样本和测试样本的分布情况，也取决于模型本身的拟合质量。关于拟合质量问题，将在后面章节详细介绍。\n（2）读者自己运行时，得到的值可能和本书中的值不一样。甚至每次运行时，得到的值也不一样。原因是每次初始的权重w都是随机的。由于初始权重不同，而且每次训练的批次数据也不同，所以最终生成的模型也不会完全相同。但如果核心算法保持一致，则会保证最终的结果不会有太大的偏差。\n\n##### 1.6　保存模型\n\n下面开始讲解如何保存模型。\n首先要建立一个saver和一个路径，然后通过调用save，自动将session中的参数保存起来，见如下代码。\n```js \n# MNIST分类（续）   \n\t# 保存模型\n    save_path = saver.save(sess, model_path)\n    print(\"Model saved in file: %s\" % save_path)\n```\n\n上面代码的作用是保存模型，并将模型保存的路径打印出来。当然，在这段代码运行之前，需要添加saver和model_path的定义。来到前面session创建之前添加如下代码：\n\n```js \n# MNIST分类（续）\nsaver = tf.train.Saver()\nmodel_path = \"log/521model.ckpt\"\n```\n\n执行上述的全部代码后，会打印出存储位置\n![在这里插入图片描述](../images/48d4c89b-ee38-440f-a3da-638413985e4e.png)\n\n##### 1.7　读取模型\n\n将模型存储好后，下面来做一个实验：读取模型并将两张图片放进去让模型预测结果，然后将两张图片极其对应的标签一并显示出来。\n在整个代码执行过程中，对于网络模型的定义不变，只是重新建立一个session而已，所有的操作都在这个新的session中完成。具体细节见代码。\n```js \n#　MNIST分类（续）\nprint(\"Starting 2nd session...\")\nwith tf.Session() as sess:\n    # 初始化变量\n    sess.run(tf.global_variables_initializer())\n    # 恢复模型变量\n    saver.restore(sess, model_path)\n\n    # 测试 model\n    correct_prediction = tf.equal(tf.argmax(pred, 1), tf.argmax(y, 1))\n    # 计算准确率\n    accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n    print (\"Accuracy:\", accuracy.eval({\n    x: mnist.test.images, y: mnist.      test.labels}))\n\n    output = tf.argmax(pred, 1)\n    batch_xs, batch_ys = mnist.train.next_batch(2)\n    outputval,predv = sess.run([output,pred], feed_dict={\n    x: batch_xs})\n    print(outputval,predv,batch_ys)\n    im = batch_xs[0]\n    im = im.reshape(-1,28)\n    pylab.imshow(im)\n    pylab.show()\n\n    im = batch_xs[1]\n    im = im.reshape(-1,28)\n    pylab.imshow(im)\n    pylab.show()\n```\n\n以上代码可以替代原来的session，也可以直接放到代码后面，将前面的session注释掉。\n输出结果\n![在这里插入图片描述](../images/2323a693-45b2-4fda-98f3-a12bb2d71d5b.png)\n\n* 第一行是模型的准确率，接下来是3个数组。\n* 第一个数组是输出的预测结果[3,6]\n* 第二个大的数组比较大，是预测出来的真实输出值，哪一项数值越大，代表对应的概率越大.\n* 第三个大的数组元素都是0和1，是图片实际的标签值onehot编码表示的数字\n\n完整代码：\n```js \nimport tensorflow.compat.v1 as tf  # 导入tensorflow库#\ntf.disable_v2_behavior()\n\nfrom tensorflow.examples.tutorials.mnist import input_data\nmnist = input_data.read_data_sets(\"MNIST_data/\", one_hot=True)\n\n# print ('输入数据:',mnist.train.images)\n# print ('输入数据打印shape:',mnist.train.images.shape)\n\nimport pylab\nim = mnist.train.images[1]\nim = im.reshape(-1,28)\npylab.imshow(im)\npylab.show()\n# print ('输入数据打印shape:',mnist.test.images.shape)\n# print ('输入数据打印shape:',mnist.validation.images.shape)\n\ntf.reset_default_graph()\n# 定义占位符\nx = tf.placeholder(tf.float32, [None, 784]) # MNIST数据集的维度是  28×28=784\ny = tf.placeholder(tf.float32, [None, 10])  # 数字0～9 ，共10个类别\nW = tf.Variable(tf.random_normal([784,10]))\nb = tf.Variable(tf.zeros([10]))\npred = tf.nn.softmax(tf.matmul(x, W) + b) # Softmax分类\n\n# 损失函数\ncost=tf.reduce_mean(-tf.reduce_sum(y*tf.log(pred),reduction_indices=1))\n\n# 定义参数\nlearning_rate = 0.01\n# 使用梯度下降优化器\noptimizer=tf.train.GradientDescentOptimizer(learning_rate).minimize(cost)\ntraining_epochs = 25\nbatch_size = 100\ndisplay_step = 1\n\nsaver = tf.train.Saver()\nmodel_path = \"log/521model.ckpt\"\n\n# 启动session\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())# Initializing OP\n    # 启动循环开始训练\n    for epoch in range(training_epochs):\n        avg_cost = 0.\n        total_batch = int(mnist.train.num_examples/batch_size)\n        # 循环所有数据集\n        for i in range(total_batch):\n            batch_xs, batch_ys = mnist.train.next_batch(batch_size)\n            # 运行优化器\n            _, c = sess.run([optimizer, cost], feed_dict={\n    x: batch_xs,\n                                                       y: batch_ys})\n            # 计算平均loss值\n            avg_cost += c / total_batch\n        # 显示训练中的详细信息\n        if (epoch+1) % display_step == 0:\n           print (\"Epoch:\", '%04d' % (epoch+1), \"cost=\", \"{:.9f}\".            format(avg_cost))\n\n    print( \" Finished!\")\n    # 测试 model\n    correct_prediction = tf.equal(tf.argmax(pred, 1), tf.argmax(y, 1))\n    # 计算准确率\n    accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n    print (\"Accuracy:\", accuracy.eval({\n    x: mnist.test.images, y: mnist.test.labels}))\n\n    #     # 保存模型\n    save_path = saver.save(sess, model_path)\n    print(\"Model saved in file: %s\" % save_path)\n\nprint(\"Starting 2nd session...\")\nwith tf.Session() as sess:\n    # 初始化变量\n    sess.run(tf.global_variables_initializer())\n    # 恢复模型变量\n    saver.restore(sess, model_path)\n\n    # 测试 model\n    correct_prediction = tf.equal(tf.argmax(pred, 1), tf.argmax(y, 1))\n    # 计算准确率\n    accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n    print (\"Accuracy:\", accuracy.eval({\n    x: mnist.test.images, y: mnist.      test.labels}))\n\n    output = tf.argmax(pred, 1)\n    batch_xs, batch_ys = mnist.train.next_batch(2)\n    outputval,predv = sess.run([output,pred], feed_dict={\n    x: batch_xs})\n    print(outputval,predv,batch_ys)\n    im = batch_xs[0]\n    im = im.reshape(-1,28)\n    pylab.imshow(im)\n    pylab.show()\n\n    im = batch_xs[1]\n    im = im.reshape(-1,28)\n    pylab.imshow(im)\n    pylab.show()\n```","source":"_posts/识别图中模糊的手写数字（菜鸟做法）.md","raw":"---\ntitle: 识别图中模糊的手写数字（菜鸟做法）\nauthor: \ntags: \n       - 神经网络\n\ncategory: \n       - 其它\n\ndate: 2020-11-29 14:59:44\n---\n#### 预备知识\n\npython语言基础\n\n#### 目标\n\n导入图片数据集，分析图片的特点、定义变量，构建模型，训练模型并输出中间状态参数，测试、保存、读取模型\n\n#### 如何搞定它\n\n##### 1.1导入图片数据集\n\n首先来看看数据集是什么样的。\nMNIST是一个入门级的计算机视觉数据集。当我们开始学习编程时，第一件事往往是学习打印Hello World。在机器学习入门的领域里，我们会用MNIST数据集来实验各种模型。\n\n1.1.1数据集介绍\n\nMNIST里包含各种手写数字图片，如图所示。\n![在这里插入图片描述](../images/7192d300-a66b-4804-9c83-4299a47a6021.png)\n它也包含每一张图片对应的标签，告诉我们这个是数字几。例如，上面这4张图片的标签分别是5、0、4、1。\n\n1.1.2下载并安装MNIST数据集\n\n介绍完MNIST数据集后，下面来演示一下如何通过代码来对其操作。\n\n（1）利用TensorFlow代码下载MNIST\n\nTensorFlow提供了一个库，可以直接用来自动下载与安装MNIST，见如下代码：\n```js \n# MNIST数据集\nfrom tensorflow.examples.tutorials.mnist import input_data\nmnist=input_data.read_data_sets(\"MNIST_data/\",one_hot=True))\n```\n\n```js \n运行上面的代码，会自动下载数据集并将文件解压到当前代码所在同级目录下的MNIST_data文件夹下。\n注意：代码中的one_hot=True，表示将样本标签转化为one_hot编码。\n```\n\n举例来解释one_hot编码：\n假如一共10类。0的one_hot为1000000000，1的one_hot为0100000000，2的one_hot为0010000000，3的one_hot为0001000000……依此类推。只有一个位为1，1所在的位置就代表着第几类。\n\nMNIST数据集中的图片是28×28像素，所以，每一幅图就是1行784（28×28）列的数据，括号中的每一个值代表一个像素。\n\n* 如果是黑白的图片，图片中黑色的地方数值为0；有图案的地方，数值为0～255之间的数字，代表其颜色的深度。\n* 如果是彩色的图片，一个像素会由3个值来表示RGB（红、黄、蓝）。在后面讲解其他数据集时会具体讲到。\n\n接下来通过几行代码将MNIST里面的信息打印出来，看看它的具体内容。\n```js \n# MNIST数据集（续）\nprint ('输入数据:',mnist.train.images)\nprint ('输入数据打印shape:',mnist.train.images.shape)\nimport pylab\nim = mnist.train.images[1]\nim = im.reshape(-1,28)\npylab.imshow(im)\npylab.show()\n```\n\n运行上面的代码，输出信息如下：\n\n输出结果如图所示\n![在这里插入图片描述](../images/147d32f7-4009-4b9f-bdb5-ba8d8e55dc6b.png)\n刚开始的打印信息是解压数据集的意思。如果是第一次运行，还会显示下载数据的相关信息。\n接着打印出来的是训练集的图片信息，是一个55000行、784列的矩阵。即，训练集里有55000张图片。\n\n（2）MNIST数据集组成\n\n在MNIST训练数据集中，mnist.train.images是一个形状为[55000，784]的张量。其中，第1个维度数字用来索引图片，第2个维度数字用来索引每张图片中的像素点。此张量里的每一个元素，都表示某张图片里的某个像素的强度值，值介于0～255之间。\nMNIST里包含3个数据集：第一个是训练数据集，另外两个分别是测试数据集（mnist.test）和验证数据集（mnist.validation）。可使用如下命令查看里面的数据信息：\n```js \nMNIST数据集（续）\nprint ('输入数据打印shape:',mnist.test.images.shape)\nprint ('输入数据打印shape:',mnist.validation.images.shape)\n```\n\n运行完上面的命令，可以发现在测试数据集里有10000条样本图片，验证数据集里有5000个图片。\n\n在实际的机器学习模型设计时，样本一般分为3部分：\n\n* 一部分用于训练；\n* 一部分用于评估训练过程中的准确度（测试数据集）；\n* 一部分用于评估最终模型的准确度（验证数据集）。\n\n训练过程中，模型并没有遇到过验证数据集中的数据，所以利用验证数据集可以评估出模型的准确度。这个准确度越高，代表模型的泛化能力越强。\n\n另外，这3个数据集还有分别对应的3个文件（标签文件），用来标注每个图片上的数字是几。把图片和标签放在一起，称为“样本”。通过样本来就可以实现一个有监督信号的深度学习模型。\n\n相对应的，MNIST数据集的标签是介于0～9之间的数字，用来描述给定图片里表示的数字。标签数据是“one-hot vectors”：一个one-hot向量，除了某一位的数字是1外，其余各维度数字都是0。例如，标签0将表示为（[1，0，0，0，0，0，0，0，0，0，0]）。因此，mnist.train.labels是一个[55000，10]的数字矩阵。\n\n##### 1.2分析图片的特点，定义变量\n\n由于输入图片是个55000×784的矩阵，所以先创建一个[None，784]的占位符x和一个[None，10]的占位符y，然后使用feed机制将图片和标签输入进去。具体代码如下。\n```js \n# MNIST分类\nimport tensorflow as tf  # 导入tensorflow库\nfrom tensorflow.examples.tutorials.mnist import input_data\nmnist = input_data.read_data_sets(\"MNIST_data/\",one_hot=True)\nimport pylab \ntf.reset_default_graph()\n# 定义占位符\nx = tf.placeholder(tf.float32, [None, 784]) # MNIST数据集的维度是  28×28=784\ny = tf.placeholder(tf.float32, [None, 10])  # 数字0～9 ，共10个类别\n#代码中第8行的None，表示此张量的第一个维度可以是任何长度的。x就代表能够输入任意数量的MNIST图像，每一张图展平成784维的向量。\n```\n\n##### 1.3构建模型\n\n样本完成后就可以构建模型了。下面列出了构建模型的相关步骤。\n\n1.3.1　定义学习参数\n\n模型也需要权重值和偏置量，它们被统一叫做学习参数。在TensorFlow里，使用Variable来定义学习参数。\n一个Variable代表一个可修改的张量，定义在TensorFlow的图（一个执行任务）中，其本身也是一种变量。使用Variable定义的学习参数可以用于计算输入值，也可以在计算中被修改。\n```js \n# MNIST分类（续）\nW = tf.Variable(tf.random_normal(([784,10]))\nb = tf.Variable(tf.zeros([10]))\n```\n\n在这里赋予tf.Variable不同的初值来创建不同的参数。一般将W设为一个随机值，将b设为0。\n注意：W的维度是[784，10]，因为想要用784维的图片向量乘以它，以得到一个10维的证据值向量，每一位对应不同数字类。b的形状是[10]，所以可以直接把它加到输出上面。\n\n1.3.2　定义输出节点\n\n有了输入和模型参数，接着便可以将它们串起来构建成真正的模型。\n```js \n# MNIST分类（续）\npred = tf.nn.softmax(tf.matmul(x, W) + b) # Softmax分类\n```\n\n首先，用tf.matmul（x，W）表示x乘以W，这里x是一个二维张量，拥有多个输入。然后再加上b，把它们的和输入到tf.nn.softmax函数里。\n至此就构建好了正向传播的结构。也就是表明，只要模型中的参数合适，通过具体的数据输入，就能得到我们想要的分类。\n\n1.3.3　定义反向传播的结构\n\n下面定义一个反向传播的结构，编译训练模型，以得到合适的参数。\n这里涉及一个“学习率”的概念。学习率，是指每次改变学习参数的大小。在这里读者只要先有个概念即可，后面章节还会详细介绍。\n先看下面代码。\n```js \n代码1-2　MNIST分类（续）\n# 损失函数\ncost=tf.reduce_mean(-tf.reduce_sum(y*tf.log(pred),reduction_indices=1))\n  \n# 定义参数\nlearning_rate = 0.01\n# 使用梯度下降优化器\noptimizer=tf.train.GradientDescentOptimizer(learning_rate).minimize(cost)\n```\n\n上面的代码可以这样来理解：\n（1）将生成的pred与样本标签y进行一次交叉熵的运算，然后取平均值。\n（2）将这个结果作为一次正向传播的误差，通过梯度下降的优化方法找到能够使这个误差最小化的b和W的偏移量。\n（3）更新b和W，使其调整为合适的参数。\n整个过程就是不断地让损失值（误差值cost）变小。因为损失值越小，才能表明输出的结果跟标签数据越相近。当cost小到我们的需求时，这时的b和W就是训练出来的合适值。\n\n##### 1.4　训练模型并输出中间状态参数\n\n现在开始真正地训练模型了，先定义训练相关的参数。\n下面代码中\n\n* 第1行中，training_epochs代表要把整个训练样本集迭代25次；\n* 第2行中，batch_size代表在训练过程中一次取100条数据进行训练\n* 第3行中，display_step代表每训练一次就把具体的中间状态显示出来。\n\n注意：batch_size参数代表的意义很关键，在深度学习中，都是将数据按批次地向里面放的。在后面章节中还会详细介绍这么做的目的。\n参数定义好后，启动一个session就可以开始训练过程了。session中有两个run，第一个run是运行初始化，第二个run是运行具体的运算模型。模型运算之后便将里面的状态打印出来。\n```js \ntraining_epochs = 25\nbatch_size = 100\ndisplay_step = 1\n\nsaver = tf.train.Saver()\nmodel_path = \"log/521model.ckpt\"\n\n# 启动session\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())# Initializing OP\n    # 启动循环开始训练\n    for epoch in range(training_epochs):\n        avg_cost = 0.\n        total_batch = int(mnist.train.num_examples/batch_size)\n        # 循环所有数据集\n        for i in range(total_batch):\n            batch_xs, batch_ys = mnist.train.next_batch(batch_size)\n            # 运行优化器\n            _, c = sess.run([optimizer, cost], feed_dict={\n    x: batch_xs,\n                                                       y: batch_ys})\n            # 计算平均loss值\n            avg_cost += c / total_batch\n        # 显示训练中的详细信息\n        if (epoch+1) % display_step == 0:\n           print (\"Epoch:\", '%04d' % (epoch+1), \"cost=\", \"{:.9f}\".            format(avg_cost))\n\n    print( \" Finished!\")\n```\n\n执行上面的代码，会输出如下信息：\n![在这里插入图片描述](../images/f05686cc-f555-45cc-af01-76a123f2838e.png)\n\n这里输出的中间状态是cost损失值。读者也可以把自己关心的内容打印出来。可以看到，从第1次迭代到第25次迭代的损失值在逐渐减小，最终的误差只有0.8。\n\n##### 1.5　测试模型\n\n还记得MNIST里面有测试数据吗？现在我们使用测试数据来测试一下训练完的模型吧。\n与前面的过程类似，也是先将计算测试的网络结构建立起来，然后通过最终节点的eval将测试值运算出来。\n注意：这个过程仍然是在session里进行的。\n测试错误率的算法是：直接判断预测的结果与真实的标签是否相同，如是相同的就表明是正确的，如是不相同的就表示是错误的。然后将正确的个数除以总个数，得到的值即为正确率。由于是onehot编码，这里使用了tf.argmax函数返回onehot编码中数值为1的那个元素的下标。下面是具体代码。\n```js \n#MNIST分类（续）\n    correct_prediction = tf.equal(tf.argmax(pred, 1), tf.argmax(y, 1))\n    # 计算准确率\n    accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n    print (\"Accuracy:\", accuracy.eval({\n    x: mnist.test.images, y: mnist.test.labels}))\n```\n\n上面代码执行后，显示信息如下：\n![在这里插入图片描述](../images/2bcb27c0-4e9d-4ea7-8de2-bd52513612ed.png)\n\n测试正确率的算法与损失值的算法略有差别，但代表的意义却很类似。当然，也可以直接拿计算损失值的交叉熵结果来代表模型测试的错误率。\n注意：\n（1）并不是所有模型的测试错误率和训练时的最后一次损失值都很接近，这取决于训练样本和测试样本的分布情况，也取决于模型本身的拟合质量。关于拟合质量问题，将在后面章节详细介绍。\n（2）读者自己运行时，得到的值可能和本书中的值不一样。甚至每次运行时，得到的值也不一样。原因是每次初始的权重w都是随机的。由于初始权重不同，而且每次训练的批次数据也不同，所以最终生成的模型也不会完全相同。但如果核心算法保持一致，则会保证最终的结果不会有太大的偏差。\n\n##### 1.6　保存模型\n\n下面开始讲解如何保存模型。\n首先要建立一个saver和一个路径，然后通过调用save，自动将session中的参数保存起来，见如下代码。\n```js \n# MNIST分类（续）   \n\t# 保存模型\n    save_path = saver.save(sess, model_path)\n    print(\"Model saved in file: %s\" % save_path)\n```\n\n上面代码的作用是保存模型，并将模型保存的路径打印出来。当然，在这段代码运行之前，需要添加saver和model_path的定义。来到前面session创建之前添加如下代码：\n\n```js \n# MNIST分类（续）\nsaver = tf.train.Saver()\nmodel_path = \"log/521model.ckpt\"\n```\n\n执行上述的全部代码后，会打印出存储位置\n![在这里插入图片描述](../images/48d4c89b-ee38-440f-a3da-638413985e4e.png)\n\n##### 1.7　读取模型\n\n将模型存储好后，下面来做一个实验：读取模型并将两张图片放进去让模型预测结果，然后将两张图片极其对应的标签一并显示出来。\n在整个代码执行过程中，对于网络模型的定义不变，只是重新建立一个session而已，所有的操作都在这个新的session中完成。具体细节见代码。\n```js \n#　MNIST分类（续）\nprint(\"Starting 2nd session...\")\nwith tf.Session() as sess:\n    # 初始化变量\n    sess.run(tf.global_variables_initializer())\n    # 恢复模型变量\n    saver.restore(sess, model_path)\n\n    # 测试 model\n    correct_prediction = tf.equal(tf.argmax(pred, 1), tf.argmax(y, 1))\n    # 计算准确率\n    accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n    print (\"Accuracy:\", accuracy.eval({\n    x: mnist.test.images, y: mnist.      test.labels}))\n\n    output = tf.argmax(pred, 1)\n    batch_xs, batch_ys = mnist.train.next_batch(2)\n    outputval,predv = sess.run([output,pred], feed_dict={\n    x: batch_xs})\n    print(outputval,predv,batch_ys)\n    im = batch_xs[0]\n    im = im.reshape(-1,28)\n    pylab.imshow(im)\n    pylab.show()\n\n    im = batch_xs[1]\n    im = im.reshape(-1,28)\n    pylab.imshow(im)\n    pylab.show()\n```\n\n以上代码可以替代原来的session，也可以直接放到代码后面，将前面的session注释掉。\n输出结果\n![在这里插入图片描述](../images/2323a693-45b2-4fda-98f3-a12bb2d71d5b.png)\n\n* 第一行是模型的准确率，接下来是3个数组。\n* 第一个数组是输出的预测结果[3,6]\n* 第二个大的数组比较大，是预测出来的真实输出值，哪一项数值越大，代表对应的概率越大.\n* 第三个大的数组元素都是0和1，是图片实际的标签值onehot编码表示的数字\n\n完整代码：\n```js \nimport tensorflow.compat.v1 as tf  # 导入tensorflow库#\ntf.disable_v2_behavior()\n\nfrom tensorflow.examples.tutorials.mnist import input_data\nmnist = input_data.read_data_sets(\"MNIST_data/\", one_hot=True)\n\n# print ('输入数据:',mnist.train.images)\n# print ('输入数据打印shape:',mnist.train.images.shape)\n\nimport pylab\nim = mnist.train.images[1]\nim = im.reshape(-1,28)\npylab.imshow(im)\npylab.show()\n# print ('输入数据打印shape:',mnist.test.images.shape)\n# print ('输入数据打印shape:',mnist.validation.images.shape)\n\ntf.reset_default_graph()\n# 定义占位符\nx = tf.placeholder(tf.float32, [None, 784]) # MNIST数据集的维度是  28×28=784\ny = tf.placeholder(tf.float32, [None, 10])  # 数字0～9 ，共10个类别\nW = tf.Variable(tf.random_normal([784,10]))\nb = tf.Variable(tf.zeros([10]))\npred = tf.nn.softmax(tf.matmul(x, W) + b) # Softmax分类\n\n# 损失函数\ncost=tf.reduce_mean(-tf.reduce_sum(y*tf.log(pred),reduction_indices=1))\n\n# 定义参数\nlearning_rate = 0.01\n# 使用梯度下降优化器\noptimizer=tf.train.GradientDescentOptimizer(learning_rate).minimize(cost)\ntraining_epochs = 25\nbatch_size = 100\ndisplay_step = 1\n\nsaver = tf.train.Saver()\nmodel_path = \"log/521model.ckpt\"\n\n# 启动session\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())# Initializing OP\n    # 启动循环开始训练\n    for epoch in range(training_epochs):\n        avg_cost = 0.\n        total_batch = int(mnist.train.num_examples/batch_size)\n        # 循环所有数据集\n        for i in range(total_batch):\n            batch_xs, batch_ys = mnist.train.next_batch(batch_size)\n            # 运行优化器\n            _, c = sess.run([optimizer, cost], feed_dict={\n    x: batch_xs,\n                                                       y: batch_ys})\n            # 计算平均loss值\n            avg_cost += c / total_batch\n        # 显示训练中的详细信息\n        if (epoch+1) % display_step == 0:\n           print (\"Epoch:\", '%04d' % (epoch+1), \"cost=\", \"{:.9f}\".            format(avg_cost))\n\n    print( \" Finished!\")\n    # 测试 model\n    correct_prediction = tf.equal(tf.argmax(pred, 1), tf.argmax(y, 1))\n    # 计算准确率\n    accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n    print (\"Accuracy:\", accuracy.eval({\n    x: mnist.test.images, y: mnist.test.labels}))\n\n    #     # 保存模型\n    save_path = saver.save(sess, model_path)\n    print(\"Model saved in file: %s\" % save_path)\n\nprint(\"Starting 2nd session...\")\nwith tf.Session() as sess:\n    # 初始化变量\n    sess.run(tf.global_variables_initializer())\n    # 恢复模型变量\n    saver.restore(sess, model_path)\n\n    # 测试 model\n    correct_prediction = tf.equal(tf.argmax(pred, 1), tf.argmax(y, 1))\n    # 计算准确率\n    accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n    print (\"Accuracy:\", accuracy.eval({\n    x: mnist.test.images, y: mnist.      test.labels}))\n\n    output = tf.argmax(pred, 1)\n    batch_xs, batch_ys = mnist.train.next_batch(2)\n    outputval,predv = sess.run([output,pred], feed_dict={\n    x: batch_xs})\n    print(outputval,predv,batch_ys)\n    im = batch_xs[0]\n    im = im.reshape(-1,28)\n    pylab.imshow(im)\n    pylab.show()\n\n    im = batch_xs[1]\n    im = im.reshape(-1,28)\n    pylab.imshow(im)\n    pylab.show()\n```","slug":"识别图中模糊的手写数字（菜鸟做法）","published":1,"updated":"2024-03-15T11:52:36.015Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clttq59cb003kzwvebnixhjx2","content":"<h4 id=\"预备知识\"><a href=\"#预备知识\" class=\"headerlink\" title=\"预备知识\"></a>预备知识</h4><p>python语言基础</p>\n<h4 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h4><p>导入图片数据集，分析图片的特点、定义变量，构建模型，训练模型并输出中间状态参数，测试、保存、读取模型</p>\n<h4 id=\"如何搞定它\"><a href=\"#如何搞定它\" class=\"headerlink\" title=\"如何搞定它\"></a>如何搞定它</h4><h5 id=\"1-1导入图片数据集\"><a href=\"#1-1导入图片数据集\" class=\"headerlink\" title=\"1.1导入图片数据集\"></a>1.1导入图片数据集</h5><p>首先来看看数据集是什么样的。<br>MNIST是一个入门级的计算机视觉数据集。当我们开始学习编程时，第一件事往往是学习打印Hello World。在机器学习入门的领域里，我们会用MNIST数据集来实验各种模型。</p>\n<p>1.1.1数据集介绍</p>\n<p>MNIST里包含各种手写数字图片，如图所示。<br><img src=\"/../images/7192d300-a66b-4804-9c83-4299a47a6021.png\" alt=\"在这里插入图片描述\"><br>它也包含每一张图片对应的标签，告诉我们这个是数字几。例如，上面这4张图片的标签分别是5、0、4、1。</p>\n<p>1.1.2下载并安装MNIST数据集</p>\n<p>介绍完MNIST数据集后，下面来演示一下如何通过代码来对其操作。</p>\n<p>（1）利用TensorFlow代码下载MNIST</p>\n<p>TensorFlow提供了一个库，可以直接用来自动下载与安装MNIST，见如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"># <span class=\"hljs-variable constant_\">MNIST</span>数据集<br><span class=\"hljs-keyword\">from</span> tensorflow.<span class=\"hljs-property\">examples</span>.<span class=\"hljs-property\">tutorials</span>.<span class=\"hljs-property\">mnist</span> <span class=\"hljs-keyword\">import</span> input_data<br>mnist=input_data.<span class=\"hljs-title function_\">read_data_sets</span>(<span class=\"hljs-string\">&quot;MNIST_data/&quot;</span>,one_hot=<span class=\"hljs-title class_\">True</span>))<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">运行上面的代码，会自动下载数据集并将文件解压到当前代码所在同级目录下的MNIST_data文件夹下。<br>注意：代码中的one_hot=<span class=\"hljs-title class_\">True</span>，表示将样本标签转化为one_hot编码。<br></code></pre></td></tr></table></figure>\n\n<p>举例来解释one_hot编码：<br>假如一共10类。0的one_hot为1000000000，1的one_hot为0100000000，2的one_hot为0010000000，3的one_hot为0001000000……依此类推。只有一个位为1，1所在的位置就代表着第几类。</p>\n<p>MNIST数据集中的图片是28×28像素，所以，每一幅图就是1行784（28×28）列的数据，括号中的每一个值代表一个像素。</p>\n<ul>\n<li>如果是黑白的图片，图片中黑色的地方数值为0；有图案的地方，数值为0～255之间的数字，代表其颜色的深度。</li>\n<li>如果是彩色的图片，一个像素会由3个值来表示RGB（红、黄、蓝）。在后面讲解其他数据集时会具体讲到。</li>\n</ul>\n<p>接下来通过几行代码将MNIST里面的信息打印出来，看看它的具体内容。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"># <span class=\"hljs-variable constant_\">MNIST</span>数据集（续）<br>print (<span class=\"hljs-string\">&#x27;输入数据:&#x27;</span>,mnist.<span class=\"hljs-property\">train</span>.<span class=\"hljs-property\">images</span>)<br>print (<span class=\"hljs-string\">&#x27;输入数据打印shape:&#x27;</span>,mnist.<span class=\"hljs-property\">train</span>.<span class=\"hljs-property\">images</span>.<span class=\"hljs-property\">shape</span>)<br><span class=\"hljs-keyword\">import</span> pylab<br>im = mnist.<span class=\"hljs-property\">train</span>.<span class=\"hljs-property\">images</span>[<span class=\"hljs-number\">1</span>]<br>im = im.<span class=\"hljs-title function_\">reshape</span>(-<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">28</span>)<br>pylab.<span class=\"hljs-title function_\">imshow</span>(im)<br>pylab.<span class=\"hljs-title function_\">show</span>()<br></code></pre></td></tr></table></figure>\n\n<p>运行上面的代码，输出信息如下：</p>\n<p>输出结果如图所示<br><img src=\"/../images/147d32f7-4009-4b9f-bdb5-ba8d8e55dc6b.png\" alt=\"在这里插入图片描述\"><br>刚开始的打印信息是解压数据集的意思。如果是第一次运行，还会显示下载数据的相关信息。<br>接着打印出来的是训练集的图片信息，是一个55000行、784列的矩阵。即，训练集里有55000张图片。</p>\n<p>（2）MNIST数据集组成</p>\n<p>在MNIST训练数据集中，mnist.train.images是一个形状为[55000，784]的张量。其中，第1个维度数字用来索引图片，第2个维度数字用来索引每张图片中的像素点。此张量里的每一个元素，都表示某张图片里的某个像素的强度值，值介于0～255之间。<br>MNIST里包含3个数据集：第一个是训练数据集，另外两个分别是测试数据集（mnist.test）和验证数据集（mnist.validation）。可使用如下命令查看里面的数据信息：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable constant_\">MNIST</span>数据集（续）<br>print (<span class=\"hljs-string\">&#x27;输入数据打印shape:&#x27;</span>,mnist.<span class=\"hljs-property\">test</span>.<span class=\"hljs-property\">images</span>.<span class=\"hljs-property\">shape</span>)<br>print (<span class=\"hljs-string\">&#x27;输入数据打印shape:&#x27;</span>,mnist.<span class=\"hljs-property\">validation</span>.<span class=\"hljs-property\">images</span>.<span class=\"hljs-property\">shape</span>)<br></code></pre></td></tr></table></figure>\n\n<p>运行完上面的命令，可以发现在测试数据集里有10000条样本图片，验证数据集里有5000个图片。</p>\n<p>在实际的机器学习模型设计时，样本一般分为3部分：</p>\n<ul>\n<li>一部分用于训练；</li>\n<li>一部分用于评估训练过程中的准确度（测试数据集）；</li>\n<li>一部分用于评估最终模型的准确度（验证数据集）。</li>\n</ul>\n<p>训练过程中，模型并没有遇到过验证数据集中的数据，所以利用验证数据集可以评估出模型的准确度。这个准确度越高，代表模型的泛化能力越强。</p>\n<p>另外，这3个数据集还有分别对应的3个文件（标签文件），用来标注每个图片上的数字是几。把图片和标签放在一起，称为“样本”。通过样本来就可以实现一个有监督信号的深度学习模型。</p>\n<p>相对应的，MNIST数据集的标签是介于0～9之间的数字，用来描述给定图片里表示的数字。标签数据是“one-hot vectors”：一个one-hot向量，除了某一位的数字是1外，其余各维度数字都是0。例如，标签0将表示为（[1，0，0，0，0，0，0，0，0，0，0]）。因此，mnist.train.labels是一个[55000，10]的数字矩阵。</p>\n<h5 id=\"1-2分析图片的特点，定义变量\"><a href=\"#1-2分析图片的特点，定义变量\" class=\"headerlink\" title=\"1.2分析图片的特点，定义变量\"></a>1.2分析图片的特点，定义变量</h5><p>由于输入图片是个55000×784的矩阵，所以先创建一个[None，784]的占位符x和一个[None，10]的占位符y，然后使用feed机制将图片和标签输入进去。具体代码如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"># <span class=\"hljs-variable constant_\">MNIST</span>分类<br><span class=\"hljs-keyword\">import</span> tensorflow <span class=\"hljs-keyword\">as</span> tf  # 导入tensorflow库<br><span class=\"hljs-keyword\">from</span> tensorflow.<span class=\"hljs-property\">examples</span>.<span class=\"hljs-property\">tutorials</span>.<span class=\"hljs-property\">mnist</span> <span class=\"hljs-keyword\">import</span> input_data<br>mnist = input_data.<span class=\"hljs-title function_\">read_data_sets</span>(<span class=\"hljs-string\">&quot;MNIST_data/&quot;</span>,one_hot=<span class=\"hljs-title class_\">True</span>)<br><span class=\"hljs-keyword\">import</span> pylab <br>tf.<span class=\"hljs-title function_\">reset_default_graph</span>()<br># 定义占位符<br>x = tf.<span class=\"hljs-title function_\">placeholder</span>(tf.<span class=\"hljs-property\">float32</span>, [<span class=\"hljs-title class_\">None</span>, <span class=\"hljs-number\">784</span>]) # <span class=\"hljs-variable constant_\">MNIST</span>数据集的维度是  <span class=\"hljs-number\">28</span>×<span class=\"hljs-number\">28</span>=<span class=\"hljs-number\">784</span><br>y = tf.<span class=\"hljs-title function_\">placeholder</span>(tf.<span class=\"hljs-property\">float32</span>, [<span class=\"hljs-title class_\">None</span>, <span class=\"hljs-number\">10</span>])  # 数字<span class=\"hljs-number\">0</span>～<span class=\"hljs-number\">9</span> ，共<span class=\"hljs-number\">10</span>个类别<br>#代码中第<span class=\"hljs-number\">8</span>行的<span class=\"hljs-title class_\">None</span>，表示此张量的第一个维度可以是任何长度的。x就代表能够输入任意数量的<span class=\"hljs-variable constant_\">MNIST</span>图像，每一张图展平成<span class=\"hljs-number\">784</span>维的向量。<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"1-3构建模型\"><a href=\"#1-3构建模型\" class=\"headerlink\" title=\"1.3构建模型\"></a>1.3构建模型</h5><p>样本完成后就可以构建模型了。下面列出了构建模型的相关步骤。</p>\n<p>1.3.1　定义学习参数</p>\n<p>模型也需要权重值和偏置量，它们被统一叫做学习参数。在TensorFlow里，使用Variable来定义学习参数。<br>一个Variable代表一个可修改的张量，定义在TensorFlow的图（一个执行任务）中，其本身也是一种变量。使用Variable定义的学习参数可以用于计算输入值，也可以在计算中被修改。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"># <span class=\"hljs-variable constant_\">MNIST</span>分类（续）<br>W = tf.<span class=\"hljs-title class_\">Variable</span>(tf.<span class=\"hljs-title function_\">random_normal</span>(([<span class=\"hljs-number\">784</span>,<span class=\"hljs-number\">10</span>]))<br>b = tf.<span class=\"hljs-title class_\">Variable</span>(tf.<span class=\"hljs-title function_\">zeros</span>([<span class=\"hljs-number\">10</span>]))<br></code></pre></td></tr></table></figure>\n\n<p>在这里赋予tf.Variable不同的初值来创建不同的参数。一般将W设为一个随机值，将b设为0。<br>注意：W的维度是[784，10]，因为想要用784维的图片向量乘以它，以得到一个10维的证据值向量，每一位对应不同数字类。b的形状是[10]，所以可以直接把它加到输出上面。</p>\n<p>1.3.2　定义输出节点</p>\n<p>有了输入和模型参数，接着便可以将它们串起来构建成真正的模型。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"># <span class=\"hljs-variable constant_\">MNIST</span>分类（续）<br>pred = tf.<span class=\"hljs-property\">nn</span>.<span class=\"hljs-title function_\">softmax</span>(tf.<span class=\"hljs-title function_\">matmul</span>(x, W) + b) # <span class=\"hljs-title class_\">Softmax</span>分类<br></code></pre></td></tr></table></figure>\n\n<p>首先，用tf.matmul（x，W）表示x乘以W，这里x是一个二维张量，拥有多个输入。然后再加上b，把它们的和输入到tf.nn.softmax函数里。<br>至此就构建好了正向传播的结构。也就是表明，只要模型中的参数合适，通过具体的数据输入，就能得到我们想要的分类。</p>\n<p>1.3.3　定义反向传播的结构</p>\n<p>下面定义一个反向传播的结构，编译训练模型，以得到合适的参数。<br>这里涉及一个“学习率”的概念。学习率，是指每次改变学习参数的大小。在这里读者只要先有个概念即可，后面章节还会详细介绍。<br>先看下面代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">代码<span class=\"hljs-number\">1</span>-<span class=\"hljs-number\">2</span>　<span class=\"hljs-variable constant_\">MNIST</span>分类（续）<br># 损失函数<br>cost=tf.<span class=\"hljs-title function_\">reduce_mean</span>(-tf.<span class=\"hljs-title function_\">reduce_sum</span>(y*tf.<span class=\"hljs-title function_\">log</span>(pred),reduction_indices=<span class=\"hljs-number\">1</span>))<br>  <br># 定义参数<br>learning_rate = <span class=\"hljs-number\">0.01</span><br># 使用梯度下降优化器<br>optimizer=tf.<span class=\"hljs-property\">train</span>.<span class=\"hljs-title class_\">GradientDescentOptimizer</span>(learning_rate).<span class=\"hljs-title function_\">minimize</span>(cost)<br></code></pre></td></tr></table></figure>\n\n<p>上面的代码可以这样来理解：<br>（1）将生成的pred与样本标签y进行一次交叉熵的运算，然后取平均值。<br>（2）将这个结果作为一次正向传播的误差，通过梯度下降的优化方法找到能够使这个误差最小化的b和W的偏移量。<br>（3）更新b和W，使其调整为合适的参数。<br>整个过程就是不断地让损失值（误差值cost）变小。因为损失值越小，才能表明输出的结果跟标签数据越相近。当cost小到我们的需求时，这时的b和W就是训练出来的合适值。</p>\n<h5 id=\"1-4-训练模型并输出中间状态参数\"><a href=\"#1-4-训练模型并输出中间状态参数\" class=\"headerlink\" title=\"1.4　训练模型并输出中间状态参数\"></a>1.4　训练模型并输出中间状态参数</h5><p>现在开始真正地训练模型了，先定义训练相关的参数。<br>下面代码中</p>\n<ul>\n<li>第1行中，training_epochs代表要把整个训练样本集迭代25次；</li>\n<li>第2行中，batch_size代表在训练过程中一次取100条数据进行训练</li>\n<li>第3行中，display_step代表每训练一次就把具体的中间状态显示出来。</li>\n</ul>\n<p>注意：batch_size参数代表的意义很关键，在深度学习中，都是将数据按批次地向里面放的。在后面章节中还会详细介绍这么做的目的。<br>参数定义好后，启动一个session就可以开始训练过程了。session中有两个run，第一个run是运行初始化，第二个run是运行具体的运算模型。模型运算之后便将里面的状态打印出来。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">training_epochs = <span class=\"hljs-number\">25</span><br>batch_size = <span class=\"hljs-number\">100</span><br>display_step = <span class=\"hljs-number\">1</span><br><br>saver = tf.<span class=\"hljs-property\">train</span>.<span class=\"hljs-title class_\">Saver</span>()<br>model_path = <span class=\"hljs-string\">&quot;log/521model.ckpt&quot;</span><br><br># 启动session<br><span class=\"hljs-keyword\">with</span> tf.<span class=\"hljs-title class_\">Session</span>() <span class=\"hljs-keyword\">as</span> <span class=\"hljs-attr\">sess</span>:<br>    sess.<span class=\"hljs-title function_\">run</span>(tf.<span class=\"hljs-title function_\">global_variables_initializer</span>())# <span class=\"hljs-title class_\">Initializing</span> <span class=\"hljs-variable constant_\">OP</span><br>    # 启动循环开始训练<br>    <span class=\"hljs-keyword\">for</span> epoch <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_\">range</span>(training_epochs):<br>        avg_cost = <span class=\"hljs-number\">0.</span><br>        total_batch = <span class=\"hljs-title function_\">int</span>(mnist.<span class=\"hljs-property\">train</span>.<span class=\"hljs-property\">num_examples</span>/batch_size)<br>        # 循环所有数据集<br>        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_\">range</span>(total_batch):<br>            batch_xs, batch_ys = mnist.<span class=\"hljs-property\">train</span>.<span class=\"hljs-title function_\">next_batch</span>(batch_size)<br>            # 运行优化器<br>            _, c = sess.<span class=\"hljs-title function_\">run</span>([optimizer, cost], feed_dict=&#123;<br>    <span class=\"hljs-attr\">x</span>: batch_xs,<br>                                                       <span class=\"hljs-attr\">y</span>: batch_ys&#125;)<br>            # 计算平均loss值<br>            avg_cost += c / total_batch<br>        # 显示训练中的详细信息<br>        <span class=\"hljs-keyword\">if</span> (epoch+<span class=\"hljs-number\">1</span>) % display_step == <span class=\"hljs-number\">0</span>:<br>           print (<span class=\"hljs-string\">&quot;Epoch:&quot;</span>, <span class=\"hljs-string\">&#x27;%04d&#x27;</span> % (epoch+<span class=\"hljs-number\">1</span>), <span class=\"hljs-string\">&quot;cost=&quot;</span>, <span class=\"hljs-string\">&quot;&#123;:.9f&#125;&quot;</span>.            <span class=\"hljs-title function_\">format</span>(avg_cost))<br><br>    <span class=\"hljs-title function_\">print</span>( <span class=\"hljs-string\">&quot; Finished!&quot;</span>)<br></code></pre></td></tr></table></figure>\n\n<p>执行上面的代码，会输出如下信息：<br><img src=\"/../images/f05686cc-f555-45cc-af01-76a123f2838e.png\" alt=\"在这里插入图片描述\"></p>\n<p>这里输出的中间状态是cost损失值。读者也可以把自己关心的内容打印出来。可以看到，从第1次迭代到第25次迭代的损失值在逐渐减小，最终的误差只有0.8。</p>\n<h5 id=\"1-5-测试模型\"><a href=\"#1-5-测试模型\" class=\"headerlink\" title=\"1.5　测试模型\"></a>1.5　测试模型</h5><p>还记得MNIST里面有测试数据吗？现在我们使用测试数据来测试一下训练完的模型吧。<br>与前面的过程类似，也是先将计算测试的网络结构建立起来，然后通过最终节点的eval将测试值运算出来。<br>注意：这个过程仍然是在session里进行的。<br>测试错误率的算法是：直接判断预测的结果与真实的标签是否相同，如是相同的就表明是正确的，如是不相同的就表示是错误的。然后将正确的个数除以总个数，得到的值即为正确率。由于是onehot编码，这里使用了tf.argmax函数返回onehot编码中数值为1的那个元素的下标。下面是具体代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">#<span class=\"hljs-variable constant_\">MNIST</span>分类（续）<br>    correct_prediction = tf.<span class=\"hljs-title function_\">equal</span>(tf.<span class=\"hljs-title function_\">argmax</span>(pred, <span class=\"hljs-number\">1</span>), tf.<span class=\"hljs-title function_\">argmax</span>(y, <span class=\"hljs-number\">1</span>))<br>    # 计算准确率<br>    accuracy = tf.<span class=\"hljs-title function_\">reduce_mean</span>(tf.<span class=\"hljs-title function_\">cast</span>(correct_prediction, tf.<span class=\"hljs-property\">float32</span>))<br>    print (<span class=\"hljs-string\">&quot;Accuracy:&quot;</span>, accuracy.<span class=\"hljs-built_in\">eval</span>(&#123;<br>    <span class=\"hljs-attr\">x</span>: mnist.<span class=\"hljs-property\">test</span>.<span class=\"hljs-property\">images</span>, <span class=\"hljs-attr\">y</span>: mnist.<span class=\"hljs-property\">test</span>.<span class=\"hljs-property\">labels</span>&#125;))<br></code></pre></td></tr></table></figure>\n\n<p>上面代码执行后，显示信息如下：<br><img src=\"/../images/2bcb27c0-4e9d-4ea7-8de2-bd52513612ed.png\" alt=\"在这里插入图片描述\"></p>\n<p>测试正确率的算法与损失值的算法略有差别，但代表的意义却很类似。当然，也可以直接拿计算损失值的交叉熵结果来代表模型测试的错误率。<br>注意：<br>（1）并不是所有模型的测试错误率和训练时的最后一次损失值都很接近，这取决于训练样本和测试样本的分布情况，也取决于模型本身的拟合质量。关于拟合质量问题，将在后面章节详细介绍。<br>（2）读者自己运行时，得到的值可能和本书中的值不一样。甚至每次运行时，得到的值也不一样。原因是每次初始的权重w都是随机的。由于初始权重不同，而且每次训练的批次数据也不同，所以最终生成的模型也不会完全相同。但如果核心算法保持一致，则会保证最终的结果不会有太大的偏差。</p>\n<h5 id=\"1-6-保存模型\"><a href=\"#1-6-保存模型\" class=\"headerlink\" title=\"1.6　保存模型\"></a>1.6　保存模型</h5><p>下面开始讲解如何保存模型。<br>首先要建立一个saver和一个路径，然后通过调用save，自动将session中的参数保存起来，见如下代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"># <span class=\"hljs-variable constant_\">MNIST</span>分类（续）   <br>\t# 保存模型<br>    save_path = saver.<span class=\"hljs-title function_\">save</span>(sess, model_path)<br>    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;Model saved in file: %s&quot;</span> % save_path)<br></code></pre></td></tr></table></figure>\n\n<p>上面代码的作用是保存模型，并将模型保存的路径打印出来。当然，在这段代码运行之前，需要添加saver和model_path的定义。来到前面session创建之前添加如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"># <span class=\"hljs-variable constant_\">MNIST</span>分类（续）<br>saver = tf.<span class=\"hljs-property\">train</span>.<span class=\"hljs-title class_\">Saver</span>()<br>model_path = <span class=\"hljs-string\">&quot;log/521model.ckpt&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>执行上述的全部代码后，会打印出存储位置<br><img src=\"/../images/48d4c89b-ee38-440f-a3da-638413985e4e.png\" alt=\"在这里插入图片描述\"></p>\n<h5 id=\"1-7-读取模型\"><a href=\"#1-7-读取模型\" class=\"headerlink\" title=\"1.7　读取模型\"></a>1.7　读取模型</h5><p>将模型存储好后，下面来做一个实验：读取模型并将两张图片放进去让模型预测结果，然后将两张图片极其对应的标签一并显示出来。<br>在整个代码执行过程中，对于网络模型的定义不变，只是重新建立一个session而已，所有的操作都在这个新的session中完成。具体细节见代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">#　<span class=\"hljs-variable constant_\">MNIST</span>分类（续）<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;Starting 2nd session...&quot;</span>)<br><span class=\"hljs-keyword\">with</span> tf.<span class=\"hljs-title class_\">Session</span>() <span class=\"hljs-keyword\">as</span> <span class=\"hljs-attr\">sess</span>:<br>    # 初始化变量<br>    sess.<span class=\"hljs-title function_\">run</span>(tf.<span class=\"hljs-title function_\">global_variables_initializer</span>())<br>    # 恢复模型变量<br>    saver.<span class=\"hljs-title function_\">restore</span>(sess, model_path)<br><br>    # 测试 model<br>    correct_prediction = tf.<span class=\"hljs-title function_\">equal</span>(tf.<span class=\"hljs-title function_\">argmax</span>(pred, <span class=\"hljs-number\">1</span>), tf.<span class=\"hljs-title function_\">argmax</span>(y, <span class=\"hljs-number\">1</span>))<br>    # 计算准确率<br>    accuracy = tf.<span class=\"hljs-title function_\">reduce_mean</span>(tf.<span class=\"hljs-title function_\">cast</span>(correct_prediction, tf.<span class=\"hljs-property\">float32</span>))<br>    print (<span class=\"hljs-string\">&quot;Accuracy:&quot;</span>, accuracy.<span class=\"hljs-built_in\">eval</span>(&#123;<br>    <span class=\"hljs-attr\">x</span>: mnist.<span class=\"hljs-property\">test</span>.<span class=\"hljs-property\">images</span>, <span class=\"hljs-attr\">y</span>: mnist.      test.<span class=\"hljs-property\">labels</span>&#125;))<br><br>    output = tf.<span class=\"hljs-title function_\">argmax</span>(pred, <span class=\"hljs-number\">1</span>)<br>    batch_xs, batch_ys = mnist.<span class=\"hljs-property\">train</span>.<span class=\"hljs-title function_\">next_batch</span>(<span class=\"hljs-number\">2</span>)<br>    outputval,predv = sess.<span class=\"hljs-title function_\">run</span>([output,pred], feed_dict=&#123;<br>    <span class=\"hljs-attr\">x</span>: batch_xs&#125;)<br>    <span class=\"hljs-title function_\">print</span>(outputval,predv,batch_ys)<br>    im = batch_xs[<span class=\"hljs-number\">0</span>]<br>    im = im.<span class=\"hljs-title function_\">reshape</span>(-<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">28</span>)<br>    pylab.<span class=\"hljs-title function_\">imshow</span>(im)<br>    pylab.<span class=\"hljs-title function_\">show</span>()<br><br>    im = batch_xs[<span class=\"hljs-number\">1</span>]<br>    im = im.<span class=\"hljs-title function_\">reshape</span>(-<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">28</span>)<br>    pylab.<span class=\"hljs-title function_\">imshow</span>(im)<br>    pylab.<span class=\"hljs-title function_\">show</span>()<br></code></pre></td></tr></table></figure>\n\n<p>以上代码可以替代原来的session，也可以直接放到代码后面，将前面的session注释掉。<br>输出结果<br><img src=\"/../images/2323a693-45b2-4fda-98f3-a12bb2d71d5b.png\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>第一行是模型的准确率，接下来是3个数组。</li>\n<li>第一个数组是输出的预测结果[3,6]</li>\n<li>第二个大的数组比较大，是预测出来的真实输出值，哪一项数值越大，代表对应的概率越大.</li>\n<li>第三个大的数组元素都是0和1，是图片实际的标签值onehot编码表示的数字</li>\n</ul>\n<p>完整代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> tensorflow.<span class=\"hljs-property\">compat</span>.<span class=\"hljs-property\">v1</span> <span class=\"hljs-keyword\">as</span> tf  # 导入tensorflow库#<br>tf.<span class=\"hljs-title function_\">disable_v2_behavior</span>()<br><br><span class=\"hljs-keyword\">from</span> tensorflow.<span class=\"hljs-property\">examples</span>.<span class=\"hljs-property\">tutorials</span>.<span class=\"hljs-property\">mnist</span> <span class=\"hljs-keyword\">import</span> input_data<br>mnist = input_data.<span class=\"hljs-title function_\">read_data_sets</span>(<span class=\"hljs-string\">&quot;MNIST_data/&quot;</span>, one_hot=<span class=\"hljs-title class_\">True</span>)<br><br># print (<span class=\"hljs-string\">&#x27;输入数据:&#x27;</span>,mnist.<span class=\"hljs-property\">train</span>.<span class=\"hljs-property\">images</span>)<br># print (<span class=\"hljs-string\">&#x27;输入数据打印shape:&#x27;</span>,mnist.<span class=\"hljs-property\">train</span>.<span class=\"hljs-property\">images</span>.<span class=\"hljs-property\">shape</span>)<br><br><span class=\"hljs-keyword\">import</span> pylab<br>im = mnist.<span class=\"hljs-property\">train</span>.<span class=\"hljs-property\">images</span>[<span class=\"hljs-number\">1</span>]<br>im = im.<span class=\"hljs-title function_\">reshape</span>(-<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">28</span>)<br>pylab.<span class=\"hljs-title function_\">imshow</span>(im)<br>pylab.<span class=\"hljs-title function_\">show</span>()<br># print (<span class=\"hljs-string\">&#x27;输入数据打印shape:&#x27;</span>,mnist.<span class=\"hljs-property\">test</span>.<span class=\"hljs-property\">images</span>.<span class=\"hljs-property\">shape</span>)<br># print (<span class=\"hljs-string\">&#x27;输入数据打印shape:&#x27;</span>,mnist.<span class=\"hljs-property\">validation</span>.<span class=\"hljs-property\">images</span>.<span class=\"hljs-property\">shape</span>)<br><br>tf.<span class=\"hljs-title function_\">reset_default_graph</span>()<br># 定义占位符<br>x = tf.<span class=\"hljs-title function_\">placeholder</span>(tf.<span class=\"hljs-property\">float32</span>, [<span class=\"hljs-title class_\">None</span>, <span class=\"hljs-number\">784</span>]) # <span class=\"hljs-variable constant_\">MNIST</span>数据集的维度是  <span class=\"hljs-number\">28</span>×<span class=\"hljs-number\">28</span>=<span class=\"hljs-number\">784</span><br>y = tf.<span class=\"hljs-title function_\">placeholder</span>(tf.<span class=\"hljs-property\">float32</span>, [<span class=\"hljs-title class_\">None</span>, <span class=\"hljs-number\">10</span>])  # 数字<span class=\"hljs-number\">0</span>～<span class=\"hljs-number\">9</span> ，共<span class=\"hljs-number\">10</span>个类别<br>W = tf.<span class=\"hljs-title class_\">Variable</span>(tf.<span class=\"hljs-title function_\">random_normal</span>([<span class=\"hljs-number\">784</span>,<span class=\"hljs-number\">10</span>]))<br>b = tf.<span class=\"hljs-title class_\">Variable</span>(tf.<span class=\"hljs-title function_\">zeros</span>([<span class=\"hljs-number\">10</span>]))<br>pred = tf.<span class=\"hljs-property\">nn</span>.<span class=\"hljs-title function_\">softmax</span>(tf.<span class=\"hljs-title function_\">matmul</span>(x, W) + b) # <span class=\"hljs-title class_\">Softmax</span>分类<br><br># 损失函数<br>cost=tf.<span class=\"hljs-title function_\">reduce_mean</span>(-tf.<span class=\"hljs-title function_\">reduce_sum</span>(y*tf.<span class=\"hljs-title function_\">log</span>(pred),reduction_indices=<span class=\"hljs-number\">1</span>))<br><br># 定义参数<br>learning_rate = <span class=\"hljs-number\">0.01</span><br># 使用梯度下降优化器<br>optimizer=tf.<span class=\"hljs-property\">train</span>.<span class=\"hljs-title class_\">GradientDescentOptimizer</span>(learning_rate).<span class=\"hljs-title function_\">minimize</span>(cost)<br>training_epochs = <span class=\"hljs-number\">25</span><br>batch_size = <span class=\"hljs-number\">100</span><br>display_step = <span class=\"hljs-number\">1</span><br><br>saver = tf.<span class=\"hljs-property\">train</span>.<span class=\"hljs-title class_\">Saver</span>()<br>model_path = <span class=\"hljs-string\">&quot;log/521model.ckpt&quot;</span><br><br># 启动session<br><span class=\"hljs-keyword\">with</span> tf.<span class=\"hljs-title class_\">Session</span>() <span class=\"hljs-keyword\">as</span> <span class=\"hljs-attr\">sess</span>:<br>    sess.<span class=\"hljs-title function_\">run</span>(tf.<span class=\"hljs-title function_\">global_variables_initializer</span>())# <span class=\"hljs-title class_\">Initializing</span> <span class=\"hljs-variable constant_\">OP</span><br>    # 启动循环开始训练<br>    <span class=\"hljs-keyword\">for</span> epoch <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_\">range</span>(training_epochs):<br>        avg_cost = <span class=\"hljs-number\">0.</span><br>        total_batch = <span class=\"hljs-title function_\">int</span>(mnist.<span class=\"hljs-property\">train</span>.<span class=\"hljs-property\">num_examples</span>/batch_size)<br>        # 循环所有数据集<br>        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_\">range</span>(total_batch):<br>            batch_xs, batch_ys = mnist.<span class=\"hljs-property\">train</span>.<span class=\"hljs-title function_\">next_batch</span>(batch_size)<br>            # 运行优化器<br>            _, c = sess.<span class=\"hljs-title function_\">run</span>([optimizer, cost], feed_dict=&#123;<br>    <span class=\"hljs-attr\">x</span>: batch_xs,<br>                                                       <span class=\"hljs-attr\">y</span>: batch_ys&#125;)<br>            # 计算平均loss值<br>            avg_cost += c / total_batch<br>        # 显示训练中的详细信息<br>        <span class=\"hljs-keyword\">if</span> (epoch+<span class=\"hljs-number\">1</span>) % display_step == <span class=\"hljs-number\">0</span>:<br>           print (<span class=\"hljs-string\">&quot;Epoch:&quot;</span>, <span class=\"hljs-string\">&#x27;%04d&#x27;</span> % (epoch+<span class=\"hljs-number\">1</span>), <span class=\"hljs-string\">&quot;cost=&quot;</span>, <span class=\"hljs-string\">&quot;&#123;:.9f&#125;&quot;</span>.            <span class=\"hljs-title function_\">format</span>(avg_cost))<br><br>    <span class=\"hljs-title function_\">print</span>( <span class=\"hljs-string\">&quot; Finished!&quot;</span>)<br>    # 测试 model<br>    correct_prediction = tf.<span class=\"hljs-title function_\">equal</span>(tf.<span class=\"hljs-title function_\">argmax</span>(pred, <span class=\"hljs-number\">1</span>), tf.<span class=\"hljs-title function_\">argmax</span>(y, <span class=\"hljs-number\">1</span>))<br>    # 计算准确率<br>    accuracy = tf.<span class=\"hljs-title function_\">reduce_mean</span>(tf.<span class=\"hljs-title function_\">cast</span>(correct_prediction, tf.<span class=\"hljs-property\">float32</span>))<br>    print (<span class=\"hljs-string\">&quot;Accuracy:&quot;</span>, accuracy.<span class=\"hljs-built_in\">eval</span>(&#123;<br>    <span class=\"hljs-attr\">x</span>: mnist.<span class=\"hljs-property\">test</span>.<span class=\"hljs-property\">images</span>, <span class=\"hljs-attr\">y</span>: mnist.<span class=\"hljs-property\">test</span>.<span class=\"hljs-property\">labels</span>&#125;))<br><br>    #     # 保存模型<br>    save_path = saver.<span class=\"hljs-title function_\">save</span>(sess, model_path)<br>    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;Model saved in file: %s&quot;</span> % save_path)<br><br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;Starting 2nd session...&quot;</span>)<br><span class=\"hljs-keyword\">with</span> tf.<span class=\"hljs-title class_\">Session</span>() <span class=\"hljs-keyword\">as</span> <span class=\"hljs-attr\">sess</span>:<br>    # 初始化变量<br>    sess.<span class=\"hljs-title function_\">run</span>(tf.<span class=\"hljs-title function_\">global_variables_initializer</span>())<br>    # 恢复模型变量<br>    saver.<span class=\"hljs-title function_\">restore</span>(sess, model_path)<br><br>    # 测试 model<br>    correct_prediction = tf.<span class=\"hljs-title function_\">equal</span>(tf.<span class=\"hljs-title function_\">argmax</span>(pred, <span class=\"hljs-number\">1</span>), tf.<span class=\"hljs-title function_\">argmax</span>(y, <span class=\"hljs-number\">1</span>))<br>    # 计算准确率<br>    accuracy = tf.<span class=\"hljs-title function_\">reduce_mean</span>(tf.<span class=\"hljs-title function_\">cast</span>(correct_prediction, tf.<span class=\"hljs-property\">float32</span>))<br>    print (<span class=\"hljs-string\">&quot;Accuracy:&quot;</span>, accuracy.<span class=\"hljs-built_in\">eval</span>(&#123;<br>    <span class=\"hljs-attr\">x</span>: mnist.<span class=\"hljs-property\">test</span>.<span class=\"hljs-property\">images</span>, <span class=\"hljs-attr\">y</span>: mnist.      test.<span class=\"hljs-property\">labels</span>&#125;))<br><br>    output = tf.<span class=\"hljs-title function_\">argmax</span>(pred, <span class=\"hljs-number\">1</span>)<br>    batch_xs, batch_ys = mnist.<span class=\"hljs-property\">train</span>.<span class=\"hljs-title function_\">next_batch</span>(<span class=\"hljs-number\">2</span>)<br>    outputval,predv = sess.<span class=\"hljs-title function_\">run</span>([output,pred], feed_dict=&#123;<br>    <span class=\"hljs-attr\">x</span>: batch_xs&#125;)<br>    <span class=\"hljs-title function_\">print</span>(outputval,predv,batch_ys)<br>    im = batch_xs[<span class=\"hljs-number\">0</span>]<br>    im = im.<span class=\"hljs-title function_\">reshape</span>(-<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">28</span>)<br>    pylab.<span class=\"hljs-title function_\">imshow</span>(im)<br>    pylab.<span class=\"hljs-title function_\">show</span>()<br><br>    im = batch_xs[<span class=\"hljs-number\">1</span>]<br>    im = im.<span class=\"hljs-title function_\">reshape</span>(-<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">28</span>)<br>    pylab.<span class=\"hljs-title function_\">imshow</span>(im)<br>    pylab.<span class=\"hljs-title function_\">show</span>()<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"预备知识\"><a href=\"#预备知识\" class=\"headerlink\" title=\"预备知识\"></a>预备知识</h4><p>python语言基础</p>\n<h4 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h4><p>导入图片数据集，分析图片的特点、定义变量，构建模型，训练模型并输出中间状态参数，测试、保存、读取模型</p>\n<h4 id=\"如何搞定它\"><a href=\"#如何搞定它\" class=\"headerlink\" title=\"如何搞定它\"></a>如何搞定它</h4><h5 id=\"1-1导入图片数据集\"><a href=\"#1-1导入图片数据集\" class=\"headerlink\" title=\"1.1导入图片数据集\"></a>1.1导入图片数据集</h5><p>首先来看看数据集是什么样的。<br>MNIST是一个入门级的计算机视觉数据集。当我们开始学习编程时，第一件事往往是学习打印Hello World。在机器学习入门的领域里，我们会用MNIST数据集来实验各种模型。</p>\n<p>1.1.1数据集介绍</p>\n<p>MNIST里包含各种手写数字图片，如图所示。<br><img src=\"/../images/7192d300-a66b-4804-9c83-4299a47a6021.png\" alt=\"在这里插入图片描述\"><br>它也包含每一张图片对应的标签，告诉我们这个是数字几。例如，上面这4张图片的标签分别是5、0、4、1。</p>\n<p>1.1.2下载并安装MNIST数据集</p>\n<p>介绍完MNIST数据集后，下面来演示一下如何通过代码来对其操作。</p>\n<p>（1）利用TensorFlow代码下载MNIST</p>\n<p>TensorFlow提供了一个库，可以直接用来自动下载与安装MNIST，见如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"># <span class=\"hljs-variable constant_\">MNIST</span>数据集<br><span class=\"hljs-keyword\">from</span> tensorflow.<span class=\"hljs-property\">examples</span>.<span class=\"hljs-property\">tutorials</span>.<span class=\"hljs-property\">mnist</span> <span class=\"hljs-keyword\">import</span> input_data<br>mnist=input_data.<span class=\"hljs-title function_\">read_data_sets</span>(<span class=\"hljs-string\">&quot;MNIST_data/&quot;</span>,one_hot=<span class=\"hljs-title class_\">True</span>))<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">运行上面的代码，会自动下载数据集并将文件解压到当前代码所在同级目录下的MNIST_data文件夹下。<br>注意：代码中的one_hot=<span class=\"hljs-title class_\">True</span>，表示将样本标签转化为one_hot编码。<br></code></pre></td></tr></table></figure>\n\n<p>举例来解释one_hot编码：<br>假如一共10类。0的one_hot为1000000000，1的one_hot为0100000000，2的one_hot为0010000000，3的one_hot为0001000000……依此类推。只有一个位为1，1所在的位置就代表着第几类。</p>\n<p>MNIST数据集中的图片是28×28像素，所以，每一幅图就是1行784（28×28）列的数据，括号中的每一个值代表一个像素。</p>\n<ul>\n<li>如果是黑白的图片，图片中黑色的地方数值为0；有图案的地方，数值为0～255之间的数字，代表其颜色的深度。</li>\n<li>如果是彩色的图片，一个像素会由3个值来表示RGB（红、黄、蓝）。在后面讲解其他数据集时会具体讲到。</li>\n</ul>\n<p>接下来通过几行代码将MNIST里面的信息打印出来，看看它的具体内容。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"># <span class=\"hljs-variable constant_\">MNIST</span>数据集（续）<br>print (<span class=\"hljs-string\">&#x27;输入数据:&#x27;</span>,mnist.<span class=\"hljs-property\">train</span>.<span class=\"hljs-property\">images</span>)<br>print (<span class=\"hljs-string\">&#x27;输入数据打印shape:&#x27;</span>,mnist.<span class=\"hljs-property\">train</span>.<span class=\"hljs-property\">images</span>.<span class=\"hljs-property\">shape</span>)<br><span class=\"hljs-keyword\">import</span> pylab<br>im = mnist.<span class=\"hljs-property\">train</span>.<span class=\"hljs-property\">images</span>[<span class=\"hljs-number\">1</span>]<br>im = im.<span class=\"hljs-title function_\">reshape</span>(-<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">28</span>)<br>pylab.<span class=\"hljs-title function_\">imshow</span>(im)<br>pylab.<span class=\"hljs-title function_\">show</span>()<br></code></pre></td></tr></table></figure>\n\n<p>运行上面的代码，输出信息如下：</p>\n<p>输出结果如图所示<br><img src=\"/../images/147d32f7-4009-4b9f-bdb5-ba8d8e55dc6b.png\" alt=\"在这里插入图片描述\"><br>刚开始的打印信息是解压数据集的意思。如果是第一次运行，还会显示下载数据的相关信息。<br>接着打印出来的是训练集的图片信息，是一个55000行、784列的矩阵。即，训练集里有55000张图片。</p>\n<p>（2）MNIST数据集组成</p>\n<p>在MNIST训练数据集中，mnist.train.images是一个形状为[55000，784]的张量。其中，第1个维度数字用来索引图片，第2个维度数字用来索引每张图片中的像素点。此张量里的每一个元素，都表示某张图片里的某个像素的强度值，值介于0～255之间。<br>MNIST里包含3个数据集：第一个是训练数据集，另外两个分别是测试数据集（mnist.test）和验证数据集（mnist.validation）。可使用如下命令查看里面的数据信息：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable constant_\">MNIST</span>数据集（续）<br>print (<span class=\"hljs-string\">&#x27;输入数据打印shape:&#x27;</span>,mnist.<span class=\"hljs-property\">test</span>.<span class=\"hljs-property\">images</span>.<span class=\"hljs-property\">shape</span>)<br>print (<span class=\"hljs-string\">&#x27;输入数据打印shape:&#x27;</span>,mnist.<span class=\"hljs-property\">validation</span>.<span class=\"hljs-property\">images</span>.<span class=\"hljs-property\">shape</span>)<br></code></pre></td></tr></table></figure>\n\n<p>运行完上面的命令，可以发现在测试数据集里有10000条样本图片，验证数据集里有5000个图片。</p>\n<p>在实际的机器学习模型设计时，样本一般分为3部分：</p>\n<ul>\n<li>一部分用于训练；</li>\n<li>一部分用于评估训练过程中的准确度（测试数据集）；</li>\n<li>一部分用于评估最终模型的准确度（验证数据集）。</li>\n</ul>\n<p>训练过程中，模型并没有遇到过验证数据集中的数据，所以利用验证数据集可以评估出模型的准确度。这个准确度越高，代表模型的泛化能力越强。</p>\n<p>另外，这3个数据集还有分别对应的3个文件（标签文件），用来标注每个图片上的数字是几。把图片和标签放在一起，称为“样本”。通过样本来就可以实现一个有监督信号的深度学习模型。</p>\n<p>相对应的，MNIST数据集的标签是介于0～9之间的数字，用来描述给定图片里表示的数字。标签数据是“one-hot vectors”：一个one-hot向量，除了某一位的数字是1外，其余各维度数字都是0。例如，标签0将表示为（[1，0，0，0，0，0，0，0，0，0，0]）。因此，mnist.train.labels是一个[55000，10]的数字矩阵。</p>\n<h5 id=\"1-2分析图片的特点，定义变量\"><a href=\"#1-2分析图片的特点，定义变量\" class=\"headerlink\" title=\"1.2分析图片的特点，定义变量\"></a>1.2分析图片的特点，定义变量</h5><p>由于输入图片是个55000×784的矩阵，所以先创建一个[None，784]的占位符x和一个[None，10]的占位符y，然后使用feed机制将图片和标签输入进去。具体代码如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"># <span class=\"hljs-variable constant_\">MNIST</span>分类<br><span class=\"hljs-keyword\">import</span> tensorflow <span class=\"hljs-keyword\">as</span> tf  # 导入tensorflow库<br><span class=\"hljs-keyword\">from</span> tensorflow.<span class=\"hljs-property\">examples</span>.<span class=\"hljs-property\">tutorials</span>.<span class=\"hljs-property\">mnist</span> <span class=\"hljs-keyword\">import</span> input_data<br>mnist = input_data.<span class=\"hljs-title function_\">read_data_sets</span>(<span class=\"hljs-string\">&quot;MNIST_data/&quot;</span>,one_hot=<span class=\"hljs-title class_\">True</span>)<br><span class=\"hljs-keyword\">import</span> pylab <br>tf.<span class=\"hljs-title function_\">reset_default_graph</span>()<br># 定义占位符<br>x = tf.<span class=\"hljs-title function_\">placeholder</span>(tf.<span class=\"hljs-property\">float32</span>, [<span class=\"hljs-title class_\">None</span>, <span class=\"hljs-number\">784</span>]) # <span class=\"hljs-variable constant_\">MNIST</span>数据集的维度是  <span class=\"hljs-number\">28</span>×<span class=\"hljs-number\">28</span>=<span class=\"hljs-number\">784</span><br>y = tf.<span class=\"hljs-title function_\">placeholder</span>(tf.<span class=\"hljs-property\">float32</span>, [<span class=\"hljs-title class_\">None</span>, <span class=\"hljs-number\">10</span>])  # 数字<span class=\"hljs-number\">0</span>～<span class=\"hljs-number\">9</span> ，共<span class=\"hljs-number\">10</span>个类别<br>#代码中第<span class=\"hljs-number\">8</span>行的<span class=\"hljs-title class_\">None</span>，表示此张量的第一个维度可以是任何长度的。x就代表能够输入任意数量的<span class=\"hljs-variable constant_\">MNIST</span>图像，每一张图展平成<span class=\"hljs-number\">784</span>维的向量。<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"1-3构建模型\"><a href=\"#1-3构建模型\" class=\"headerlink\" title=\"1.3构建模型\"></a>1.3构建模型</h5><p>样本完成后就可以构建模型了。下面列出了构建模型的相关步骤。</p>\n<p>1.3.1　定义学习参数</p>\n<p>模型也需要权重值和偏置量，它们被统一叫做学习参数。在TensorFlow里，使用Variable来定义学习参数。<br>一个Variable代表一个可修改的张量，定义在TensorFlow的图（一个执行任务）中，其本身也是一种变量。使用Variable定义的学习参数可以用于计算输入值，也可以在计算中被修改。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"># <span class=\"hljs-variable constant_\">MNIST</span>分类（续）<br>W = tf.<span class=\"hljs-title class_\">Variable</span>(tf.<span class=\"hljs-title function_\">random_normal</span>(([<span class=\"hljs-number\">784</span>,<span class=\"hljs-number\">10</span>]))<br>b = tf.<span class=\"hljs-title class_\">Variable</span>(tf.<span class=\"hljs-title function_\">zeros</span>([<span class=\"hljs-number\">10</span>]))<br></code></pre></td></tr></table></figure>\n\n<p>在这里赋予tf.Variable不同的初值来创建不同的参数。一般将W设为一个随机值，将b设为0。<br>注意：W的维度是[784，10]，因为想要用784维的图片向量乘以它，以得到一个10维的证据值向量，每一位对应不同数字类。b的形状是[10]，所以可以直接把它加到输出上面。</p>\n<p>1.3.2　定义输出节点</p>\n<p>有了输入和模型参数，接着便可以将它们串起来构建成真正的模型。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"># <span class=\"hljs-variable constant_\">MNIST</span>分类（续）<br>pred = tf.<span class=\"hljs-property\">nn</span>.<span class=\"hljs-title function_\">softmax</span>(tf.<span class=\"hljs-title function_\">matmul</span>(x, W) + b) # <span class=\"hljs-title class_\">Softmax</span>分类<br></code></pre></td></tr></table></figure>\n\n<p>首先，用tf.matmul（x，W）表示x乘以W，这里x是一个二维张量，拥有多个输入。然后再加上b，把它们的和输入到tf.nn.softmax函数里。<br>至此就构建好了正向传播的结构。也就是表明，只要模型中的参数合适，通过具体的数据输入，就能得到我们想要的分类。</p>\n<p>1.3.3　定义反向传播的结构</p>\n<p>下面定义一个反向传播的结构，编译训练模型，以得到合适的参数。<br>这里涉及一个“学习率”的概念。学习率，是指每次改变学习参数的大小。在这里读者只要先有个概念即可，后面章节还会详细介绍。<br>先看下面代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">代码<span class=\"hljs-number\">1</span>-<span class=\"hljs-number\">2</span>　<span class=\"hljs-variable constant_\">MNIST</span>分类（续）<br># 损失函数<br>cost=tf.<span class=\"hljs-title function_\">reduce_mean</span>(-tf.<span class=\"hljs-title function_\">reduce_sum</span>(y*tf.<span class=\"hljs-title function_\">log</span>(pred),reduction_indices=<span class=\"hljs-number\">1</span>))<br>  <br># 定义参数<br>learning_rate = <span class=\"hljs-number\">0.01</span><br># 使用梯度下降优化器<br>optimizer=tf.<span class=\"hljs-property\">train</span>.<span class=\"hljs-title class_\">GradientDescentOptimizer</span>(learning_rate).<span class=\"hljs-title function_\">minimize</span>(cost)<br></code></pre></td></tr></table></figure>\n\n<p>上面的代码可以这样来理解：<br>（1）将生成的pred与样本标签y进行一次交叉熵的运算，然后取平均值。<br>（2）将这个结果作为一次正向传播的误差，通过梯度下降的优化方法找到能够使这个误差最小化的b和W的偏移量。<br>（3）更新b和W，使其调整为合适的参数。<br>整个过程就是不断地让损失值（误差值cost）变小。因为损失值越小，才能表明输出的结果跟标签数据越相近。当cost小到我们的需求时，这时的b和W就是训练出来的合适值。</p>\n<h5 id=\"1-4-训练模型并输出中间状态参数\"><a href=\"#1-4-训练模型并输出中间状态参数\" class=\"headerlink\" title=\"1.4　训练模型并输出中间状态参数\"></a>1.4　训练模型并输出中间状态参数</h5><p>现在开始真正地训练模型了，先定义训练相关的参数。<br>下面代码中</p>\n<ul>\n<li>第1行中，training_epochs代表要把整个训练样本集迭代25次；</li>\n<li>第2行中，batch_size代表在训练过程中一次取100条数据进行训练</li>\n<li>第3行中，display_step代表每训练一次就把具体的中间状态显示出来。</li>\n</ul>\n<p>注意：batch_size参数代表的意义很关键，在深度学习中，都是将数据按批次地向里面放的。在后面章节中还会详细介绍这么做的目的。<br>参数定义好后，启动一个session就可以开始训练过程了。session中有两个run，第一个run是运行初始化，第二个run是运行具体的运算模型。模型运算之后便将里面的状态打印出来。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">training_epochs = <span class=\"hljs-number\">25</span><br>batch_size = <span class=\"hljs-number\">100</span><br>display_step = <span class=\"hljs-number\">1</span><br><br>saver = tf.<span class=\"hljs-property\">train</span>.<span class=\"hljs-title class_\">Saver</span>()<br>model_path = <span class=\"hljs-string\">&quot;log/521model.ckpt&quot;</span><br><br># 启动session<br><span class=\"hljs-keyword\">with</span> tf.<span class=\"hljs-title class_\">Session</span>() <span class=\"hljs-keyword\">as</span> <span class=\"hljs-attr\">sess</span>:<br>    sess.<span class=\"hljs-title function_\">run</span>(tf.<span class=\"hljs-title function_\">global_variables_initializer</span>())# <span class=\"hljs-title class_\">Initializing</span> <span class=\"hljs-variable constant_\">OP</span><br>    # 启动循环开始训练<br>    <span class=\"hljs-keyword\">for</span> epoch <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_\">range</span>(training_epochs):<br>        avg_cost = <span class=\"hljs-number\">0.</span><br>        total_batch = <span class=\"hljs-title function_\">int</span>(mnist.<span class=\"hljs-property\">train</span>.<span class=\"hljs-property\">num_examples</span>/batch_size)<br>        # 循环所有数据集<br>        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_\">range</span>(total_batch):<br>            batch_xs, batch_ys = mnist.<span class=\"hljs-property\">train</span>.<span class=\"hljs-title function_\">next_batch</span>(batch_size)<br>            # 运行优化器<br>            _, c = sess.<span class=\"hljs-title function_\">run</span>([optimizer, cost], feed_dict=&#123;<br>    <span class=\"hljs-attr\">x</span>: batch_xs,<br>                                                       <span class=\"hljs-attr\">y</span>: batch_ys&#125;)<br>            # 计算平均loss值<br>            avg_cost += c / total_batch<br>        # 显示训练中的详细信息<br>        <span class=\"hljs-keyword\">if</span> (epoch+<span class=\"hljs-number\">1</span>) % display_step == <span class=\"hljs-number\">0</span>:<br>           print (<span class=\"hljs-string\">&quot;Epoch:&quot;</span>, <span class=\"hljs-string\">&#x27;%04d&#x27;</span> % (epoch+<span class=\"hljs-number\">1</span>), <span class=\"hljs-string\">&quot;cost=&quot;</span>, <span class=\"hljs-string\">&quot;&#123;:.9f&#125;&quot;</span>.            <span class=\"hljs-title function_\">format</span>(avg_cost))<br><br>    <span class=\"hljs-title function_\">print</span>( <span class=\"hljs-string\">&quot; Finished!&quot;</span>)<br></code></pre></td></tr></table></figure>\n\n<p>执行上面的代码，会输出如下信息：<br><img src=\"/../images/f05686cc-f555-45cc-af01-76a123f2838e.png\" alt=\"在这里插入图片描述\"></p>\n<p>这里输出的中间状态是cost损失值。读者也可以把自己关心的内容打印出来。可以看到，从第1次迭代到第25次迭代的损失值在逐渐减小，最终的误差只有0.8。</p>\n<h5 id=\"1-5-测试模型\"><a href=\"#1-5-测试模型\" class=\"headerlink\" title=\"1.5　测试模型\"></a>1.5　测试模型</h5><p>还记得MNIST里面有测试数据吗？现在我们使用测试数据来测试一下训练完的模型吧。<br>与前面的过程类似，也是先将计算测试的网络结构建立起来，然后通过最终节点的eval将测试值运算出来。<br>注意：这个过程仍然是在session里进行的。<br>测试错误率的算法是：直接判断预测的结果与真实的标签是否相同，如是相同的就表明是正确的，如是不相同的就表示是错误的。然后将正确的个数除以总个数，得到的值即为正确率。由于是onehot编码，这里使用了tf.argmax函数返回onehot编码中数值为1的那个元素的下标。下面是具体代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">#<span class=\"hljs-variable constant_\">MNIST</span>分类（续）<br>    correct_prediction = tf.<span class=\"hljs-title function_\">equal</span>(tf.<span class=\"hljs-title function_\">argmax</span>(pred, <span class=\"hljs-number\">1</span>), tf.<span class=\"hljs-title function_\">argmax</span>(y, <span class=\"hljs-number\">1</span>))<br>    # 计算准确率<br>    accuracy = tf.<span class=\"hljs-title function_\">reduce_mean</span>(tf.<span class=\"hljs-title function_\">cast</span>(correct_prediction, tf.<span class=\"hljs-property\">float32</span>))<br>    print (<span class=\"hljs-string\">&quot;Accuracy:&quot;</span>, accuracy.<span class=\"hljs-built_in\">eval</span>(&#123;<br>    <span class=\"hljs-attr\">x</span>: mnist.<span class=\"hljs-property\">test</span>.<span class=\"hljs-property\">images</span>, <span class=\"hljs-attr\">y</span>: mnist.<span class=\"hljs-property\">test</span>.<span class=\"hljs-property\">labels</span>&#125;))<br></code></pre></td></tr></table></figure>\n\n<p>上面代码执行后，显示信息如下：<br><img src=\"/../images/2bcb27c0-4e9d-4ea7-8de2-bd52513612ed.png\" alt=\"在这里插入图片描述\"></p>\n<p>测试正确率的算法与损失值的算法略有差别，但代表的意义却很类似。当然，也可以直接拿计算损失值的交叉熵结果来代表模型测试的错误率。<br>注意：<br>（1）并不是所有模型的测试错误率和训练时的最后一次损失值都很接近，这取决于训练样本和测试样本的分布情况，也取决于模型本身的拟合质量。关于拟合质量问题，将在后面章节详细介绍。<br>（2）读者自己运行时，得到的值可能和本书中的值不一样。甚至每次运行时，得到的值也不一样。原因是每次初始的权重w都是随机的。由于初始权重不同，而且每次训练的批次数据也不同，所以最终生成的模型也不会完全相同。但如果核心算法保持一致，则会保证最终的结果不会有太大的偏差。</p>\n<h5 id=\"1-6-保存模型\"><a href=\"#1-6-保存模型\" class=\"headerlink\" title=\"1.6　保存模型\"></a>1.6　保存模型</h5><p>下面开始讲解如何保存模型。<br>首先要建立一个saver和一个路径，然后通过调用save，自动将session中的参数保存起来，见如下代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"># <span class=\"hljs-variable constant_\">MNIST</span>分类（续）   <br>\t# 保存模型<br>    save_path = saver.<span class=\"hljs-title function_\">save</span>(sess, model_path)<br>    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;Model saved in file: %s&quot;</span> % save_path)<br></code></pre></td></tr></table></figure>\n\n<p>上面代码的作用是保存模型，并将模型保存的路径打印出来。当然，在这段代码运行之前，需要添加saver和model_path的定义。来到前面session创建之前添加如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"># <span class=\"hljs-variable constant_\">MNIST</span>分类（续）<br>saver = tf.<span class=\"hljs-property\">train</span>.<span class=\"hljs-title class_\">Saver</span>()<br>model_path = <span class=\"hljs-string\">&quot;log/521model.ckpt&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>执行上述的全部代码后，会打印出存储位置<br><img src=\"/../images/48d4c89b-ee38-440f-a3da-638413985e4e.png\" alt=\"在这里插入图片描述\"></p>\n<h5 id=\"1-7-读取模型\"><a href=\"#1-7-读取模型\" class=\"headerlink\" title=\"1.7　读取模型\"></a>1.7　读取模型</h5><p>将模型存储好后，下面来做一个实验：读取模型并将两张图片放进去让模型预测结果，然后将两张图片极其对应的标签一并显示出来。<br>在整个代码执行过程中，对于网络模型的定义不变，只是重新建立一个session而已，所有的操作都在这个新的session中完成。具体细节见代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">#　<span class=\"hljs-variable constant_\">MNIST</span>分类（续）<br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;Starting 2nd session...&quot;</span>)<br><span class=\"hljs-keyword\">with</span> tf.<span class=\"hljs-title class_\">Session</span>() <span class=\"hljs-keyword\">as</span> <span class=\"hljs-attr\">sess</span>:<br>    # 初始化变量<br>    sess.<span class=\"hljs-title function_\">run</span>(tf.<span class=\"hljs-title function_\">global_variables_initializer</span>())<br>    # 恢复模型变量<br>    saver.<span class=\"hljs-title function_\">restore</span>(sess, model_path)<br><br>    # 测试 model<br>    correct_prediction = tf.<span class=\"hljs-title function_\">equal</span>(tf.<span class=\"hljs-title function_\">argmax</span>(pred, <span class=\"hljs-number\">1</span>), tf.<span class=\"hljs-title function_\">argmax</span>(y, <span class=\"hljs-number\">1</span>))<br>    # 计算准确率<br>    accuracy = tf.<span class=\"hljs-title function_\">reduce_mean</span>(tf.<span class=\"hljs-title function_\">cast</span>(correct_prediction, tf.<span class=\"hljs-property\">float32</span>))<br>    print (<span class=\"hljs-string\">&quot;Accuracy:&quot;</span>, accuracy.<span class=\"hljs-built_in\">eval</span>(&#123;<br>    <span class=\"hljs-attr\">x</span>: mnist.<span class=\"hljs-property\">test</span>.<span class=\"hljs-property\">images</span>, <span class=\"hljs-attr\">y</span>: mnist.      test.<span class=\"hljs-property\">labels</span>&#125;))<br><br>    output = tf.<span class=\"hljs-title function_\">argmax</span>(pred, <span class=\"hljs-number\">1</span>)<br>    batch_xs, batch_ys = mnist.<span class=\"hljs-property\">train</span>.<span class=\"hljs-title function_\">next_batch</span>(<span class=\"hljs-number\">2</span>)<br>    outputval,predv = sess.<span class=\"hljs-title function_\">run</span>([output,pred], feed_dict=&#123;<br>    <span class=\"hljs-attr\">x</span>: batch_xs&#125;)<br>    <span class=\"hljs-title function_\">print</span>(outputval,predv,batch_ys)<br>    im = batch_xs[<span class=\"hljs-number\">0</span>]<br>    im = im.<span class=\"hljs-title function_\">reshape</span>(-<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">28</span>)<br>    pylab.<span class=\"hljs-title function_\">imshow</span>(im)<br>    pylab.<span class=\"hljs-title function_\">show</span>()<br><br>    im = batch_xs[<span class=\"hljs-number\">1</span>]<br>    im = im.<span class=\"hljs-title function_\">reshape</span>(-<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">28</span>)<br>    pylab.<span class=\"hljs-title function_\">imshow</span>(im)<br>    pylab.<span class=\"hljs-title function_\">show</span>()<br></code></pre></td></tr></table></figure>\n\n<p>以上代码可以替代原来的session，也可以直接放到代码后面，将前面的session注释掉。<br>输出结果<br><img src=\"/../images/2323a693-45b2-4fda-98f3-a12bb2d71d5b.png\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>第一行是模型的准确率，接下来是3个数组。</li>\n<li>第一个数组是输出的预测结果[3,6]</li>\n<li>第二个大的数组比较大，是预测出来的真实输出值，哪一项数值越大，代表对应的概率越大.</li>\n<li>第三个大的数组元素都是0和1，是图片实际的标签值onehot编码表示的数字</li>\n</ul>\n<p>完整代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> tensorflow.<span class=\"hljs-property\">compat</span>.<span class=\"hljs-property\">v1</span> <span class=\"hljs-keyword\">as</span> tf  # 导入tensorflow库#<br>tf.<span class=\"hljs-title function_\">disable_v2_behavior</span>()<br><br><span class=\"hljs-keyword\">from</span> tensorflow.<span class=\"hljs-property\">examples</span>.<span class=\"hljs-property\">tutorials</span>.<span class=\"hljs-property\">mnist</span> <span class=\"hljs-keyword\">import</span> input_data<br>mnist = input_data.<span class=\"hljs-title function_\">read_data_sets</span>(<span class=\"hljs-string\">&quot;MNIST_data/&quot;</span>, one_hot=<span class=\"hljs-title class_\">True</span>)<br><br># print (<span class=\"hljs-string\">&#x27;输入数据:&#x27;</span>,mnist.<span class=\"hljs-property\">train</span>.<span class=\"hljs-property\">images</span>)<br># print (<span class=\"hljs-string\">&#x27;输入数据打印shape:&#x27;</span>,mnist.<span class=\"hljs-property\">train</span>.<span class=\"hljs-property\">images</span>.<span class=\"hljs-property\">shape</span>)<br><br><span class=\"hljs-keyword\">import</span> pylab<br>im = mnist.<span class=\"hljs-property\">train</span>.<span class=\"hljs-property\">images</span>[<span class=\"hljs-number\">1</span>]<br>im = im.<span class=\"hljs-title function_\">reshape</span>(-<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">28</span>)<br>pylab.<span class=\"hljs-title function_\">imshow</span>(im)<br>pylab.<span class=\"hljs-title function_\">show</span>()<br># print (<span class=\"hljs-string\">&#x27;输入数据打印shape:&#x27;</span>,mnist.<span class=\"hljs-property\">test</span>.<span class=\"hljs-property\">images</span>.<span class=\"hljs-property\">shape</span>)<br># print (<span class=\"hljs-string\">&#x27;输入数据打印shape:&#x27;</span>,mnist.<span class=\"hljs-property\">validation</span>.<span class=\"hljs-property\">images</span>.<span class=\"hljs-property\">shape</span>)<br><br>tf.<span class=\"hljs-title function_\">reset_default_graph</span>()<br># 定义占位符<br>x = tf.<span class=\"hljs-title function_\">placeholder</span>(tf.<span class=\"hljs-property\">float32</span>, [<span class=\"hljs-title class_\">None</span>, <span class=\"hljs-number\">784</span>]) # <span class=\"hljs-variable constant_\">MNIST</span>数据集的维度是  <span class=\"hljs-number\">28</span>×<span class=\"hljs-number\">28</span>=<span class=\"hljs-number\">784</span><br>y = tf.<span class=\"hljs-title function_\">placeholder</span>(tf.<span class=\"hljs-property\">float32</span>, [<span class=\"hljs-title class_\">None</span>, <span class=\"hljs-number\">10</span>])  # 数字<span class=\"hljs-number\">0</span>～<span class=\"hljs-number\">9</span> ，共<span class=\"hljs-number\">10</span>个类别<br>W = tf.<span class=\"hljs-title class_\">Variable</span>(tf.<span class=\"hljs-title function_\">random_normal</span>([<span class=\"hljs-number\">784</span>,<span class=\"hljs-number\">10</span>]))<br>b = tf.<span class=\"hljs-title class_\">Variable</span>(tf.<span class=\"hljs-title function_\">zeros</span>([<span class=\"hljs-number\">10</span>]))<br>pred = tf.<span class=\"hljs-property\">nn</span>.<span class=\"hljs-title function_\">softmax</span>(tf.<span class=\"hljs-title function_\">matmul</span>(x, W) + b) # <span class=\"hljs-title class_\">Softmax</span>分类<br><br># 损失函数<br>cost=tf.<span class=\"hljs-title function_\">reduce_mean</span>(-tf.<span class=\"hljs-title function_\">reduce_sum</span>(y*tf.<span class=\"hljs-title function_\">log</span>(pred),reduction_indices=<span class=\"hljs-number\">1</span>))<br><br># 定义参数<br>learning_rate = <span class=\"hljs-number\">0.01</span><br># 使用梯度下降优化器<br>optimizer=tf.<span class=\"hljs-property\">train</span>.<span class=\"hljs-title class_\">GradientDescentOptimizer</span>(learning_rate).<span class=\"hljs-title function_\">minimize</span>(cost)<br>training_epochs = <span class=\"hljs-number\">25</span><br>batch_size = <span class=\"hljs-number\">100</span><br>display_step = <span class=\"hljs-number\">1</span><br><br>saver = tf.<span class=\"hljs-property\">train</span>.<span class=\"hljs-title class_\">Saver</span>()<br>model_path = <span class=\"hljs-string\">&quot;log/521model.ckpt&quot;</span><br><br># 启动session<br><span class=\"hljs-keyword\">with</span> tf.<span class=\"hljs-title class_\">Session</span>() <span class=\"hljs-keyword\">as</span> <span class=\"hljs-attr\">sess</span>:<br>    sess.<span class=\"hljs-title function_\">run</span>(tf.<span class=\"hljs-title function_\">global_variables_initializer</span>())# <span class=\"hljs-title class_\">Initializing</span> <span class=\"hljs-variable constant_\">OP</span><br>    # 启动循环开始训练<br>    <span class=\"hljs-keyword\">for</span> epoch <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_\">range</span>(training_epochs):<br>        avg_cost = <span class=\"hljs-number\">0.</span><br>        total_batch = <span class=\"hljs-title function_\">int</span>(mnist.<span class=\"hljs-property\">train</span>.<span class=\"hljs-property\">num_examples</span>/batch_size)<br>        # 循环所有数据集<br>        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_\">range</span>(total_batch):<br>            batch_xs, batch_ys = mnist.<span class=\"hljs-property\">train</span>.<span class=\"hljs-title function_\">next_batch</span>(batch_size)<br>            # 运行优化器<br>            _, c = sess.<span class=\"hljs-title function_\">run</span>([optimizer, cost], feed_dict=&#123;<br>    <span class=\"hljs-attr\">x</span>: batch_xs,<br>                                                       <span class=\"hljs-attr\">y</span>: batch_ys&#125;)<br>            # 计算平均loss值<br>            avg_cost += c / total_batch<br>        # 显示训练中的详细信息<br>        <span class=\"hljs-keyword\">if</span> (epoch+<span class=\"hljs-number\">1</span>) % display_step == <span class=\"hljs-number\">0</span>:<br>           print (<span class=\"hljs-string\">&quot;Epoch:&quot;</span>, <span class=\"hljs-string\">&#x27;%04d&#x27;</span> % (epoch+<span class=\"hljs-number\">1</span>), <span class=\"hljs-string\">&quot;cost=&quot;</span>, <span class=\"hljs-string\">&quot;&#123;:.9f&#125;&quot;</span>.            <span class=\"hljs-title function_\">format</span>(avg_cost))<br><br>    <span class=\"hljs-title function_\">print</span>( <span class=\"hljs-string\">&quot; Finished!&quot;</span>)<br>    # 测试 model<br>    correct_prediction = tf.<span class=\"hljs-title function_\">equal</span>(tf.<span class=\"hljs-title function_\">argmax</span>(pred, <span class=\"hljs-number\">1</span>), tf.<span class=\"hljs-title function_\">argmax</span>(y, <span class=\"hljs-number\">1</span>))<br>    # 计算准确率<br>    accuracy = tf.<span class=\"hljs-title function_\">reduce_mean</span>(tf.<span class=\"hljs-title function_\">cast</span>(correct_prediction, tf.<span class=\"hljs-property\">float32</span>))<br>    print (<span class=\"hljs-string\">&quot;Accuracy:&quot;</span>, accuracy.<span class=\"hljs-built_in\">eval</span>(&#123;<br>    <span class=\"hljs-attr\">x</span>: mnist.<span class=\"hljs-property\">test</span>.<span class=\"hljs-property\">images</span>, <span class=\"hljs-attr\">y</span>: mnist.<span class=\"hljs-property\">test</span>.<span class=\"hljs-property\">labels</span>&#125;))<br><br>    #     # 保存模型<br>    save_path = saver.<span class=\"hljs-title function_\">save</span>(sess, model_path)<br>    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;Model saved in file: %s&quot;</span> % save_path)<br><br><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">&quot;Starting 2nd session...&quot;</span>)<br><span class=\"hljs-keyword\">with</span> tf.<span class=\"hljs-title class_\">Session</span>() <span class=\"hljs-keyword\">as</span> <span class=\"hljs-attr\">sess</span>:<br>    # 初始化变量<br>    sess.<span class=\"hljs-title function_\">run</span>(tf.<span class=\"hljs-title function_\">global_variables_initializer</span>())<br>    # 恢复模型变量<br>    saver.<span class=\"hljs-title function_\">restore</span>(sess, model_path)<br><br>    # 测试 model<br>    correct_prediction = tf.<span class=\"hljs-title function_\">equal</span>(tf.<span class=\"hljs-title function_\">argmax</span>(pred, <span class=\"hljs-number\">1</span>), tf.<span class=\"hljs-title function_\">argmax</span>(y, <span class=\"hljs-number\">1</span>))<br>    # 计算准确率<br>    accuracy = tf.<span class=\"hljs-title function_\">reduce_mean</span>(tf.<span class=\"hljs-title function_\">cast</span>(correct_prediction, tf.<span class=\"hljs-property\">float32</span>))<br>    print (<span class=\"hljs-string\">&quot;Accuracy:&quot;</span>, accuracy.<span class=\"hljs-built_in\">eval</span>(&#123;<br>    <span class=\"hljs-attr\">x</span>: mnist.<span class=\"hljs-property\">test</span>.<span class=\"hljs-property\">images</span>, <span class=\"hljs-attr\">y</span>: mnist.      test.<span class=\"hljs-property\">labels</span>&#125;))<br><br>    output = tf.<span class=\"hljs-title function_\">argmax</span>(pred, <span class=\"hljs-number\">1</span>)<br>    batch_xs, batch_ys = mnist.<span class=\"hljs-property\">train</span>.<span class=\"hljs-title function_\">next_batch</span>(<span class=\"hljs-number\">2</span>)<br>    outputval,predv = sess.<span class=\"hljs-title function_\">run</span>([output,pred], feed_dict=&#123;<br>    <span class=\"hljs-attr\">x</span>: batch_xs&#125;)<br>    <span class=\"hljs-title function_\">print</span>(outputval,predv,batch_ys)<br>    im = batch_xs[<span class=\"hljs-number\">0</span>]<br>    im = im.<span class=\"hljs-title function_\">reshape</span>(-<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">28</span>)<br>    pylab.<span class=\"hljs-title function_\">imshow</span>(im)<br>    pylab.<span class=\"hljs-title function_\">show</span>()<br><br>    im = batch_xs[<span class=\"hljs-number\">1</span>]<br>    im = im.<span class=\"hljs-title function_\">reshape</span>(-<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">28</span>)<br>    pylab.<span class=\"hljs-title function_\">imshow</span>(im)<br>    pylab.<span class=\"hljs-title function_\">show</span>()<br></code></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"clttq59au0000zwveccgj3kv7","category_id":"clttq59b20003zwve2jty5r5b","_id":"clttq59ba000fzwveahyscc3q"},{"post_id":"clttq59b00002zwvegw1sdjd9","category_id":"clttq59b20003zwve2jty5r5b","_id":"clttq59bc000kzwvebssp48bk"},{"post_id":"clttq59b40005zwveage0g4qr","category_id":"clttq59ba000ezwvegz262cwf","_id":"clttq59bg000szwvee5w98ld2"},{"post_id":"clttq59b50006zwve42wf46th","category_id":"clttq59ba000ezwvegz262cwf","_id":"clttq59bi000xzwvegq55e3ep"},{"post_id":"clttq59b50007zwve2lf21c13","category_id":"clttq59bg000rzwve1cbbgow1","_id":"clttq59bk0014zwveh4921b2w"},{"post_id":"clttq59b8000bzwve7qth80rr","category_id":"clttq59bg000rzwve1cbbgow1","_id":"clttq59bm001azwve33k91fwc"},{"post_id":"clttq59bj0012zwve9kk6hs8b","category_id":"clttq59bg000rzwve1cbbgow1","_id":"clttq59bn001ezwveehxeg8qw"},{"post_id":"clttq59b9000dzwve95xa6h1l","category_id":"clttq59bg000rzwve1cbbgow1","_id":"clttq59bo001izwve1me8e3oq"},{"post_id":"clttq59bb000izwve7neb3zve","category_id":"clttq59bg000rzwve1cbbgow1","_id":"clttq59br001ozwve5ya3c7c0"},{"post_id":"clttq59bo001gzwvec80lbn99","category_id":"clttq59bg000rzwve1cbbgow1","_id":"clttq59bs001szwvegl73gov4"},{"post_id":"clttq59bp001jzwveax3s2ilm","category_id":"clttq59bg000rzwve1cbbgow1","_id":"clttq59bt001wzwve6zuphqnb"},{"post_id":"clttq59bc000jzwvegv0vbxe6","category_id":"clttq59bg000rzwve1cbbgow1","_id":"clttq59bv0020zwve4j212hqv"},{"post_id":"clttq59bq001mzwveahq8dkyi","category_id":"clttq59bg000rzwve1cbbgow1","_id":"clttq59bv0024zwve9ob0grg1"},{"post_id":"clttq59br001qzwvefjs33zyq","category_id":"clttq59bg000rzwve1cbbgow1","_id":"clttq59bw0027zwvec0irfqf9"},{"post_id":"clttq59be000nzwveho5e8fz1","category_id":"clttq59bg000rzwve1cbbgow1","_id":"clttq59bx002bzwve7aqhewpe"},{"post_id":"clttq59bs001uzwveesqv2b99","category_id":"clttq59bg000rzwve1cbbgow1","_id":"clttq59by002fzwve28pm9a7b"},{"post_id":"clttq59bu001yzwvebokg8g0y","category_id":"clttq59bg000rzwve1cbbgow1","_id":"clttq59bz002jzwvegxm5874a"},{"post_id":"clttq59bf000pzwve6anbf8ie","category_id":"clttq59bg000rzwve1cbbgow1","_id":"clttq59c1002nzwve0ue4dmn5"},{"post_id":"clttq59bv0022zwvegxpw572g","category_id":"clttq59bg000rzwve1cbbgow1","_id":"clttq59c2002rzwve2fzg5ryx"},{"post_id":"clttq59bw0026zwve2nm5f743","category_id":"clttq59bg000rzwve1cbbgow1","_id":"clttq59c4002vzwve9apufvif"},{"post_id":"clttq59bh000uzwvef62u0xaw","category_id":"clttq59bv0023zwve6ya60qaw","_id":"clttq59c5002zzwve6b565xol"},{"post_id":"clttq59bx002azwvecqgzeaen","category_id":"clttq59bg000rzwve1cbbgow1","_id":"clttq59c70033zwvebkjvei7g"},{"post_id":"clttq59bz002izwvef6f8e914","category_id":"clttq59bg000rzwve1cbbgow1","_id":"clttq59c80036zwvehx44f1if"},{"post_id":"clttq59bi000wzwvefmxq8eo1","category_id":"clttq59bx002dzwve0rkw13i7","_id":"clttq59c9003bzwve4i11dltn"},{"post_id":"clttq59c0002lzwve3m5b2r70","category_id":"clttq59ba000ezwvegz262cwf","_id":"clttq59ca003ezwvedhmuaku6"},{"post_id":"clttq59c1002pzwve12fl3cak","category_id":"clttq59bx002dzwve0rkw13i7","_id":"clttq59cb003izwvea4eo2z0b"},{"post_id":"clttq59bj0010zwve8mpb6r3d","category_id":"clttq59bx002dzwve0rkw13i7","_id":"clttq59cc003lzwvefdpvdxq2"},{"post_id":"clttq59c2002tzwvee80wesh3","category_id":"clttq59bx002dzwve0rkw13i7","_id":"clttq59cd003nzwve2p992fkh"},{"post_id":"clttq59bm0018zwve17u92jo7","category_id":"clttq59c3002uzwveems3ethb","_id":"clttq59cd003qzwve5ce5h96v"},{"post_id":"clttq59c50031zwvef1m34svo","category_id":"clttq59bg000rzwve1cbbgow1","_id":"clttq59cd003szwve5pq68xel"},{"post_id":"clttq59c70035zwve46zeb0ho","category_id":"clttq59bg000rzwve1cbbgow1","_id":"clttq59cd003uzwvec5uffm90"},{"post_id":"clttq59bn001czwve19o16xj3","category_id":"clttq59bx002dzwve0rkw13i7","_id":"clttq59cd003wzwvec5r77rfx"},{"post_id":"clttq59c80039zwve6qf9hdru","category_id":"clttq59bx002dzwve0rkw13i7","_id":"clttq59cd003yzwvec57r55cu"},{"post_id":"clttq59c9003dzwve0tvs5xp0","category_id":"clttq59bg000rzwve1cbbgow1","_id":"clttq59cd0040zwve0hlz5yqi"},{"post_id":"clttq59bx002ezwvecgwn9pod","category_id":"clttq59bx002dzwve0rkw13i7","_id":"clttq59ce0042zwvefbbxhefs"},{"post_id":"clttq59ca003hzwve9iyi9jo7","category_id":"clttq59bg000rzwve1cbbgow1","_id":"clttq59ce0043zwve905f72zg"},{"post_id":"clttq59cb003kzwvebnixhjx2","category_id":"clttq59bx002dzwve0rkw13i7","_id":"clttq59ce0044zwve454h349k"}],"PostTag":[{"post_id":"clttq59b50006zwve42wf46th","tag_id":"clttq59b30004zwvee9qr572z","_id":"clttq59b8000azwve7edh9cs2"},{"post_id":"clttq59au0000zwveccgj3kv7","tag_id":"clttq59b30004zwvee9qr572z","_id":"clttq59b9000czwve9xh86shg"},{"post_id":"clttq59b00002zwvegw1sdjd9","tag_id":"clttq59b30004zwvee9qr572z","_id":"clttq59ba000hzwve1c9n6sn2"},{"post_id":"clttq59b40005zwveage0g4qr","tag_id":"clttq59ba000gzwve5zt9brf4","_id":"clttq59bf000ozwve6yhd2k9a"},{"post_id":"clttq59bc000jzwvegv0vbxe6","tag_id":"clttq59b30004zwvee9qr572z","_id":"clttq59bg000qzwvebr7k1dbn"},{"post_id":"clttq59b50007zwve2lf21c13","tag_id":"clttq59bd000mzwve95ekd3cx","_id":"clttq59bh000vzwve0sby4fuj"},{"post_id":"clttq59b8000bzwve7qth80rr","tag_id":"clttq59bg000tzwve7ofnhg53","_id":"clttq59bj0011zwveh0gn0oje"},{"post_id":"clttq59bj0012zwve9kk6hs8b","tag_id":"clttq59bj000zzwve6qut6mej","_id":"clttq59bl0017zwve94esc87r"},{"post_id":"clttq59b9000dzwve95xa6h1l","tag_id":"clttq59bj000zzwve6qut6mej","_id":"clttq59bm001bzwveg9x115yu"},{"post_id":"clttq59bb000izwve7neb3zve","tag_id":"clttq59bj000zzwve6qut6mej","_id":"clttq59bo001fzwvehpai680v"},{"post_id":"clttq59bo001gzwvec80lbn99","tag_id":"clttq59bj000zzwve6qut6mej","_id":"clttq59bq001lzwve2zar7d93"},{"post_id":"clttq59be000nzwveho5e8fz1","tag_id":"clttq59bj000zzwve6qut6mej","_id":"clttq59br001pzwve7rqz7khd"},{"post_id":"clttq59bp001jzwveax3s2ilm","tag_id":"clttq59bg000tzwve7ofnhg53","_id":"clttq59bs001tzwveh06nbxdx"},{"post_id":"clttq59bq001mzwveahq8dkyi","tag_id":"clttq59bj000zzwve6qut6mej","_id":"clttq59bt001xzwvea1jshmsh"},{"post_id":"clttq59bf000pzwve6anbf8ie","tag_id":"clttq59bg000tzwve7ofnhg53","_id":"clttq59bv0021zwve4gqj315o"},{"post_id":"clttq59br001qzwvefjs33zyq","tag_id":"clttq59bj000zzwve6qut6mej","_id":"clttq59bv0025zwve4jr1drby"},{"post_id":"clttq59bs001uzwveesqv2b99","tag_id":"clttq59bj000zzwve6qut6mej","_id":"clttq59bw0029zwveggms12hc"},{"post_id":"clttq59bh000uzwvef62u0xaw","tag_id":"clttq59bs001rzwve6boc700s","_id":"clttq59bx002czwve6wub2urn"},{"post_id":"clttq59bu001yzwvebokg8g0y","tag_id":"clttq59bg000tzwve7ofnhg53","_id":"clttq59by002gzwve1w5r1e2t"},{"post_id":"clttq59bv0022zwvegxpw572g","tag_id":"clttq59bj000zzwve6qut6mej","_id":"clttq59c0002kzwvehv89fxba"},{"post_id":"clttq59bi000wzwvefmxq8eo1","tag_id":"clttq59bu001zzwve42wj7thm","_id":"clttq59c1002ozwve3ugkfnds"},{"post_id":"clttq59bx002azwvecqgzeaen","tag_id":"clttq59b30004zwvee9qr572z","_id":"clttq59c2002szwveep7sb2n0"},{"post_id":"clttq59bj0010zwve8mpb6r3d","tag_id":"clttq59bw0028zwvef6iic3om","_id":"clttq59c4002wzwvefxef5pq5"},{"post_id":"clttq59bx002ezwvecgwn9pod","tag_id":"clttq59bw0028zwvef6iic3om","_id":"clttq59c50030zwveb9np0lpg"},{"post_id":"clttq59bz002izwvef6f8e914","tag_id":"clttq59bj000zzwve6qut6mej","_id":"clttq59c70034zwve3s8t475u"},{"post_id":"clttq59bm0018zwve17u92jo7","tag_id":"clttq59by002hzwve9fj4drap","_id":"clttq59c80038zwvefwgw95et"},{"post_id":"clttq59c2002tzwvee80wesh3","tag_id":"clttq59c2002qzwve3ou62izk","_id":"clttq59c9003czwvean3ofvjs"},{"post_id":"clttq59bn001czwve19o16xj3","tag_id":"clttq59c2002qzwve3ou62izk","_id":"clttq59ca003fzwve15v852i6"},{"post_id":"clttq59c50031zwvef1m34svo","tag_id":"clttq59b30004zwvee9qr572z","_id":"clttq59cb003jzwve9g0f8rou"},{"post_id":"clttq59bw0026zwve2nm5f743","tag_id":"clttq59c5002yzwve9krz8ydp","_id":"clttq59cc003mzwve1xwm5sda"},{"post_id":"clttq59c70035zwve46zeb0ho","tag_id":"clttq59b30004zwvee9qr572z","_id":"clttq59cd003pzwve8r9mdjvt"},{"post_id":"clttq59c80039zwve6qf9hdru","tag_id":"clttq59bu001zzwve42wj7thm","_id":"clttq59cd003rzwveahny5qio"},{"post_id":"clttq59c0002lzwve3m5b2r70","tag_id":"clttq59c80037zwvehb2b1t45","_id":"clttq59cd003tzwveaj7sh6gy"},{"post_id":"clttq59c9003dzwve0tvs5xp0","tag_id":"clttq59b30004zwvee9qr572z","_id":"clttq59cd003vzwve997ycyle"},{"post_id":"clttq59ca003hzwve9iyi9jo7","tag_id":"clttq59bg000tzwve7ofnhg53","_id":"clttq59cd003xzwve364ngqqu"},{"post_id":"clttq59c1002pzwve12fl3cak","tag_id":"clttq59ca003gzwveg0wgeiws","_id":"clttq59cd003zzwve86770c1r"},{"post_id":"clttq59cb003kzwvebnixhjx2","tag_id":"clttq59cd003ozwve81ozehju","_id":"clttq59ce0041zwve70n29z1c"}],"Tag":[{"name":"java","_id":"clttq59b30004zwvee9qr572z"},{"name":"Java学习","_id":"clttq59ba000gzwve5zt9brf4"},{"name":"职场和发展","_id":"clttq59bd000mzwve95ekd3cx"},{"name":"算法","_id":"clttq59bg000tzwve7ofnhg53"},{"name":"leetcode","_id":"clttq59bj000zzwve6qut6mej"},{"name":"数据库","_id":"clttq59bs001rzwve6boc700s"},{"name":"c++","_id":"clttq59bu001zzwve42wj7thm"},{"name":"其它","_id":"clttq59bw0028zwvef6iic3om"},{"name":"mongodb","_id":"clttq59by002hzwve9fj4drap"},{"name":"python","_id":"clttq59c2002qzwve3ou62izk"},{"name":"数据结构","_id":"clttq59c5002yzwve9krz8ydp"},{"name":"redis","_id":"clttq59c80037zwvehb2b1t45"},{"name":"matplotlib","_id":"clttq59ca003gzwveg0wgeiws"},{"name":"神经网络","_id":"clttq59cd003ozwve81ozehju"}]}}