<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java新版本的重要语言特性（9-17）</title>
    <link href="/2023/09/21/Java%E6%96%B0%E7%89%88%E6%9C%AC%E7%9A%84%E9%87%8D%E8%A6%81%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7%EF%BC%889-17%EF%BC%89/"/>
    <url>/2023/09/21/Java%E6%96%B0%E7%89%88%E6%9C%AC%E7%9A%84%E9%87%8D%E8%A6%81%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7%EF%BC%889-17%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="JDK9"><a href="#JDK9" class="headerlink" title="JDK9"></a>JDK9</h2><h4 id="允许在接口中使用私有方法"><a href="#允许在接口中使用私有方法" class="headerlink" title="允许在接口中使用私有方法"></a>允许在接口中使用私有方法</h4><h2 id="JDK10"><a href="#JDK10" class="headerlink" title="JDK10"></a>JDK10</h2><h4 id="局部变量类型推断"><a href="#局部变量类型推断" class="headerlink" title="局部变量类型推断"></a>局部变量类型推断</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;<span class="hljs-title class_">String</span>&gt;();<br></code></pre></td></tr></table></figure><ul><li>声明时必须初始化</li></ul><p>可以使用在：</p><ul><li>具有初始化器的局部变量</li><li>增强型 for 循环中的索引变量</li><li>传统 for 循环中声明的局部变量</li></ul><p>不能使用在：</p><ul><li>推断方法的参数类型</li><li>构造函数参数类型推断</li><li>推断方法返回类型</li><li>字段类型推断</li><li>捕获表达式（或任何其他类型的变量声明）</li></ul><p>建议：为了程序的易读性和可维护性，尽量显式定义变量类型。</p><h2 id="JDK11"><a href="#JDK11" class="headerlink" title="JDK11"></a>JDK11</h2><h4 id="用于-Lambda-参数的局部变量语法"><a href="#用于-Lambda-参数的局部变量语法" class="headerlink" title="用于 Lambda 参数的局部变量语法"></a>用于 Lambda 参数的局部变量语法</h4><p>将局部变量和 Lambda 表达式的用法进行了统一，并且可以将注释应用于局部变量和 Lambda 表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">@<span class="hljs-title class_">Nonnull</span> <span class="hljs-keyword">var</span> x = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>();<br><br>(@<span class="hljs-title class_">Nonnull</span> <span class="hljs-keyword">var</span> x, @<span class="hljs-title class_">Nullable</span> <span class="hljs-keyword">var</span> y) -&gt; x.<span class="hljs-title function_">process</span>(y)<br></code></pre></td></tr></table></figure><ul><li>@NonNull 注解可以标注在方法、字段、参数之上，表示对应的值不能为空；</li><li>@Nullable 注解可以标注在方法、字段、参数之上，表示对应的值可以为空；</li></ul><h2 id="JDK12"><a href="#JDK12" class="headerlink" title="JDK12"></a>JDK12</h2><h2 id="JDK13"><a href="#JDK13" class="headerlink" title="JDK13"></a>JDK13</h2><h2 id="JDK14"><a href="#JDK14" class="headerlink" title="JDK14"></a>JDK14</h2><h4 id="Switch-表达式"><a href="#Switch-表达式" class="headerlink" title="Switch 表达式"></a>Switch 表达式</h4><p>旧版：</p><ul><li>一般使用冒号 ：来作为语句分支代码的开始。</li><li>在每个分支结束之前，需要加上 break 关键字进行分支跳出，以防 switch 语句一直往后执行到整个 switch 语句结束。</li></ul><p>新版：</p><ul><li>提供了新的分支切换方式，即 -&gt; 符号右则表达式方法体。</li><li>在执行完分支方法之后，自动结束 switch 分支。</li><li>-&gt; 右则方法块中可以是表达式、代码块或者是手动抛出的异常。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//旧版：</span><br>int dayOfWeek;<br><span class="hljs-keyword">switch</span> (day) &#123;<br>    <br>    <span class="hljs-keyword">case</span> <span class="hljs-attr">MONDAY</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-attr">TUESDAY</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-attr">WEDNESDAY</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-attr">THURSDAY</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-attr">FRIDAY</span>:<br>        dayOfWeek = <span class="hljs-number">5</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-attr">SATURDAY</span>:<br>        dayOfWeek = <span class="hljs-number">6</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-attr">SUNDAY</span>:<br>        dayOfWeek = <span class="hljs-number">7</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-attr">default</span>:<br>        dayOfWeek = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-comment">//新版：</span><br>int dayOfWeek = <span class="hljs-keyword">switch</span> (day) &#123;<br>    <br>    <span class="hljs-keyword">case</span> <span class="hljs-variable constant_">MONDAY</span>, <span class="hljs-variable constant_">TUESDAY</span>, <span class="hljs-variable constant_">WEDNESDAY</span>, <span class="hljs-variable constant_">THURSDAY</span>, <span class="hljs-variable constant_">FRIDAY</span> -&gt; <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-variable constant_">SATURDAY</span> -&gt; <span class="hljs-number">6</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-variable constant_">SUNDAY</span> -&gt; <span class="hljs-number">7</span>;<br>    <span class="hljs-keyword">default</span> -&gt; <span class="hljs-number">0</span>;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><p><strong>注意</strong>：</p><ul><li>之前需要用变量来接收返回值，现在直接返回需要返回的结果。</li><li>不再需要显式地跳出当前分支，表达式执行完后会自动跳出，不会继续往后执行。</li><li>对于多个相同的 case 方法块，可以将 case 条件并列，不再通过每个 case 后面故意不加 break 关键字来使用相同方法块。</li></ul><h2 id="JDK15"><a href="#JDK15" class="headerlink" title="JDK15"></a>JDK15</h2><h4 id="文本块"><a href="#文本块" class="headerlink" title="文本块"></a>文本块</h4><p>文本块就是以三个引号开始，并以三个引号结束的字符串字面量。<br>文本块减少了转义，大大提高了代码可读性，尤其是代码中对SQL、HTML、JSON字符串进行拼接的情况。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 旧版</span><br><span class="hljs-title class_">String</span> sqlTemplate = <span class="hljs-string">&quot;SELECT\n&quot;</span> +<br>        <span class="hljs-string">&quot;    name,\n&quot;</span> +<br>        <span class="hljs-string">&quot;    age,\n&quot;</span> +<br>        <span class="hljs-string">&quot;    phone,\n&quot;</span> +<br>        <span class="hljs-string">&quot;    wechat\n&quot;</span> +<br>        <span class="hljs-string">&quot;FROM\n&quot;</span> +<br>        <span class="hljs-string">&quot;    csdn_user;&quot;</span>;<br><span class="hljs-comment">// 新版</span><br><span class="hljs-title class_">String</span> sqlTemplate = <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">        SELECT</span><br><span class="hljs-string">            name,</span><br><span class="hljs-string">            age,</span><br><span class="hljs-string">            phone,</span><br><span class="hljs-string">            wechat</span><br><span class="hljs-string">        FROM</span><br><span class="hljs-string">            csdn_user;</span><br><span class="hljs-string">        &quot;</span><span class="hljs-string">&quot;&quot;</span>;<br></code></pre></td></tr></table></figure><h2 id="JDK16"><a href="#JDK16" class="headerlink" title="JDK16"></a>JDK16</h2><h4 id="instanceof-模式匹配"><a href="#instanceof-模式匹配" class="headerlink" title="instanceof 模式匹配"></a>instanceof 模式匹配</h4><p>对 instanceof 的改进，主要目的是为了让创建对象更简单、简洁和高效，并且可读性更强、提高安全性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 旧版</span><br><span class="hljs-comment">// 每次在检查类型之后，都需要强制进行类型转换。</span><br><span class="hljs-comment">// 类型转换后，需要提前创建一个局部变量来接收转换后的结果，代码显得多余且繁琐。</span><br><span class="hljs-keyword">if</span> (person <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Student</span>) &#123;<br>    <br>    <span class="hljs-title class_">Student</span> student = (<span class="hljs-title class_">Student</span>) person;<br>    student.<span class="hljs-title function_">say</span>();<br>   <span class="hljs-comment">// other student operations</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (person <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Teacher</span>) &#123;<br>    <br>    <span class="hljs-title class_">Teacher</span> teacher = (<span class="hljs-title class_">Teacher</span>) person;<br>    teacher.<span class="hljs-title function_">say</span>();<br>    <span class="hljs-comment">// other teacher operations</span><br>&#125;<br><br><span class="hljs-comment">// 新版</span><br><span class="hljs-comment">// 对 person 对象进行类型匹配，校验 person 对象是否为 Student 类型</span><br><span class="hljs-comment">// 如果类型匹配成功，则会转换为 Student 类型，并赋值给模式局部变量 student</span><br><span class="hljs-keyword">if</span> (person <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Student</span> student) &#123;<br>    <br><span class="hljs-comment">//这里的 student 变量只能在 if 块中使用，而不能在 else if/else 中使用</span><br>    student.<span class="hljs-title function_">say</span>();<br>   <span class="hljs-comment">// other student operations</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (person <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Teacher</span> teacher) &#123;<br>    <br>    teacher.<span class="hljs-title function_">say</span>();<br>    <span class="hljs-comment">// other teacher operations</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果 if 条件中有 &amp;&amp; 运算符时，当 instanceof 类型匹配成功，模式局部变量的作用范围也可以相应延长，如下面代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">String</span> s &amp;&amp; s.<span class="hljs-title function_">length</span>() &gt; <span class="hljs-number">5</span>) &#123;<br>    .. s.<span class="hljs-title function_">contains</span>(..) ..&#125;<br></code></pre></td></tr></table></figure><p>注意：这种作用范围延长，并不适用于或 || 运算符，因为即便 || 运算符左边的 instanceof 类型匹配没有成功也不会造成短路，依旧会执行到||运算符右边的表达式.但是如果左边instanceof 类型匹配没有成功，局部变量并未定义赋值，此时使用会产生问题。</p><h4 id="Records类型"><a href="#Records类型" class="headerlink" title="Records类型"></a>Records类型</h4><ul><li>Record 类型允许在代码中使用紧凑的语法形式来声明类，而这些类能够作为不可变数据类型的封装持有者。Record 这一特性主要用在特定领域的类上；</li><li>与枚举类型一样，Record 类型是一种受限形式的类型，主要用于存储、保存数据，并且没有其它额外自定义行为的场景下。</li><li>效果有些类似 Lombok 的 @Data 注解、Kotlin 中的 data class，但是又不尽完全相同，它们的共同点都是类的部分或者全部可以直接在类头中定义、描述，并且这个类只用于存储数据而已。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 示例</span><br>public record <span class="hljs-title class_">Person</span>(<span class="hljs-title class_">String</span> name, int age) &#123;<br>    <br>    public <span class="hljs-keyword">static</span> <span class="hljs-title class_">String</span> address;<br><br>    public <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br>    <br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">// 编译后反编译的结果</span><br>public final <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">java.lang.Record</span> &#123;<br>    <br>    private final java.<span class="hljs-property">lang</span>.<span class="hljs-property">String</span> name;<br>    private final java.<span class="hljs-property">lang</span>.<span class="hljs-property">String</span> age;<br><br>    public <span class="hljs-title class_">Person</span>(java.<span class="hljs-property">lang</span>.<span class="hljs-property">String</span> name, java.<span class="hljs-property">lang</span>.<span class="hljs-property">String</span> age) &#123;<br>     <span class="hljs-comment">/* compiled code */</span> &#125;<br><br>    public java.<span class="hljs-property">lang</span>.<span class="hljs-property">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br>     <span class="hljs-comment">/* compiled code */</span> &#125;<br><br>    public java.<span class="hljs-property">lang</span>.<span class="hljs-property">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>     <span class="hljs-comment">/* compiled code */</span> &#125;<br><br>    public final int <span class="hljs-title function_">hashCode</span>(<span class="hljs-params"></span>) &#123;<br>     <span class="hljs-comment">/* compiled code */</span> &#125;<br><br>    public final boolean <span class="hljs-title function_">equals</span>(<span class="hljs-params">java.lang.<span class="hljs-built_in">Object</span> o</span>) &#123;<br>     <span class="hljs-comment">/* compiled code */</span> &#125;<br><br>    public java.<span class="hljs-property">lang</span>.<span class="hljs-property">String</span> <span class="hljs-title function_">name</span>(<span class="hljs-params"></span>) &#123;<br>     <span class="hljs-comment">/* compiled code */</span> &#125;<br><br>    public java.<span class="hljs-property">lang</span>.<span class="hljs-property">String</span> <span class="hljs-title function_">age</span>(<span class="hljs-params"></span>) &#123;<br>     <span class="hljs-comment">/* compiled code */</span> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以得出，当用 Record 来声明一个类时，该类将自动拥有下面特征：</p><ul><li>拥有一个构造方法</li><li>获取成员属性值的方法：name()、age()</li><li>hashCode() 方法和 euqals() 方法</li><li>toString() 方法类</li><li>对象被 final 关键字修饰，不能被继承；类的成员变量也都被 final 修饰，不能再被赋值使用。</li><li>可以在 Record 声明的类中定义静态属性和方法。</li><li>注意，不能在 Record 声明的类中定义成员变量，类也不能声明为抽象类等。</li></ul><h2 id="JDK17"><a href="#JDK17" class="headerlink" title="JDK17"></a>JDK17</h2><h4 id="密封的类和接口"><a href="#密封的类和接口" class="headerlink" title="密封的类和接口"></a>密封的类和接口</h4><p>用来增强 Java 编程语言，防止其他类或接口扩展或实现它们。</p><p>使用修饰符<strong>sealed</strong>，您可以将一个类声明为密封类。<br>密封的类使用关键字<strong>permits</strong>列出可以直接扩展它的类。<br>子类可以是最终的、非密封的或密封的。<br><strong>继承了密封类的子类可以使用non-sealed修饰，这样任何类都可以继承这个子类。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 旧版</span><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>     &#125; <span class="hljs-comment">//人</span><br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Person</span> &#123;<br>     &#125;<span class="hljs-comment">//教师</span><br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Worker</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Person</span> &#123;<br>     &#125;  <span class="hljs-comment">//工人</span><br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Person</span>&#123;<br>     &#125; <span class="hljs-comment">//学生</span><br><br><br><span class="hljs-comment">// 新版</span><br><span class="hljs-comment">// 添加sealed修饰符，permits后面跟上只能被继承的子类名称</span><br>public sealed <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> permits <span class="hljs-title class_">Teacher</span>, <span class="hljs-title class_">Worker</span>, <span class="hljs-title class_">Student</span>&#123;<br>     &#125; <span class="hljs-comment">//人</span><br> <br><span class="hljs-comment">// 子类可以被修饰为 final</span><br>final <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Person</span> &#123;<br>     &#125;<span class="hljs-comment">//教师</span><br> <br><span class="hljs-comment">// 子类可以被修饰为 non-sealed，此时 Worker类就成了普通类，谁都可以继承它</span><br>non-sealed <span class="hljs-keyword">class</span> <span class="hljs-title class_">Worker</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Person</span> &#123;<br>     &#125;  <span class="hljs-comment">//工人</span><br><span class="hljs-comment">// 任何类都可以继承Worker</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AnyClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Worker</span>&#123;<br>    &#125;<br> <br><span class="hljs-comment">//子类可以被修饰为 sealed,同上</span><br>sealed <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Person</span> permits <span class="hljs-title class_">MiddleSchoolStudent</span>,<span class="hljs-title class_">GraduateStudent</span>&#123;<br>     &#125; <span class="hljs-comment">//学生</span><br><br>final <span class="hljs-keyword">class</span> <span class="hljs-title class_">MiddleSchoolStudent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Student</span> &#123;<br>     &#125;  <span class="hljs-comment">//中学生</span><br><br>final <span class="hljs-keyword">class</span> <span class="hljs-title class_">GraduateStudent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Student</span> &#123;<br>     &#125;  <span class="hljs-comment">//研究生</span><br></code></pre></td></tr></table></figure><p>可以限制类的层次结构。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL基本语法</title>
    <link href="/2023/08/28/MySQL%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <url>/2023/08/28/MySQL%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h4 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">-- 别名 <span class="hljs-keyword">as</span> 可省略，但中间需要空格<br>select name <span class="hljs-keyword">as</span> 员工姓名, position <span class="hljs-keyword">as</span> 职位名称 <span class="hljs-keyword">from</span> employees;<br></code></pre></td></tr></table></figure><h4 id="常量和运算"><a href="#常量和运算" class="headerlink" title="常量和运算"></a>常量和运算</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">select <span class="hljs-number">200</span>, <span class="hljs-string">&#x27;篮球&#x27;</span> <span class="hljs-keyword">as</span> hobby;<br>select order_id, unit_price, quantity, unit_price * quantity <span class="hljs-keyword">as</span> total_amount <span class="hljs-keyword">from</span> orders;<br></code></pre></td></tr></table></figure><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">select name, age, salary <span class="hljs-keyword">from</span> employees where age between <span class="hljs-number">25</span> and <span class="hljs-number">30</span>;<br>select name, age, salary <span class="hljs-keyword">from</span> employees where salary &gt; <span class="hljs-number">5500</span>;<br>select name, age, salary <span class="hljs-keyword">from</span> employees where name != <span class="hljs-string">&#x27;小张&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">-- <span class="hljs-variable constant_">SQL</span>查询语句<br>select name, age <span class="hljs-keyword">from</span> employees where hire_date <span class="hljs-variable constant_">IS</span> <span class="hljs-variable constant_">NULL</span>;<br><br>select name, age <span class="hljs-keyword">from</span> employees where hire_date <span class="hljs-variable constant_">IS</span> <span class="hljs-variable constant_">NOT</span> <span class="hljs-variable constant_">NULL</span>;<br></code></pre></td></tr></table></figure><h4 id="模糊查询-like-not-like"><a href="#模糊查询-like-not-like" class="headerlink" title="模糊查询 like, not like _ %"></a>模糊查询 like, not like _ %</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">select name, age, position <span class="hljs-keyword">from</span> employees where name like <span class="hljs-string">&#x27;%张%&#x27;</span>;<br>-- 只查询以 <span class="hljs-string">&quot;张&quot;</span> 开头的数据行<br>select name, age, position <span class="hljs-keyword">from</span> employees where name like <span class="hljs-string">&#x27;张%&#x27;</span>;<br><br>-- 只查询以 <span class="hljs-string">&quot;张&quot;</span> 结尾的数据行<br>select name, age, position <span class="hljs-keyword">from</span> employees where name like <span class="hljs-string">&#x27;%张&#x27;</span>;<br>-- 可以使用 not like 来查询不包含某关键字的信息。<br></code></pre></td></tr></table></figure><h4 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h4><p>AND OR NOT</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">-- <span class="hljs-variable constant_">SQL</span>查询语句<br>select name, age, salary <span class="hljs-keyword">from</span> employees where name like <span class="hljs-string">&#x27;%李%&#x27;</span> and age &lt; <span class="hljs-number">30</span>;<br></code></pre></td></tr></table></figure><h4 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">-- <span class="hljs-variable constant_">SQL</span> 查询语句 使用<span class="hljs-variable constant_">DISTINCT</span>关键字来找出不同的班级 <span class="hljs-variable constant_">ID</span><br>select distinct class_id <span class="hljs-keyword">from</span> students;<br>-- <span class="hljs-variable constant_">DISTINCT</span> 关键字还支持根据多个字段的组合来进行去重操作，确保多个字段的组合是唯一的。<br></code></pre></td></tr></table></figure><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">-- <span class="hljs-variable constant_">SQL</span> 查询语句 <span class="hljs-number">1</span><br>select name, age <span class="hljs-keyword">from</span> students order by age asc;<br><br>-- <span class="hljs-variable constant_">SQL</span> 查询语句 <span class="hljs-number">2</span><br>select name, score <span class="hljs-keyword">from</span> students order by score desc;<br></code></pre></td></tr></table></figure><h4 id="截断、偏移"><a href="#截断、偏移" class="headerlink" title="截断、偏移"></a>截断、偏移</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">-- <span class="hljs-variable constant_">LIMIT</span> 后只跟一个整数，表示要截断的数据条数（一次获取几条）<br>select task_name, due_date <span class="hljs-keyword">from</span> tasks limit <span class="hljs-number">2</span>;<br><br>-- <span class="hljs-variable constant_">LIMIT</span> 后跟 <span class="hljs-number">2</span> 个整数，依次表示从第几条数据开始、一次获取几条<br>select task_name, due_date <span class="hljs-keyword">from</span> tasks limit <span class="hljs-number">2</span>, <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><h4 id="条件分支"><a href="#条件分支" class="headerlink" title="条件分支"></a>条件分支</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">SELECT</span><br>  name,<br>  <span class="hljs-variable constant_">CASE</span> <span class="hljs-variable constant_">WHEN</span> (name = <span class="hljs-string">&#x27;鸡哥&#x27;</span>) <span class="hljs-variable constant_">THEN</span> <span class="hljs-string">&#x27;会&#x27;</span> <span class="hljs-variable constant_">ELSE</span> <span class="hljs-string">&#x27;不会&#x27;</span> <span class="hljs-variable constant_">END</span> <span class="hljs-variable constant_">AS</span> can_rap<br><span class="hljs-variable constant_">FROM</span><br>  student;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">CASE</span> <span class="hljs-variable constant_">WHEN</span> (条件<span class="hljs-number">1</span>) <span class="hljs-variable constant_">THEN</span> 结果<span class="hljs-number">1</span><br>   <span class="hljs-variable constant_">WHEN</span> (条件<span class="hljs-number">2</span>) <span class="hljs-variable constant_">THEN</span> 结果<span class="hljs-number">2</span><br>   ...<br>   <span class="hljs-variable constant_">ELSE</span> 其他结果 <span class="hljs-variable constant_">END</span><br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h4 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">-- 获取当前日期<br><span class="hljs-variable constant_">SELECT</span> <span class="hljs-title function_">DATE</span>() <span class="hljs-variable constant_">AS</span> current_date;<br><br>-- 获取当前日期时间<br><span class="hljs-variable constant_">SELECT</span> <span class="hljs-title function_">DATETIME</span>() <span class="hljs-variable constant_">AS</span> current_datetime;<br><br>-- 获取当前时间<br><span class="hljs-variable constant_">SELECT</span> <span class="hljs-title function_">TIME</span>() <span class="hljs-variable constant_">AS</span> current_time;<br>-- 这里的日期、日期时间和时间将根据当前的系统时间来生成，实际运行结果可能会因为当前时间而不同。<br></code></pre></td></tr></table></figure><h4 id="四舍五入"><a href="#四舍五入" class="headerlink" title="四舍五入"></a>四舍五入</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">round</span>(<span class="hljs-title function_">AVG</span>(grade),<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h4 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">-- 将姓名转换为大写<br><span class="hljs-variable constant_">SELECT</span> name, <span class="hljs-title function_">UPPER</span>(name) <span class="hljs-variable constant_">AS</span> upper_name<br><span class="hljs-variable constant_">FROM</span> employees;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">-- 计算姓名长度<br><span class="hljs-variable constant_">SELECT</span> name, <span class="hljs-title function_">LENGTH</span>(name) <span class="hljs-variable constant_">AS</span> name_length<br><span class="hljs-variable constant_">FROM</span> employees;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">-- 将姓名转换为小写并进行条件筛选<br><span class="hljs-variable constant_">SELECT</span> name, <span class="hljs-title function_">LOWER</span>(name) <span class="hljs-variable constant_">AS</span> lower_name<br><span class="hljs-variable constant_">FROM</span> employees;<br></code></pre></td></tr></table></figure><h4 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h4><ul><li><p>COUNT：计算指定列的行数或非空值的数量。<br>当Mysql确认括号内的表达式值不可能为NULL时，实际上就是在统计行数。<br>所以使用条件要加一个COUNT(c.action &#x3D; ‘confirmed’ OR NULL)<br>不为confirmed时用NULL代替，NULL不会被COUNT统计</p></li><li><p>SUM：计算指定列的数值之和。</p></li><li><p>AVG：计算指定列的数值平均值。</p></li><li><p>MAX：找出指定列的最大值。</p></li><li><p>MIN：找出指定列的最小值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">-- 使用聚合函数 <span class="hljs-variable constant_">COUNT</span> 计算订单表中的总订单数<br><span class="hljs-variable constant_">SELECT</span> <span class="hljs-title function_">COUNT</span>(*) <span class="hljs-variable constant_">AS</span> order_num<br><span class="hljs-variable constant_">FROM</span> orders;<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">-- 使用聚合函数 <span class="hljs-title function_">COUNT</span>(<span class="hljs-variable constant_">DISTINCT</span> 列名) 计算订单表中不同客户的数量<br><span class="hljs-variable constant_">SELECT</span> <span class="hljs-title function_">COUNT</span>(<span class="hljs-variable constant_">DISTINCT</span> customer_id) <span class="hljs-variable constant_">AS</span> customer_num<br><span class="hljs-variable constant_">FROM</span> orders;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">-- 使用聚合函数 <span class="hljs-variable constant_">SUM</span> 计算总订单金额<br><span class="hljs-variable constant_">SELECT</span> <span class="hljs-title function_">SUM</span>(amount) <span class="hljs-variable constant_">AS</span> total_amount<br><span class="hljs-variable constant_">FROM</span> orders;<br></code></pre></td></tr></table></figure><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><h4 id="字段分组"><a href="#字段分组" class="headerlink" title="字段分组"></a>字段分组</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">-- 使用分组聚合查询中每个客户的编号<br><span class="hljs-variable constant_">SELECT</span> customer_id<br><span class="hljs-variable constant_">FROM</span> orders<br><span class="hljs-variable constant_">GROUP</span> <span class="hljs-variable constant_">BY</span> customer_id;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">-- 使用分组聚合查询每个客户的下单数<br><span class="hljs-variable constant_">SELECT</span> customer_id, <span class="hljs-title function_">COUNT</span>(order_id) <span class="hljs-variable constant_">AS</span> order_num<br><span class="hljs-variable constant_">FROM</span> orders<br><span class="hljs-variable constant_">GROUP</span> <span class="hljs-variable constant_">BY</span> customer_id;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">-- 使用多字段分组查询表中 每个客户 购买的 每种商品 的总金额，相当于按照客户编号和商品编号分组<br><span class="hljs-variable constant_">SELECT</span> customer_id, product_id, <span class="hljs-title function_">SUM</span>(amount) <span class="hljs-variable constant_">AS</span> total_amount<br><span class="hljs-variable constant_">FROM</span> orders<br><span class="hljs-variable constant_">GROUP</span> <span class="hljs-variable constant_">BY</span> customer_id, product_id;<br></code></pre></td></tr></table></figure><h4 id="having-子句"><a href="#having-子句" class="headerlink" title="having 子句"></a>having 子句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">-- 使用 <span class="hljs-variable constant_">HAVING</span> 子句查询订单数超过 <span class="hljs-number">1</span> 的客户<br><br><span class="hljs-variable constant_">SELECT</span> customer_id, <span class="hljs-title function_">COUNT</span>(order_id) <span class="hljs-variable constant_">AS</span> order_num<br><span class="hljs-variable constant_">FROM</span> orders<br><span class="hljs-variable constant_">GROUP</span> <span class="hljs-variable constant_">BY</span> customer_id<br><span class="hljs-variable constant_">HAVING</span> <span class="hljs-title function_">COUNT</span>(order_id) &gt; <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">-- 使用 <span class="hljs-variable constant_">HAVING</span> 子句查询订单总金额超过 <span class="hljs-number">100</span> 的客户<br><span class="hljs-variable constant_">SELECT</span> customer_id, <span class="hljs-title function_">SUM</span>(amount) <span class="hljs-variable constant_">AS</span> total_amount<br><span class="hljs-variable constant_">FROM</span> orders<br><span class="hljs-variable constant_">GROUP</span> <span class="hljs-variable constant_">BY</span> customer_id<br><span class="hljs-variable constant_">HAVING</span> <span class="hljs-title function_">SUM</span>(amount) &gt; <span class="hljs-number">100</span>;<br></code></pre></td></tr></table></figure><h2 id="关联查询"><a href="#关联查询" class="headerlink" title="关联查询"></a>关联查询</h2><h4 id="CROSS-JOIN"><a href="#CROSS-JOIN" class="headerlink" title="CROSS JOIN"></a>CROSS JOIN</h4><p>是一种简单的关联查询，不需要任何条件来匹配行，它直接将左表的 每一行 与右表的 每一行 进行组合，返回的结果是两个表的笛卡尔积。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">SELECT</span> e.<span class="hljs-property">emp_name</span>, e.<span class="hljs-property">salary</span>, e.<span class="hljs-property">department</span>, d.<span class="hljs-property">manager</span><br><span class="hljs-variable constant_">FROM</span> employees e<br><span class="hljs-variable constant_">CROSS</span> <span class="hljs-variable constant_">JOIN</span> departments d;<br></code></pre></td></tr></table></figure><h4 id="INNER-JOIN"><a href="#INNER-JOIN" class="headerlink" title="INNER JOIN"></a>INNER JOIN</h4><p>只返回两个表中满足关联条件的交集部分，即在两个表中都存在的匹配行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">SELECT</span> e.<span class="hljs-property">emp_name</span>, e.<span class="hljs-property">salary</span>, e.<span class="hljs-property">department</span>, d.<span class="hljs-property">manager</span><br><span class="hljs-variable constant_">FROM</span> employees e<br><span class="hljs-variable constant_">JOIN</span> departments d <span class="hljs-variable constant_">ON</span> e.<span class="hljs-property">department</span> = d.<span class="hljs-property">department</span>;<br></code></pre></td></tr></table></figure><h4 id="OUTER-JOIN"><a href="#OUTER-JOIN" class="headerlink" title="OUTER JOIN"></a>OUTER JOIN</h4><p>根据指定的关联条件，将两个表中满足条件的行组合在一起，并包含没有匹配的行 。<br>包括 LEFT OUTER JOIN 和 RIGHT OUTER JOIN 两种类型，分别表示查询左表和右表的所有行（即使没有被匹配），再加上满足条件的交集部分。有些数据库并不支持 RIGHT JOIN 语法，只需要把主表（from 后面的表）和关联表（LEFT JOIN 后面的表）顺序进行调换即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">SELECT</span> e.<span class="hljs-property">emp_name</span>, e.<span class="hljs-property">salary</span>, e.<span class="hljs-property">department</span>, d.<span class="hljs-property">manager</span><br><span class="hljs-variable constant_">FROM</span> employees e<br><span class="hljs-variable constant_">LEFT</span> <span class="hljs-variable constant_">JOIN</span> departments d <span class="hljs-variable constant_">ON</span> e.<span class="hljs-property">department</span> = d.<span class="hljs-property">department</span>;<br></code></pre></td></tr></table></figure><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">-- 查询出订单总金额 &gt; <span class="hljs-number">200</span> 的客户的姓名和他们的订单总金额<br>-- 主查询<br><span class="hljs-variable constant_">SELECT</span> name, total_amount<br><span class="hljs-variable constant_">FROM</span> customers<br><span class="hljs-variable constant_">WHERE</span> customer_id <span class="hljs-variable constant_">IN</span> (<br>    -- 子查询<br>    <span class="hljs-variable constant_">SELECT</span> <span class="hljs-variable constant_">DISTINCT</span> customer_id<br>    <span class="hljs-variable constant_">FROM</span> orders<br>    <span class="hljs-variable constant_">WHERE</span> total_amount &gt; <span class="hljs-number">200</span><br>);<br></code></pre></td></tr></table></figure><p><strong>exists</strong><br>用于检查主查询的结果集是否存在满足条件的记录，它返回布尔值（True 或 False），而不返回实际的数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">-- 主查询<br><span class="hljs-variable constant_">SELECT</span> name, total_amount<br><span class="hljs-variable constant_">FROM</span> customers<br><span class="hljs-variable constant_">WHERE</span> <span class="hljs-variable constant_">EXISTS</span> (<br>    -- 子查询<br>    <span class="hljs-variable constant_">SELECT</span> <span class="hljs-number">1</span><br>    <span class="hljs-variable constant_">FROM</span> orders<br>    <span class="hljs-variable constant_">WHERE</span> orders.<span class="hljs-property">customer_id</span> = customers.<span class="hljs-property">customer_id</span><br>);<br></code></pre></td></tr></table></figure><h4 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h4><ul><li><strong>UNION</strong> 操作：将两个或多个查询的结果集合并， 并去除重复的行 。即如果两个查询的结果有相同的行，则只保留一行。</li><li><strong>UNION ALL</strong> 操作：将两个或多个查询的结果集合并， 但不去除重复的行 。即如果两个查询的结果有相同的行，则全部保留。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">SELECT</span> name, age, department<br><span class="hljs-variable constant_">FROM</span> table1<br><span class="hljs-variable constant_">UNION</span><br><span class="hljs-variable constant_">SELECT</span> name, age, department<br><span class="hljs-variable constant_">FROM</span> table2;<br></code></pre></td></tr></table></figure></li></ul><h2 id="开窗函数"><a href="#开窗函数" class="headerlink" title="开窗函数"></a>开窗函数</h2><h4 id="sum-over"><a href="#sum-over" class="headerlink" title="sum over"></a>sum over</h4><p>SUM(计算字段名) OVER (PARTITION BY 分组字段名)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">SELECT</span> <br>    order_id, <br>    customer_id, <br>    order_date, <br>    total_amount,<br>    <span class="hljs-title function_">SUM</span>(total_amount) <span class="hljs-variable constant_">OVER</span> (<span class="hljs-variable constant_">PARTITION</span> <span class="hljs-variable constant_">BY</span> customer_id) <span class="hljs-variable constant_">AS</span> customer_total_amount<br><span class="hljs-variable constant_">FROM</span><br>    orders;<br></code></pre></td></tr></table></figure><h4 id="sum-over-order-by"><a href="#sum-over-order-by" class="headerlink" title="sum over order by"></a>sum over order by</h4><p>SUM(计算字段名) OVER (PARTITION BY 分组字段名 ORDER BY 排序字段 排序规则)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">-- 计算每个客户的历史订单累计金额，并显示每个订单的详细信息<br><br><span class="hljs-variable constant_">SELECT</span> <br>    order_id, <br>    customer_id, <br>    order_date, <br>    total_amount,<br>    <span class="hljs-title function_">SUM</span>(total_amount) <span class="hljs-variable constant_">OVER</span> (<span class="hljs-variable constant_">PARTITION</span> <span class="hljs-variable constant_">BY</span> customer_id <span class="hljs-variable constant_">ORDER</span> <span class="hljs-variable constant_">BY</span> order_date <span class="hljs-variable constant_">ASC</span>) <span class="hljs-variable constant_">AS</span> cumulative_total_amount<br><span class="hljs-variable constant_">FROM</span><br>    orders;<br></code></pre></td></tr></table></figure><h4 id="rank"><a href="#rank" class="headerlink" title="rank"></a>rank</h4><p>用于对查询结果集中的行进行 排名 的开窗函数。可以根据指定的列或表达式对结果集中的行进行排序，并为每一行分配一个排名。<br>在排名过程中，相同的值将被赋予相同的排名，而不同的值将被赋予不同的排名。<br>常见用法是在查询结果中查找前几名（Top N）或排名最高的行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">RANK</span>() <span class="hljs-variable constant_">OVER</span> (<br>  <span class="hljs-variable constant_">PARTITION</span> <span class="hljs-variable constant_">BY</span> 列名<span class="hljs-number">1</span>, 列名<span class="hljs-number">2</span>, ... -- 可选，用于指定分组列<br>  <span class="hljs-variable constant_">ORDER</span> <span class="hljs-variable constant_">BY</span> 列名<span class="hljs-number">3</span> [<span class="hljs-variable constant_">ASC</span>|<span class="hljs-variable constant_">DESC</span>], 列名<span class="hljs-number">4</span> [<span class="hljs-variable constant_">ASC</span>|<span class="hljs-variable constant_">DESC</span>], ... -- 用于指定排序列及排序方式<br>) <span class="hljs-variable constant_">AS</span> rank_column<br><span class="hljs-variable constant_">PARTITION</span> <span class="hljs-variable constant_">BY</span> 子句可选，用于指定分组列，将结果集按照指定列进行分组；<br><span class="hljs-variable constant_">ORDER</span> <span class="hljs-variable constant_">BY</span> 子句用于指定排序列及排序方式，决定了计算 <span class="hljs-title class_">Rank</span> 时的排序规则。<br><span class="hljs-variable constant_">AS</span> rank_column 用于指定生成的 <span class="hljs-title class_">Rank</span> 排名列的别名。<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">SELECT</span> <br>    order_id, <br>    customer_id, <br>    order_date, <br>    total_amount,<br>    <span class="hljs-title function_">RANK</span>() <span class="hljs-variable constant_">OVER</span> (<span class="hljs-variable constant_">PARTITION</span> <span class="hljs-variable constant_">BY</span> customer_id <span class="hljs-variable constant_">ORDER</span> <span class="hljs-variable constant_">BY</span> total_amount <span class="hljs-variable constant_">DESC</span>) <span class="hljs-variable constant_">AS</span> customer_rank<br><span class="hljs-variable constant_">FROM</span><br>    orders;<br></code></pre></td></tr></table></figure><h4 id="row-number"><a href="#row-number" class="headerlink" title="row_number"></a>row_number</h4><p>用于为查询结果集中的每一行分配唯一连续排名。<br>Row_Number函数为每一行都分配一个唯一的整数值，不管是否存在并列（相同排序值）的情况。<br>每一行都有一个唯一的行号，从 1 开始连续递增。</p><p>Row_Number 开窗函数的语法如下（几乎和 Rank 函数一模一样）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">ROW_NUMBER</span>() <span class="hljs-variable constant_">OVER</span> (<br>  <span class="hljs-variable constant_">PARTITION</span> <span class="hljs-variable constant_">BY</span> column1, column2, ... -- 可选，用于指定分组列<br>  <span class="hljs-variable constant_">ORDER</span> <span class="hljs-variable constant_">BY</span> column3 [<span class="hljs-variable constant_">ASC</span>|<span class="hljs-variable constant_">DESC</span>], column4 [<span class="hljs-variable constant_">ASC</span>|<span class="hljs-variable constant_">DESC</span>], ... -- 用于指定排序列及排序方式<br>) <span class="hljs-variable constant_">AS</span> row_number_column<br><span class="hljs-variable constant_">PARTITION</span> <span class="hljs-variable constant_">BY</span>子句可选，用于指定分组列，将结果集按照指定列进行分组。<span class="hljs-variable constant_">ORDER</span> <span class="hljs-variable constant_">BY</span> 子句用于指定排序列及排序方式，决定了计算 <span class="hljs-title class_">Row</span>_Number 时的排序规则。<span class="hljs-variable constant_">AS</span> row_number_column 用于指定生成的行号列的别名。<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">SELECT</span> <br>    order_id, <br>    customer_id, <br>    order_date, <br>    total_amount,<br>    <span class="hljs-title function_">ROW_NUMBER</span>() <span class="hljs-variable constant_">OVER</span> (<span class="hljs-variable constant_">PARTITION</span> <span class="hljs-variable constant_">BY</span> customer_id <span class="hljs-variable constant_">ORDER</span> <span class="hljs-variable constant_">BY</span> total_amount <span class="hljs-variable constant_">DESC</span>) <span class="hljs-variable constant_">AS</span> row_number<br><span class="hljs-variable constant_">FROM</span><br>    orders;<br></code></pre></td></tr></table></figure><h4 id="lag-lead"><a href="#lag-lead" class="headerlink" title="lag &#x2F; lead"></a>lag &#x2F; lead</h4><p>在需要比较相邻行数据或进行时间序列分析时非常有用。</p><ul><li><p>Lag 函数用于获取当前行之前的某一列的值。Lag 函数的语法如下：<br>LAG(column_name, offset, default_value) OVER (PARTITION BY partition_column ORDER BY sort_column)<br>参数解释：<br>column_name：要获取值的列名。<br>offset：表示要向上偏移的行数。例如，offset为1表示获取上一行的值，offset为2表示获取上两行的值，以此类推。<br>default_value：可选参数，用于指定当没有前一行时的默认值。<br>PARTITION BY和ORDER BY子句可选，用于分组和排序数据。</p></li><li><p>Lead 函数用于获取 当前行之后 的某一列的值。Lead 函数的语法如下：<br>LEAD(column_name, offset, default_value) OVER (PARTITION BY partition_column ORDER BY sort_column)<br>参数解释：<br>column_name：要获取值的列名。<br>offset：表示要向下偏移的行数。例如，offset为1表示获取下一行的值，offset为2表示获取下两行的值，以此类推。<br>default_value：可选参数，用于指定当没有后一行时的默认值。<br>PARTITION BY和ORDER BY子句可选，用于分组和排序数据。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">SELECT</span> <br>    student_id,<br>    exam_date,<br>    score,<br>    <span class="hljs-title function_">LAG</span>(score, <span class="hljs-number">1</span>, <span class="hljs-variable constant_">NULL</span>) <span class="hljs-variable constant_">OVER</span> (<span class="hljs-variable constant_">PARTITION</span> <span class="hljs-variable constant_">BY</span> student_id <span class="hljs-variable constant_">ORDER</span> <span class="hljs-variable constant_">BY</span> exam_date) <span class="hljs-variable constant_">AS</span> previous_score,<br>    <span class="hljs-title function_">LEAD</span>(score, <span class="hljs-number">1</span>, <span class="hljs-variable constant_">NULL</span>) <span class="hljs-variable constant_">OVER</span> (<span class="hljs-variable constant_">PARTITION</span> <span class="hljs-variable constant_">BY</span> student_id <span class="hljs-variable constant_">ORDER</span> <span class="hljs-variable constant_">BY</span> exam_date) <span class="hljs-variable constant_">AS</span> next_score<br><span class="hljs-variable constant_">FROM</span><br>    scores;<br></code></pre></td></tr></table></figure><p>整理自网站SQL之母<a href="http://sqlmother.yupi.icu/#/learn%EF%BC%88%E5%AD%A6%E4%B9%A0%E8%BF%87%EF%BC%8C%E4%BD%86%E8%AE%B0%E4%B8%8D%E4%BD%8F%EF%BC%8C%E5%8D%95%E7%8B%AC%E6%9F%A5%E7%9C%8B%E5%A4%AA%E9%BA%BB%E7%83%A6%EF%BC%8C%E6%89%80%E4%BB%A5%E6%95%B4%E7%90%86%E7%BB%99%E8%87%AA%E5%B7%B1%E7%9C%8B%EF%BC%89">http://sqlmother.yupi.icu/#/learn（学习过，但记不住，单独查看太麻烦，所以整理给自己看）</a></p>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mongo的include方法踩坑</title>
    <link href="/2023/08/21/mongo%E7%9A%84include%E6%96%B9%E6%B3%95%E8%B8%A9%E5%9D%91/"/>
    <url>/2023/08/21/mongo%E7%9A%84include%E6%96%B9%E6%B3%95%E8%B8%A9%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>又是不认识自己代码的一天</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Query</span> query = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Query</span>();<br><span class="hljs-keyword">if</span>(<span class="hljs-title class_">StringUtils</span>.<span class="hljs-title function_">isNotNull</span>(reqVO.<span class="hljs-title function_">getFieldLimitList</span>()) &amp;&amp; reqVO.<span class="hljs-title function_">getFieldLimitList</span>().<span class="hljs-title function_">size</span>() &gt; <span class="hljs-number">0</span>)&#123;<br>    <br><span class="hljs-keyword">for</span>(<span class="hljs-title class_">String</span> filedName : reqVO.<span class="hljs-title function_">getFieldLimitList</span>())&#123;<br>    <br>query.<span class="hljs-title function_">fields</span>().<span class="hljs-title function_">include</span>(filedName);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>看到 <strong>query.fields().include(filedName);</strong> 这行代码，</p><p><strong>以为效果是</strong>： 如果数据没有这个字段就把这条数据筛掉，加上自己当时写的注释有歧义，所以误解了。</p><p><strong>实际效果是</strong>： include只是对返回的结果集进行了处理，使得只返回结果集的某些字段，并不会减少结果。</p><p>如果需要查询时，不返回某字段为空的数据，正确做法是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Query</span> query = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Query</span>();<br><span class="hljs-keyword">if</span>(<span class="hljs-title class_">StringUtils</span>.<span class="hljs-title function_">isNotNull</span>(reqVO.<span class="hljs-title function_">getFieldLimitList</span>()) &amp;&amp; reqVO.<span class="hljs-title function_">getFieldLimitList</span>().<span class="hljs-title function_">size</span>() &gt; <span class="hljs-number">0</span>)&#123;<br>    <br>query.<span class="hljs-title function_">addCriteria</span>(<span class="hljs-title class_">Criteria</span>.<span class="hljs-title function_">where</span>(<span class="hljs-title class_">MongoConsts</span>.<span class="hljs-property">fieldName</span>).<span class="hljs-title function_">exists</span>(<span class="hljs-literal">true</span>));<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mongodb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lambda表达式和Stream API</title>
    <link href="/2023/08/19/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8CStream%20API/"/>
    <url>/2023/08/19/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8CStream%20API/</url>
    
    <content type="html"><![CDATA[<h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><p><strong>1. 有且仅有一个参数时，小括号可以省略（无参数时，小括号不能省略）</strong></p><p><strong>2. 语句只有一条时，可以省略大括号和return</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Runnable</span> runnable = ()-&gt; <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;Hello,World!&quot;</span>);<br><br><span class="hljs-title class_">BinaryOperator</span>&lt;<span class="hljs-title class_">Long</span>&gt; bo1 = x -&gt; x+<span class="hljs-number">1</span>;<br><br><span class="hljs-title class_">BinaryOperator</span>&lt;<span class="hljs-title class_">Long</span>&gt; bo2 = (x,y) -&gt; x+y;<br><br><span class="hljs-title class_">BinaryOperator</span>&lt;<span class="hljs-title class_">Long</span>&gt; bo3 = (x,y) -&gt; &#123;<br>    <br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;Hello,World!&quot;</span>);<br><span class="hljs-keyword">return</span> x+y;<br>&#125;;<br></code></pre></td></tr></table></figure><p>Lambda 表达式中无需指定参数类型，程序依然可以编译，这是因为 javac 根据程序的上下文，在后台推断出了参数的类型。</p><h3 id="Stream-API"><a href="#Stream-API" class="headerlink" title="Stream API"></a>Stream API</h3><p>“集合讲的是数据，流讲的是计算！”</p><h5 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h5><p>Collection创建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">stream</span>() <span class="hljs-comment">//返回一个顺序流</span><br><span class="hljs-title function_">parallelStream</span>()<span class="hljs-comment">//返回一个并行流</span><br></code></pre></td></tr></table></figure><p>Array创建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">stream</span>(T[] array)<span class="hljs-comment">//返回一个流</span><br></code></pre></td></tr></table></figure><p>值创建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">public <span class="hljs-keyword">static</span>&lt;T&gt; <span class="hljs-title class_">Stream</span>&lt;T&gt; <span class="hljs-title function_">of</span>(T... values)<span class="hljs-comment">//返回一个流</span><br></code></pre></td></tr></table></figure><p>函数创建无限流</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 迭代</span><br>public <span class="hljs-keyword">static</span>&lt;T&gt; <span class="hljs-title class_">Stream</span>&lt;T&gt; <span class="hljs-title function_">of</span>(T... values)<br><br><span class="hljs-comment">// 生成</span><br>public <span class="hljs-keyword">static</span>&lt;T&gt; <span class="hljs-title class_">Stream</span>&lt;T&gt; <span class="hljs-title function_">generate</span>(<span class="hljs-title class_">Supplier</span>&lt;T&gt; s)<br></code></pre></td></tr></table></figure><h5 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h5><p>多个中间操作可以连接起来形成一个流水线，除非流水线上触发终止操作，否则中间操作不会执行任何的处理！而在终止操作时一次性全部处理，称为“惰性求值”。</p><p>筛选与切片(filter、distinct、limit、skip)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">Integer</span>&gt; integerList = <span class="hljs-title class_">Arrays</span>.<span class="hljs-title function_">asList</span>(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>);<br><br><span class="hljs-comment">//filter(Predicate p)接收 Lambda，从流中排除某些元素。</span><br><span class="hljs-title class_">Stream</span>&lt;<span class="hljs-title class_">Integer</span>&gt; integerStream = integerList.<span class="hljs-title function_">stream</span>().<span class="hljs-title function_">filter</span>(x -&gt; x &gt; <span class="hljs-number">6</span>);<br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(integerStream.<span class="hljs-title function_">collect</span>(<span class="hljs-title class_">Collectors</span>.<span class="hljs-title function_">toList</span>()));<span class="hljs-comment">//[7, 7, 7, 8, 8, 9]</span><br><br><span class="hljs-comment">//distinct()筛选，通过流所生成元素的 hashCode() 和 equals() 去除重复元素</span><br><span class="hljs-title class_">Stream</span>&lt;<span class="hljs-title class_">Integer</span>&gt; distinctStream = integerList.<span class="hljs-title function_">stream</span>().<span class="hljs-title function_">distinct</span>();<br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(distinctStream.<span class="hljs-title function_">collect</span>(<span class="hljs-title class_">Collectors</span>.<span class="hljs-title function_">toList</span>()));<span class="hljs-comment">//[4, 5, 6, 7, 8, 9]</span><br><br><span class="hljs-comment">//limit(long maxSize) 截断流，使其元素不超过给定数量。</span><br><span class="hljs-title class_">Stream</span>&lt;<span class="hljs-title class_">Integer</span>&gt; limitStream = integerList.<span class="hljs-title function_">stream</span>().<span class="hljs-title function_">limit</span>(<span class="hljs-number">5</span>);<br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(limitStream.<span class="hljs-title function_">collect</span>(<span class="hljs-title class_">Collectors</span>.<span class="hljs-title function_">toList</span>()));<span class="hljs-comment">//[4, 5, 6, 7, 7]</span><br><br><span class="hljs-comment">//skip(long n)跳过元素，返回一个扔掉了前 n 个元素的流。</span><br><span class="hljs-comment">//若流中元素不足 n 个，则返回一个空流。与 limit(n) 互补</span><br><span class="hljs-title class_">Stream</span>&lt;<span class="hljs-title class_">Integer</span>&gt; skipStream = integerList.<span class="hljs-title function_">stream</span>().<span class="hljs-title function_">skip</span>(<span class="hljs-number">5</span>);<br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(skipStream.<span class="hljs-title function_">collect</span>(<span class="hljs-title class_">Collectors</span>.<span class="hljs-title function_">toList</span>()));<span class="hljs-comment">//[7, 8, 8, 9]</span><br></code></pre></td></tr></table></figure><p>映射（map、flatMap）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">public <span class="hljs-keyword">static</span> <span class="hljs-title class_">Stream</span>&lt;<span class="hljs-title class_">Character</span>&gt; <span class="hljs-title function_">filterCharacter</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> str</span>)&#123;<br>    <br>    <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">Character</span>&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-title class_">Character</span> ch : str.<span class="hljs-title function_">toCharArray</span>()) &#123;<br>    <br>        list.<span class="hljs-title function_">add</span>(ch);<br>    &#125;<br>    <span class="hljs-keyword">return</span> list.<span class="hljs-title function_">stream</span>();<br>&#125;<br><br>@<span class="hljs-title class_">Test</span><br>public <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span>(<span class="hljs-params"></span>)&#123;<br>    <br>    <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">String</span>&gt; stringsList = <span class="hljs-title class_">Arrays</span>.<span class="hljs-title function_">asList</span>(<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-string">&quot;bbb&quot;</span>);<br><br>    <span class="hljs-comment">//map(Function f 接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</span><br>    <span class="hljs-title class_">Stream</span>&lt;<span class="hljs-title class_">String</span>&gt; mapStream = stringsList.<span class="hljs-title function_">stream</span>().<span class="hljs-title function_">map</span>(<span class="hljs-title class_">String</span>::toUpperCase);<br>    <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(mapStream.<span class="hljs-title function_">collect</span>(<span class="hljs-title class_">Collectors</span>.<span class="hljs-title function_">toList</span>()));<span class="hljs-comment">//[AAA, BBB]</span><br><br><br>    <span class="hljs-comment">//flatMap(Function f)  接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流</span><br>    <span class="hljs-title class_">Stream</span>&lt;<span class="hljs-title class_">Character</span>&gt; characterStream = stringsList.<span class="hljs-title function_">stream</span>().<span class="hljs-title function_">flatMap</span>(<span class="hljs-title class_">StreamTest</span>::filterCharacter).<span class="hljs-title function_">map</span>(<span class="hljs-title class_">Character</span>::toUpperCase);<br>    <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(characterStream.<span class="hljs-title function_">collect</span>(<span class="hljs-title class_">Collectors</span>.<span class="hljs-title function_">toList</span>()));<span class="hljs-comment">//[A, A, A, B, B, B]</span><br>&#125;<br></code></pre></td></tr></table></figure><p>排序(sorted)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//sorted() 生一个新流，其中按自然顺序排序</span><br><span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">Integer</span>&gt; integerList = <span class="hljs-title class_">Arrays</span>.<span class="hljs-title function_">asList</span>(<span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>);<br><span class="hljs-title class_">Stream</span>&lt;<span class="hljs-title class_">Integer</span>&gt; sorted = integerList.<span class="hljs-title function_">stream</span>().<span class="hljs-title function_">sorted</span>();<br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(sorted.<span class="hljs-title function_">collect</span>(<span class="hljs-title class_">Collectors</span>.<span class="hljs-title function_">toList</span>()));<span class="hljs-comment">//[2, 4, 5, 6, 7, 9]</span><br><br><span class="hljs-comment">//sorted(Comparator comp) 产生一个新流，其中按比较器顺序排序</span><br><span class="hljs-title class_">Stream</span>&lt;<span class="hljs-title class_">Integer</span>&gt; sorted1 = integerList.<span class="hljs-title function_">stream</span>().<span class="hljs-title function_">sorted</span>((a, b) -&gt; b - a);<br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(sorted1.<span class="hljs-title function_">collect</span>(<span class="hljs-title class_">Collectors</span>.<span class="hljs-title function_">toList</span>()));<span class="hljs-comment">//[9, 7, 6, 5, 4, 2]</span><br></code></pre></td></tr></table></figure><h5 id="终止操作-allMatch、anyMatch、noneMatch、findFirst、findAny、count…"><a href="#终止操作-allMatch、anyMatch、noneMatch、findFirst、findAny、count…" class="headerlink" title="终止操作(allMatch、anyMatch、noneMatch、findFirst、findAny、count…)"></a>终止操作(allMatch、anyMatch、noneMatch、findFirst、findAny、count…)</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">Integer</span>&gt; integerList = <span class="hljs-title class_">Arrays</span>.<span class="hljs-title function_">asList</span>(<span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>);<br><span class="hljs-comment">//检查是否匹配所有元素</span><br>boolean b = integerList.<span class="hljs-title function_">stream</span>().<span class="hljs-title function_">allMatch</span>(s -&gt; s == <span class="hljs-number">6</span>);<br><span class="hljs-comment">//检查是否至少匹配一个元素</span><br>boolean b1 = integerList.<span class="hljs-title function_">stream</span>().<span class="hljs-title function_">anyMatch</span>(s -&gt; s == <span class="hljs-number">6</span>);<br><span class="hljs-comment">//检查是否没有匹配所有元素</span><br>boolean b2 = integerList.<span class="hljs-title function_">stream</span>().<span class="hljs-title function_">noneMatch</span>(s -&gt; s == <span class="hljs-number">6</span>);<br><span class="hljs-comment">//返回第一个元素</span><br><span class="hljs-title class_">Optional</span>&lt;<span class="hljs-title class_">Integer</span>&gt; first= integerList.<span class="hljs-title function_">stream</span>().<span class="hljs-title function_">findFirst</span>();<br><span class="hljs-comment">//返回当前流中的任意元素</span><br><span class="hljs-title class_">Optional</span>&lt;<span class="hljs-title class_">Integer</span>&gt; any = integerList.<span class="hljs-title function_">stream</span>().<span class="hljs-title function_">findAny</span>();<br><span class="hljs-comment">//返回流中元素总数</span><br>long count = integerList.<span class="hljs-title function_">stream</span>().<span class="hljs-title function_">count</span>();<br><span class="hljs-comment">//返回流中最大值</span><br><span class="hljs-title class_">Optional</span>&lt;<span class="hljs-title class_">Integer</span>&gt; max = integerList.<span class="hljs-title function_">stream</span>().<span class="hljs-title function_">max</span>(<span class="hljs-title class_">Integer</span>::compare);<br><span class="hljs-comment">//返回流中最小值</span><br><span class="hljs-title class_">Optional</span>&lt;<span class="hljs-title class_">Integer</span>&gt; min = integerList.<span class="hljs-title function_">stream</span>().<span class="hljs-title function_">min</span>(<span class="hljs-title class_">Integer</span>::compare);<br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(b);<span class="hljs-comment">//false</span><br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(b1);<span class="hljs-comment">//true</span><br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(b2);<span class="hljs-comment">//false</span><br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(first.<span class="hljs-title function_">get</span>());<span class="hljs-comment">//7</span><br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(any.<span class="hljs-title function_">get</span>());<span class="hljs-comment">//7</span><br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(count);<span class="hljs-comment">//6</span><br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(max.<span class="hljs-title function_">get</span>());<span class="hljs-comment">//9</span><br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(min.<span class="hljs-title function_">get</span>());<span class="hljs-comment">//2</span><br><span class="hljs-comment">//内部迭代</span><br>integerList.<span class="hljs-title function_">stream</span>().<span class="hljs-title function_">forEach</span>(<span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>::print);<span class="hljs-comment">//745269</span><br></code></pre></td></tr></table></figure><ol><li>Stream 自己不会存储元素。</li><li>Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。</li><li>Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode1578. 使绳子变成彩色的最短时间</title>
    <link href="/2023/08/19/LeetCode1578.%20%E4%BD%BF%E7%BB%B3%E5%AD%90%E5%8F%98%E6%88%90%E5%BD%A9%E8%89%B2%E7%9A%84%E6%9C%80%E7%9F%AD%E6%97%B6%E9%97%B4/"/>
    <url>/2023/08/19/LeetCode1578.%20%E4%BD%BF%E7%BB%B3%E5%AD%90%E5%8F%98%E6%88%90%E5%BD%A9%E8%89%B2%E7%9A%84%E6%9C%80%E7%9F%AD%E6%97%B6%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>拆除成本 &#x3D; 全部拆除 - 最大的不拆除</li><li>在统计成本的同时，维持一个成本的最大值</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <br>    public int <span class="hljs-title function_">minCost</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> colors, int[] neededTime</span>) &#123;<br>    <br>        int res = <span class="hljs-number">0</span>;<br>        int i = <span class="hljs-number">0</span>;<br>        int len = colors.<span class="hljs-title function_">length</span>();<br>        <span class="hljs-keyword">while</span> (i &lt; len) &#123;<br>    <br>            int max = -<span class="hljs-number">1</span>;<br>            int sum = <span class="hljs-number">0</span>;<br>            char ch = colors.<span class="hljs-title function_">charAt</span>(i);<br>            <span class="hljs-keyword">while</span>(i &lt; len &amp;&amp; colors.<span class="hljs-title function_">charAt</span>(i) == ch) &#123;<br>    <br>                sum += neededTime[i];<br>                max = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(max, neededTime[i]);<br>                i++;<br>            &#125;<br>            res += sum - max;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>布隆过滤器和布谷鸟过滤器</title>
    <link href="/2023/08/19/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E5%B8%83%E8%B0%B7%E9%B8%9F%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <url>/2023/08/19/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E5%B8%83%E8%B0%B7%E9%B8%9F%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h2><p>本质：<strong>一个空的2进制数组</strong>（初始全为0，只存0和1）</p><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><p>一个key，经过<strong>k个hash函数</strong>运算后，得到k个值，将2进制数组对应下标的位置置为1。</p><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>将key同样进行k个hash，去2进制数组比对对应下标位置的值</p><ul><li>全为1则<strong>可能存在</strong>该key；</li><li>不全为1，则<strong>一定不存在</strong>该key</li></ul><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>不能删</p><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><ul><li>大集合中检查元素是否重复</li><li>Redis中防止缓存穿透</li></ul><p>缓存穿透：key对应的数据在数据源并不存在，每次针对此key的请求从缓存获取不到，请求都会到数据源，从而可能压垮数据源。<br>解决办法：将数据源的key是否存在的信息存储到布隆过滤器中，如果布隆过滤器判定数据不存在，则不再请求数据源。</p><h2 id="布谷鸟过滤器"><a href="#布谷鸟过滤器" class="headerlink" title="布谷鸟过滤器"></a>布谷鸟过滤器</h2><p>基本的布谷鸟过滤器由两个并不独立的哈希函数构成。<br>基本单位为条目，每个条目存储一个指纹。<br>指纹指的是使用一个哈希函数生成的n位比特位，n的具体大小由所能接受的误判率来设置。一般n&#x3D;8<br>布谷鸟哈希表由一个桶数组构成，每个桶可以有多个条目，即每个桶中有多个存放指纹的位置。</p><h4 id="插入-1"><a href="#插入-1" class="headerlink" title="插入"></a>插入</h4><p>先进行一次hash，得出应当插入位置和应当插入的值（指纹）。<br>如果这个桶（桶内的m个位置均被占用）插入失败，会重新计算(指纹哈希与第一个索引异或)，查看第二个桶能否插入。</p><p>若第二个桶插入失败，则会随机在两个桶中挑选一个桶，将其中的一个值标记为旧值，用新值覆盖旧值，旧值会在重复上面的步骤进行插入。</p><h4 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h4><p>如果数组过小，会发生循环挤兑的情况。<br>如果超过最大挤兑次数，进行扩容，重新计算每个指纹的位置。</p><h4 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h4><ul><li>通过两次hash找到索引位置，如果任何桶中的指纹匹配，则从该桶中删除匹配指纹的一份副本。</li><li>如果俩数据的哈希值和指纹相同时，会出现误删除情况。</li></ul><h5 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h5><p>删除后再添加新指纹。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>支持删除</li><li>在误判率小于3%时，空间性能优于布隆过滤器</li><li>查询效率高</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>插入性能差</li><li>插入重复元素存在上限（哈希函数个数&#x2F;*桶容量）</li><li>空间大小要求是2的指数</li><li>删除有问题，存在误删的概率</li></ul><h2 id="表格一览"><a href="#表格一览" class="headerlink" title="表格一览"></a>表格一览</h2><p>布隆过滤器 布谷鸟过滤器 插入 k个hash函数 2个hash函数 删除 不能删 可以删 更新 不能更新 删除后再添加 查询 有误判率 有误判率 优点 安全、节省空间 查询效率高、支持删除、更节省空间 缺点 有误判率、无法删除 插入性能差、插入重复元素有上限、空间大小为2的指数、删除不完美</p>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode1048 最长字符串链</title>
    <link href="/2023/08/19/LeetCode1048%20%E6%9C%80%E9%95%BF%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%93%BE/"/>
    <url>/2023/08/19/LeetCode1048%20%E6%9C%80%E9%95%BF%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>从短到长，增加字母的话，有多个位置，并且每个位置都有26种选择，正难则反。选择从长到短，删除某个字母。</li><li>删除字母得到的新字符串可能已经计算过，所以将计算的结果都记录一下。</li><li>记忆化搜索： 先查表再计算，先存表再返回。</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <br><span class="hljs-comment">//记忆化</span><br>    <span class="hljs-title class_">HashMap</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Integer</span>&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    public int <span class="hljs-title function_">longestStrChain</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] words</span>) &#123;<br>    <br>        <span class="hljs-keyword">for</span> (<span class="hljs-title class_">String</span> <span class="hljs-attr">str</span>: words) &#123;<br>    <br>            hashMap.<span class="hljs-title function_">put</span>(str, <span class="hljs-number">0</span>);<br>        &#125;<br>        int ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-title class_">String</span> str : words) &#123;<br>    <br>            ans = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(ans, <span class="hljs-title function_">dfs</span>(str));<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br>    private int <span class="hljs-title function_">dfs</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> str</span>) &#123;<br>    <br>        int res = hashMap.<span class="hljs-title function_">get</span>(str);<br>        <span class="hljs-comment">//大于0代表曾经计算过</span><br>        <span class="hljs-keyword">if</span>(res &gt; <span class="hljs-number">0</span>) &#123;<br>    <br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; str.<span class="hljs-title function_">length</span>(); i++) &#123;<br>    <br>            <span class="hljs-title class_">String</span> tmp = str.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, i) + str.<span class="hljs-title function_">substring</span>(i+<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (hashMap.<span class="hljs-title function_">containsKey</span>(tmp)) &#123;<br>    <br>                res = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(res, <span class="hljs-title function_">dfs</span>(tmp));<br>            &#125;<br>        &#125;<br>        hashMap.<span class="hljs-title function_">put</span>(str, res + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> res + <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode1387 将整数按权重排序</title>
    <link href="/2023/08/19/LeetCode1387%20%E5%B0%86%E6%95%B4%E6%95%B0%E6%8C%89%E6%9D%83%E9%87%8D%E6%8E%92%E5%BA%8F/"/>
    <url>/2023/08/19/LeetCode1387%20%E5%B0%86%E6%95%B4%E6%95%B0%E6%8C%89%E6%9D%83%E9%87%8D%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>首先是这种计算权重的方式很有可能出现重复，所以需要记忆化搜索</li><li>记忆化搜索：先查表再计算，先存表再返回。</li><li>将整数 x 和计算的权重分别存储数组的0和1的位置</li><li>重写compare将数组排序按规则排序</li><li>返回结果</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <br>    private <span class="hljs-title class_">HashMap</span>&lt;<span class="hljs-title class_">Integer</span>, <span class="hljs-title class_">Integer</span>&gt; me = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    public int <span class="hljs-title function_">getKth</span>(<span class="hljs-params">int lo, int hi, int k</span>) &#123;<br>    <br>        int[][] arr = <span class="hljs-keyword">new</span> int[hi - lo + <span class="hljs-number">1</span>][<span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">for</span> (int i = lo; i &lt;= hi; i++) &#123;<br>    <br>            int tmp = <span class="hljs-title function_">dfs</span>(i);<br>            me.<span class="hljs-title function_">put</span>(i, tmp);<br>            arr[i - lo][<span class="hljs-number">0</span>] = i;<br>            arr[i - lo][<span class="hljs-number">1</span>] = tmp;<br>        &#125;<br>        <span class="hljs-title class_">Arrays</span>.<span class="hljs-title function_">sort</span>(arr, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;int[]&gt;() &#123;<br>    <br>            @<span class="hljs-title class_">Override</span><br>            public int <span class="hljs-title function_">compare</span>(<span class="hljs-params">int[] o1, int[] o2</span>) &#123;<br>    <br>                <span class="hljs-keyword">return</span> o1[<span class="hljs-number">1</span>] == o2[<span class="hljs-number">1</span>] ? o1[<span class="hljs-number">0</span>] - o2[<span class="hljs-number">0</span>] : o1[<span class="hljs-number">1</span>] - o2[<span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-keyword">return</span> arr[k-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>];<br>    &#125;<br><br>    int <span class="hljs-title function_">dfs</span>(<span class="hljs-params">int x</span>) &#123;<br>    <br>        int res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(me.<span class="hljs-title function_">get</span>(x) != <span class="hljs-literal">null</span>)&#123;<br>    <br>            res = me.<span class="hljs-title function_">get</span>(x);<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x == <span class="hljs-number">1</span>) &#123;<br>    <br>            res = <span class="hljs-number">0</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br>    <br>            res = <span class="hljs-number">1</span> + <span class="hljs-title function_">dfs</span>(x * <span class="hljs-number">3</span> + <span class="hljs-number">1</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>    <br>            res = <span class="hljs-number">1</span> + <span class="hljs-title function_">dfs</span>(x / <span class="hljs-number">2</span>);<br>        &#125;<br>        me.<span class="hljs-title function_">put</span>(x, res);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode1218 最长定差子序列</title>
    <link href="/2023/08/19/LeetCode1218%20%E6%9C%80%E9%95%BF%E5%AE%9A%E5%B7%AE%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <url>/2023/08/19/LeetCode1218%20%E6%9C%80%E9%95%BF%E5%AE%9A%E5%B7%AE%E5%AD%90%E5%BA%8F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>因为不能改变顺序，所以后面的元素，直接看它前面的元素就行。</li><li>长度为n的数组 &#x3D; 长度为n - 1的数组 + 第 n 个数</li><li>从前向后遍历，对于每个元素，如果能找到它的前一个元素，就在前一个元素的基础上+1，否则就录入1。</li><li>同时记录录入的数据的最大值</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <br>    public int <span class="hljs-title function_">longestSubsequence</span>(<span class="hljs-params">int[] arr, int difference</span>) &#123;<br>    <br>        <span class="hljs-title class_">HashMap</span>&lt;<span class="hljs-title class_">Integer</span>, <span class="hljs-title class_">Integer</span>&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        int res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>    <br>            int temp = hashMap.<span class="hljs-title function_">getOrDefault</span>(arr[i] - difference, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>;<br>            hashMap.<span class="hljs-title function_">put</span>(arr[i], temp);<br>            res = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(res, temp);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 1700. 无法吃午餐的学生数量</title>
    <link href="/2022/10/21/LeetCode%201700.%20%E6%97%A0%E6%B3%95%E5%90%83%E5%8D%88%E9%A4%90%E7%9A%84%E5%AD%A6%E7%94%9F%E6%95%B0%E9%87%8F/"/>
    <url>/2022/10/21/LeetCode%201700.%20%E6%97%A0%E6%B3%95%E5%90%83%E5%8D%88%E9%A4%90%E7%9A%84%E5%AD%A6%E7%94%9F%E6%95%B0%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h5 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h5><p>LeetCode 1700. 无法吃午餐的学生数量<a href="https://leetcode.cn/problems/number-of-students-unable-to-eat-lunch/">https://leetcode.cn/problems/number-of-students-unable-to-eat-lunch/</a></p><h5 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h5><p>学校的自助午餐提供圆形和方形的三明治，分别用数字 0 和 1 表示。所有学生站在一个队列里，每个学生要么喜欢圆形的要么喜欢方形的。<br>餐厅里三明治的数量与学生的数量相同。所有三明治都放在一个 栈 里，每一轮：</p><p>如果队列最前面的学生 喜欢 栈顶的三明治，那么会 拿走它 并离开队列。<br>否则，这名学生会 放弃这个三明治 并回到队列的尾部。<br>这个过程会一直持续到队列里所有学生都不喜欢栈顶的三明治为止。</p><p>给你两个整数数组 students 和 sandwiches ，其中 sandwiches[i] 是栈里面第 i 个三明治的类型（i &#x3D; 0 是栈的顶部）， students[j] 是初始队列里第 j 名学生对三明治的喜好（j &#x3D; 0 是队列的最开始位置）。请你返回无法吃午餐的学生数量。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/number-of-students-unable-to-eat-lunch">https://leetcode.cn/problems/number-of-students-unable-to-eat-lunch</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h5 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h5><ul><li>总的来说就是，食物不能乱碰（厨师洁癖），每个人，只能拿栈顶的三明治。</li><li>如果栈顶是圆形的，你就需要一个喜欢吃圆的人把三明治拿走。</li><li>如果栈顶是方形的，你就需要一个喜欢吃方的人把三明治拿走。</li><li>如果大伙没有喜欢栈顶三明治的人，不好意思，都饿着吧。</li></ul><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <br>    public int <span class="hljs-title function_">countStudents</span>(<span class="hljs-params">int[] students, int[] sandwiches</span>) &#123;<br>    <br>       int x=<span class="hljs-number">0</span>;<br>       int y=<span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">for</span>(int i=<span class="hljs-number">0</span>; i&lt;students.<span class="hljs-property">length</span>; i++)&#123;<br>    <br>           <span class="hljs-keyword">if</span>(students[i] == <span class="hljs-number">0</span>)&#123;<br>    <br>               x++;<br>           &#125;<span class="hljs-keyword">else</span>&#123;<br>    <br>               y++;<br>           &#125;<br>       &#125;<br><br>        <span class="hljs-keyword">for</span>(int j=<span class="hljs-number">0</span>; j&lt;sandwiches.<span class="hljs-property">length</span>; j++)&#123;<br>    <br>            <span class="hljs-keyword">if</span>(sandwiches[j] == <span class="hljs-number">0</span> &amp;&amp; x&gt;<span class="hljs-number">0</span>)&#123;<br>    <br>                x--;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sandwiches[j] == <span class="hljs-number">1</span> &amp;&amp; y&gt;<span class="hljs-number">0</span>)&#123;<br>    <br>                y--;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>    <br>                <span class="hljs-keyword">return</span> x+y;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> x+y;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职场和发展</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 901. 股票价格跨度</title>
    <link href="/2022/10/21/LeetCode%20901.%20%E8%82%A1%E7%A5%A8%E4%BB%B7%E6%A0%BC%E8%B7%A8%E5%BA%A6/"/>
    <url>/2022/10/21/LeetCode%20901.%20%E8%82%A1%E7%A5%A8%E4%BB%B7%E6%A0%BC%E8%B7%A8%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<p>忘了队列咋用了</p><h5 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h5><p>LeetCode 901. 股票价格跨度<a href="https://leetcode.cn/problems/online-stock-span/">https://leetcode.cn/problems/online-stock-span/</a></p><h5 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h5><p>编写一个 StockSpanner 类，它收集某些股票的每日报价，并返回该股票当日价格的跨度。</p><p>今天股票价格的跨度被定义为股票价格小于或等于今天价格的最大连续日数（从今天开始往回数，包括今天）。</p><p>例如，如果未来7天股票的价格是 [100, 80, 60, 70, 60, 75, 85]，那么股票跨度将是 [1, 1, 1, 2, 1, 4, 6]。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/online-stock-span">https://leetcode.cn/problems/online-stock-span</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h5 id="个人思路"><a href="#个人思路" class="headerlink" title="个人思路"></a>个人思路</h5><p><img src="https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403161543877.png" alt="在这里插入图片描述"></p><ul><li>设A为 B之前 最近的 比B大 的元素。</li><li>即A与B之间的任一元素X满足 A&gt;X &amp;&amp; X&lt;&#x3D; B</li><li>若此时在B后添加一元素C</li><li>若C小于B则返回1</li><li>否则，C&gt;&#x3D;B，又因为A与B之间任一元素X&lt;&#x3D;B, 即X&lt;&#x3D;B&lt;&#x3D;C</li><li>所以我们获取A后一共多少个元素就行。即A与B之间的元素在添加B时就可以remove了。</li><li>为了避免没有元素充当A这种情况，在初始化list时添加一个Integer.MAX_VALUE元素。</li></ul><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StockSpanner</span> &#123;<br>    <br><br>    private <span class="hljs-title class_">List</span>&lt;int[]&gt; list;<br>    private int index = -<span class="hljs-number">1</span>;<br><br>    public <span class="hljs-title class_">StockSpanner</span>() &#123;<br>    <br>        list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;int[]&gt;();<br>        list.<span class="hljs-title function_">add</span>(<span class="hljs-keyword">new</span> int[]&#123;<br>    index,<span class="hljs-title class_">Integer</span>.<span class="hljs-property">MAX_VALUE</span>&#125;);<br>    &#125;<br>    <br>    public int <span class="hljs-title function_">next</span>(<span class="hljs-params">int price</span>) &#123;<br>    <br>        index++;<br>        <span class="hljs-keyword">for</span>(int i=list.<span class="hljs-title function_">size</span>()-<span class="hljs-number">1</span>; i&gt;=<span class="hljs-number">0</span>; i--)&#123;<br>    <br>            <span class="hljs-keyword">if</span>(list.<span class="hljs-title function_">get</span>(i)[<span class="hljs-number">1</span>] &lt;= price)&#123;<br>    <br>                list.<span class="hljs-title function_">remove</span>(i);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>    <br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>        &#125;<br><br>        int res = index - list.<span class="hljs-title function_">get</span>(list.<span class="hljs-title function_">size</span>()-<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>];<br><br>        list.<span class="hljs-title function_">add</span>(<span class="hljs-keyword">new</span> int[]&#123;<br>    index,price&#125;);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your StockSpanner object will be instantiated and called as such:</span><br><span class="hljs-comment"> * StockSpanner obj = new StockSpanner();</span><br><span class="hljs-comment"> * int param_1 = obj.next(price);</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode 779. 第K个语法符号</title>
    <link href="/2022/10/21/Leetcode%20779.%20%E7%AC%ACK%E4%B8%AA%E8%AF%AD%E6%B3%95%E7%AC%A6%E5%8F%B7/"/>
    <url>/2022/10/21/Leetcode%20779.%20%E7%AC%ACK%E4%B8%AA%E8%AF%AD%E6%B3%95%E7%AC%A6%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<h5 id="题目来源：-Leetcode-779-第K个语法符号https-leetcode-cn-problems-k-th-symbol-in-grammar"><a href="#题目来源：-Leetcode-779-第K个语法符号https-leetcode-cn-problems-k-th-symbol-in-grammar" class="headerlink" title="题目来源： Leetcode 779. 第K个语法符号https://leetcode.cn/problems/k-th-symbol-in-grammar/"></a>题目来源： Leetcode 779. 第K个语法符号<a href="https://leetcode.cn/problems/k-th-symbol-in-grammar/">https://leetcode.cn/problems/k-th-symbol-in-grammar/</a></h5><h5 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h5><p>我们构建了一个包含 n 行( 索引从 1 开始 )的表。首先在第一行我们写上一个 0。接下来的每一行，将前一行中的0替换为01，1替换为10。</p><p>例如，对于 n &#x3D; 3 ，第 1 行是 0 ，第 2 行是 01 ，第3行是 0110 。<br>给定行数 n 和序数 k，返回第 n 行中第 k 个字符。（ k 从索引 1 开始）</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/k-th-symbol-in-grammar">https://leetcode.cn/problems/k-th-symbol-in-grammar</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h5 id="个人思路"><a href="#个人思路" class="headerlink" title="个人思路"></a>个人思路</h5><ul><li>每一行的前半部分正好为上一行</li><li>每一行的后半部分正好为前半部分的反转。</li><li>后半部分因为相当于上一行的反转，用1-x来达到这种目的</li></ul><p>代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <br>    public int <span class="hljs-title function_">kthGrammar</span>(<span class="hljs-params">int n, int k</span>) &#123;<br>    <br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)&#123;<br>    <br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br><span class="hljs-comment">//处于前半部分还是后半部分</span><br>        <span class="hljs-keyword">if</span>(k &gt; <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(<span class="hljs-number">2</span>,n-<span class="hljs-number">2</span>))&#123;<br>    <br>            <span class="hljs-keyword">return</span> (<span class="hljs-number">1</span>-<span class="hljs-title function_">kthGrammar</span>(n-<span class="hljs-number">1</span>, k-(int)<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(<span class="hljs-number">2</span>,n-<span class="hljs-number">2</span>)));<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>    <br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_">kthGrammar</span>(n-<span class="hljs-number">1</span>,k);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>没想到这辈子还能赶上一次绿的题。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Z字变换（Java实现）Leetcode 6</title>
    <link href="/2022/03/28/Z%E5%AD%97%E5%8F%98%E6%8D%A2%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89Leetcode%206/"/>
    <url>/2022/03/28/Z%E5%AD%97%E5%8F%98%E6%8D%A2%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89Leetcode%206/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。</p><p>比如输入字符串为 “LEETCODEISHIRING” 行数为 3 时，排列如下：</p><p>L C I R<br>E T O E S I I G<br>E D H N</p><p>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：“LCIRETOESIIGEDHN”。</p><p>请你实现这个将字符串进行指定行数变换的函数：</p><p>string convert(string s, int numRows);</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/zigzag-conversionhttps://leetcode-cn.com/problems/zigzag-conversion">https://leetcode-cn.com/problems/zigzag-conversionhttps://leetcode-cn.com/problems/zigzag-conversion</a></p><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p>输入: s &#x3D; “LEETCODEISHIRING”, numRows &#x3D; 3<br>输出: “LCIRETOESIIGEDHN”</p><h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><p>输入: s &#x3D; “LEETCODEISHIRING”, numRows &#x3D; 4<br>输出: “LDREOEIIECIHNTSG”<br>解释:<br>L D R<br>E O E I I<br>E C I H N<br>T S G</p><h3 id="代码思路"><a href="#代码思路" class="headerlink" title="代码思路"></a>代码思路</h3><ol><li>一行或两行可以直接返回</li><li>其余情况先从上往下填满，然后向右上方向填满，重复此步骤</li><li>加起来，toString()<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    public <span class="hljs-title class_">String</span> <span class="hljs-title function_">convert</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> s, int numRows</span>) &#123;<br>        <span class="hljs-keyword">if</span>(numRows &lt;= <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">return</span> s;<br>    &#125;<br>        char[][] chs = <span class="hljs-keyword">new</span> char[numRows][s.<span class="hljs-title function_">length</span>()];<br>        int row = <span class="hljs-number">0</span>,col = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(int i=<span class="hljs-number">0</span>; i&lt;s.<span class="hljs-title function_">length</span>();)&#123;<br>            <span class="hljs-keyword">while</span>(row &lt; numRows &amp;&amp; i&lt;s.<span class="hljs-title function_">length</span>())<br>            &#123;<br>                chs[row][col] = s.<span class="hljs-title function_">charAt</span>(i++);<br>                row++;<br>            &#125;<br>            row--;<br>            <span class="hljs-keyword">while</span>(row &gt;= <span class="hljs-number">1</span> &amp;&amp; i&lt;s.<span class="hljs-title function_">length</span>()) &#123;<br>                chs[--row][++col] = s.<span class="hljs-title function_">charAt</span>(i++);<br>            &#125;<br>            row++;<br>        &#125;<br>        <span class="hljs-title class_">StringBuilder</span> stringBuilder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span>(int i=<span class="hljs-number">0</span>; i&lt;numRows; i++)&#123;<br>            <span class="hljs-keyword">for</span>(int j=<span class="hljs-number">0</span>; j&lt; chs[<span class="hljs-number">0</span>].<span class="hljs-property">length</span>; j++)&#123;<br>            <span class="hljs-keyword">if</span>(chs[i][j] != <span class="hljs-number">0</span>) &#123;<br>                    stringBuilder.<span class="hljs-title function_">append</span>(chs[i][j]);<br>            &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> stringBuilder.<span class="hljs-title function_">toString</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算力扣银行的钱（leetcode1716）</title>
    <link href="/2022/01/15/%E8%AE%A1%E7%AE%97%E5%8A%9B%E6%89%A3%E9%93%B6%E8%A1%8C%E7%9A%84%E9%92%B1%EF%BC%88leetcode1716%EF%BC%89/"/>
    <url>/2022/01/15/%E8%AE%A1%E7%AE%97%E5%8A%9B%E6%89%A3%E9%93%B6%E8%A1%8C%E7%9A%84%E9%92%B1%EF%BC%88leetcode1716%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>easy题我重拳出击！</p><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>Hercy 想要为购买第一辆车存钱。他 每天 都往力扣银行里存钱。</p><p>最开始，他在周一的时候存入 1 块钱。从周二到周日，他每天都比前一天多存入 1 块钱。在接下来每一个周一，他都会比 前一个周一 多存入 1 块钱。</p><p>给你 n ，请你返回在第 n 天结束的时候他在力扣银行总共存了多少块钱。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/calculate-money-in-leetcode-bank">https://leetcode-cn.com/problems/calculate-money-in-leetcode-bank</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。<br>点击跳转题目<a href="https://leetcode-cn.com/problems/calculate-money-in-leetcode-bank/">https://leetcode-cn.com/problems/calculate-money-in-leetcode-bank/</a></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>简单的等差数列公式。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>else语句中<br>第一部分为所有完整周的原始形态的值，<br>第二部分为所有完整周的增加部分的值，<br>第三部分为剩余天数的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <br><span class="hljs-attr">public</span>:<br>    int <span class="hljs-title function_">totalMoney</span>(<span class="hljs-params">int n</span>) &#123;<br>    <br>        <span class="hljs-keyword">if</span>(n&lt;=<span class="hljs-number">7</span>)&#123;<br>    <br>            <span class="hljs-keyword">return</span> (<span class="hljs-number">1</span>+n)*n/<span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>    <br>            <span class="hljs-keyword">return</span> (n/<span class="hljs-number">7</span>*<span class="hljs-number">28</span> + <span class="hljs-number">7</span>*(n/<span class="hljs-number">7</span>-<span class="hljs-number">1</span>)*(n/<span class="hljs-number">7</span>)/<span class="hljs-number">2</span> + (<span class="hljs-number">1</span>+n-n/<span class="hljs-number">7</span>*<span class="hljs-number">7</span> + <span class="hljs-number">2</span>*(n/<span class="hljs-number">7</span>))*(n-n/<span class="hljs-number">7</span>*<span class="hljs-number">7</span>)/<span class="hljs-number">2</span>);<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多数元素（leetcode169）</title>
    <link href="/2022/01/13/%E5%A4%9A%E6%95%B0%E5%85%83%E7%B4%A0%EF%BC%88leetcode169%EF%BC%89/"/>
    <url>/2022/01/13/%E5%A4%9A%E6%95%B0%E5%85%83%E7%B4%A0%EF%BC%88leetcode169%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="多数元素leetcode169"><a href="#多数元素leetcode169" class="headerlink" title="多数元素leetcode169"></a>多数元素leetcode169</h3><h5 id="1、题目"><a href="#1、题目" class="headerlink" title="1、题目"></a>1、题目</h5><p>给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数 大于 ⌊ n&#x2F;2 ⌋ 的元素。<br>你可以假设数组是非空的，并且给定的数组总是存在多数元素。<br>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/majority-element">https://leetcode-cn.com/problems/majority-element</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。<br>点击跳转力扣169多数元素<a href="https://leetcode-cn.com/problems/majority-element/">https://leetcode-cn.com/problems/majority-element/</a></p><h5 id="2、思路"><a href="#2、思路" class="headerlink" title="2、思路"></a>2、思路</h5><p>摩尔投票算法。</p><p>个人理解：</p><p>记录第一个数为flag，初始化count为1，从第二个数开始遍历，当前元素与flag相等时，count++；<br>当前元素与flag不相等时，count–，当count为0时，记录下一个元素为flag，遍历到末尾则flag为最终结果。</p><p>原理</p><p>两两抵消，flag元素和非flag元素。当flag元素全部抵消（count&#x3D;&#x3D;0）时，下一个元素为新的flag。最终剩下的即为多数元素。</p><h5 id="3、代码"><a href="#3、代码" class="headerlink" title="3、代码"></a>3、代码</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <br><span class="hljs-attr">public</span>:<br>    int <span class="hljs-title function_">majorityElement</span>(<span class="hljs-params">vector&lt;int&gt;&amp; nums</span>) &#123;<br>    <br>        int flag = *nums.<span class="hljs-title function_">begin</span>();<br>        int count=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(auto i=nums.<span class="hljs-title function_">begin</span>()+<span class="hljs-number">1</span>; i&lt;nums.<span class="hljs-title function_">end</span>(); i++)&#123;<br>    <br>            <span class="hljs-keyword">if</span>(flag == *i)&#123;<br>    <br>                count++;<br>                <span class="hljs-keyword">if</span>(count &gt; nums.<span class="hljs-title function_">size</span>()/<span class="hljs-number">2</span>)&#123;<br>    <br>                    <span class="hljs-keyword">return</span> flag;<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>    <br>                count--;<br>                <span class="hljs-keyword">if</span>(count == <span class="hljs-number">0</span>)&#123;<br>    <br>                    flag = *(++i);<br>                    count = <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> flag;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实验三、数据挖掘之决策树</title>
    <link href="/2021/04/13/%E5%AE%9E%E9%AA%8C%E4%B8%89%E3%80%81%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B9%8B%E5%86%B3%E7%AD%96%E6%A0%91/"/>
    <url>/2021/04/13/%E5%AE%9E%E9%AA%8C%E4%B8%89%E3%80%81%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B9%8B%E5%86%B3%E7%AD%96%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h2 id="实验三、数据挖掘之决策树"><a href="#实验三、数据挖掘之决策树" class="headerlink" title="实验三、数据挖掘之决策树"></a>实验三、数据挖掘之决策树</h2><h3 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h3><h4 id="1-熟悉掌握决策树的原理，"><a href="#1-熟悉掌握决策树的原理，" class="headerlink" title="1. 熟悉掌握决策树的原理，"></a>1. 熟悉掌握决策树的原理，</h4><h4 id="2-熟练掌握决策树的生成方法与过程"><a href="#2-熟练掌握决策树的生成方法与过程" class="headerlink" title="2. 熟练掌握决策树的生成方法与过程"></a>2. 熟练掌握决策树的生成方法与过程</h4><h3 id="二、实验工具"><a href="#二、实验工具" class="headerlink" title="二、实验工具"></a>二、实验工具</h3><h4 id="1-Anaconda"><a href="#1-Anaconda" class="headerlink" title="1. Anaconda"></a>1. Anaconda</h4><h4 id="2-sklearn"><a href="#2-sklearn" class="headerlink" title="2. sklearn"></a>2. sklearn</h4><h4 id="3-pydotplus"><a href="#3-pydotplus" class="headerlink" title="3. pydotplus"></a>3. pydotplus</h4><h3 id="三、实验简介"><a href="#三、实验简介" class="headerlink" title="三、实验简介"></a>三、实验简介</h3><p>决策树是一个非参数的监督式学习方法，主要用于分类和回归。算法的目标是通过推断数据特征，学习决策规则从而创建一个预测目标变量的模型。</p><h3 id="四、实验内容"><a href="#四、实验内容" class="headerlink" title="四、实验内容"></a>四、实验内容</h3><h4 id="1-自己创建至少2个向量，每个向量至少1个属性和1个类标号，根据向量生成决策树，并利用该决策树进行预测。如："><a href="#1-自己创建至少2个向量，每个向量至少1个属性和1个类标号，根据向量生成决策树，并利用该决策树进行预测。如：" class="headerlink" title="1. 自己创建至少2个向量，每个向量至少1个属性和1个类标号，根据向量生成决策树，并利用该决策树进行预测。如："></a>1. 自己创建至少2个向量，每个向量至少1个属性和1个类标号，根据向量生成决策树，并利用该决策树进行预测。如：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> tree<br>X = [[<span class="hljs-number">10</span>, <span class="hljs-number">20</span>], [<span class="hljs-number">15</span>, <span class="hljs-number">17</span>],[<span class="hljs-number">23</span>,<span class="hljs-number">21</span>],[<span class="hljs-number">50</span>,<span class="hljs-number">20</span>],[<span class="hljs-number">20</span>,<span class="hljs-number">34</span>]]<br>Y = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]<br>clf = tree.<span class="hljs-title class_">DecisionTreeClassifier</span>()<br>clf = clf.<span class="hljs-title function_">fit</span>(X, Y)<br><br>clf.<span class="hljs-title function_">predict</span>([[<span class="hljs-number">22.</span>, <span class="hljs-number">22.</span>]])<br>clf.<span class="hljs-title function_">predict_proba</span>([[<span class="hljs-number">22.</span>, <span class="hljs-number">22.</span>]])       #计算属于每个类的概率<br></code></pre></td></tr></table></figure><p>要求根据要求随机生成数据，并构建决策树，并举例预测。</p><h4 id="2-对鸢尾花数据构建决策树，"><a href="#2-对鸢尾花数据构建决策树，" class="headerlink" title="2. 对鸢尾花数据构建决策树，"></a>2. 对鸢尾花数据构建决策树，</h4><p>(1) 调用数据的方法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">from</span> sklearn.<span class="hljs-property">datasets</span> <span class="hljs-keyword">import</span> load_iris<br>iris = <span class="hljs-title function_">load_iris</span>()# 从sklearn 数据集中获取鸢尾花数据。<br></code></pre></td></tr></table></figure><p>(2) 利用sklearn中的决策树方法对鸢尾花数据建立决策树<br>(3) 为了能够直观看到建好的决策树，安装 pydotplus, 方法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">pip install pydotplus<br></code></pre></td></tr></table></figure><p>pydotplus使用方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> pydotplus #引入pydotplus<br>dot_data = tree.<span class="hljs-title function_">export_graphviz</span>(clf, out_file=<span class="hljs-title class_">None</span>) <br>graph = pydotplus.<span class="hljs-title function_">graph_from_dot_data</span>(dot_data) <br>graph.<span class="hljs-title function_">write_pdf</span>(<span class="hljs-string">&quot;iris.pdf&quot;</span>)#将图写成pdf文件<br></code></pre></td></tr></table></figure><h3 id="五、实验总结（写出本次实验的收获，遇到的问题等）"><a href="#五、实验总结（写出本次实验的收获，遇到的问题等）" class="headerlink" title="五、实验总结（写出本次实验的收获，遇到的问题等）"></a>五、实验总结（写出本次实验的收获，遇到的问题等）</h3><h4 id="1、自己创建两个变量，建立决策树，并进行预测"><a href="#1、自己创建两个变量，建立决策树，并进行预测" class="headerlink" title="1、自己创建两个变量，建立决策树，并进行预测"></a>1、自己创建两个变量，建立决策树，并进行预测</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> tree<br>X = [[<span class="hljs-number">20</span>, <span class="hljs-number">21</span>], [<span class="hljs-number">22</span>, <span class="hljs-number">23</span>]]<br>Y = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]<br>clf = tree.<span class="hljs-title class_">DecisionTreeClassifier</span>()<br>clf = clf.<span class="hljs-title function_">fit</span>(X, Y)<br><br><span class="hljs-title function_">print</span>(clf.<span class="hljs-title function_">predict</span>([[<span class="hljs-number">22.</span>, <span class="hljs-number">22.</span>]]))<br><span class="hljs-title function_">print</span>(clf.<span class="hljs-title function_">predict_proba</span>([[<span class="hljs-number">22.</span>, <span class="hljs-number">22.</span>]]))     #计算属于每个类的概率<br></code></pre></td></tr></table></figure><p><img src="/../images/e15c7344-c604-4531-bd24-ab95429982c7.png" alt="image.png"></p><h4 id="2、对鸢尾花数据构建决策树，并通过pydotplus，将决策树生成为pdf文件。"><a href="#2、对鸢尾花数据构建决策树，并通过pydotplus，将决策树生成为pdf文件。" class="headerlink" title="2、对鸢尾花数据构建决策树，并通过pydotplus，将决策树生成为pdf文件。"></a>2、对鸢尾花数据构建决策树，并通过pydotplus，将决策树生成为pdf文件。</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">from</span> sklearn.<span class="hljs-property">datasets</span> <span class="hljs-keyword">import</span> load_iris<br><span class="hljs-keyword">import</span> pydotplus #引入pydotplus<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> tree<br><br>iris = <span class="hljs-title function_">load_iris</span>()# 获取鸢尾花数据。<br><br>mode = tree.<span class="hljs-title class_">DecisionTreeClassifier</span>()<br><br>clf = mode.<span class="hljs-title function_">fit</span>(iris.<span class="hljs-property">data</span>, iris.<span class="hljs-property">target</span>)<br><br>dot_data = tree.<span class="hljs-title function_">export_graphviz</span>(clf, out_file=<span class="hljs-title class_">None</span>)<br>graph = pydotplus.<span class="hljs-title function_">graph_from_dot_data</span>(dot_data)<br>graph.<span class="hljs-title function_">write_pdf</span>(<span class="hljs-string">&quot;iris.pdf&quot;</span>)#将图写成pdf文件<br></code></pre></td></tr></table></figure><p><img src="/../images/95514db3-7533-4fa8-9391-e5a61761f576.png" alt="image.png"></p><h4 id="3、根据给的数据集自己编写决策树构建程序"><a href="#3、根据给的数据集自己编写决策树构建程序" class="headerlink" title="3、根据给的数据集自己编写决策树构建程序"></a>3、根据给的数据集自己编写决策树构建程序</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js">#  X 每个数组包括 <br>#<span class="hljs-title class_">Refund</span>yes = <span class="hljs-number">1</span>       no=<span class="hljs-number">0</span>,<br>#<span class="hljs-title class_">Marital</span> <span class="hljs-title class_">Status</span>single = <span class="hljs-number">0</span>    married = <span class="hljs-number">1</span>    divorce = <span class="hljs-number">2</span>，<br>#<span class="hljs-title class_">Taxable</span> <span class="hljs-title class_">Income</span>&lt;80k = <span class="hljs-number">0</span>      &gt;=<span class="hljs-number">80</span> = <span class="hljs-number">1</span>、<br>#<span class="hljs-title class_">Cheat</span>yes = <span class="hljs-number">1</span>       no = <span class="hljs-number">0</span><br><br>X = [<br>    [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>],<br>    [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],<br>    [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br>    [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],<br>    [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>],<br>    [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>],<br>    [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>],<br>    [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>],<br>    [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>],<br>    [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]<br>]<br><br>Y = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]<br><br>mode = tree.<span class="hljs-title class_">DecisionTreeClassifier</span>()<br><br>clf = mode.<span class="hljs-title function_">fit</span>(X, Y)<br><br>dot_data = tree.<span class="hljs-title function_">export_graphviz</span>(clf, out_file=<span class="hljs-title class_">None</span>)<br>graph = pydotplus.<span class="hljs-title function_">graph_from_dot_data</span>(dot_data)<br>graph.<span class="hljs-title function_">write_pdf</span>(<span class="hljs-string">&quot;fyy.pdf&quot;</span>)#将图写成pdf文件<br></code></pre></td></tr></table></figure><p><img src="/../images/0379c3ce-7c81-4fd0-878a-6c4b3686c8eb.png" alt="image.png"></p><h3 id="五、实验总结"><a href="#五、实验总结" class="headerlink" title="五、实验总结"></a>五、实验总结</h3><ul><li>学会了使用<br>tree.DecisionTreeClassifier()方法<br>tree.DecisionTreeClassifier().fit（）方法<br>tree.export_graphviz()方法，<br>pydotplus.graph_from_dot_data()方法等等。</li><li>成功使用鸢尾花数据生成决策树。</li><li>成功利用pydotplus生成pdf文件。</li><li>自己写构建决策树的算法还有一点问题，主要是逻辑比较复杂，有点弄不明白。</li><li>对决策树的算法有了更深的了解。</li></ul>]]></content>
    
    
    <categories>
      
      <category>其它</category>
      
    </categories>
    
    
    <tags>
      
      <tag>其它</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Win10在VMware中安装Ubuntu18.04.5</title>
    <link href="/2021/04/09/Win10%E5%9C%A8VMware%E4%B8%AD%E5%AE%89%E8%A3%85Ubuntu18.04.5/"/>
    <url>/2021/04/09/Win10%E5%9C%A8VMware%E4%B8%AD%E5%AE%89%E8%A3%85Ubuntu18.04.5/</url>
    
    <content type="html"><![CDATA[<h5 id="首先安装VMware"><a href="#首先安装VMware" class="headerlink" title="首先安装VMware"></a>首先安装VMware</h5><h5 id="其次下载Ubuntu18-04-5的iso磁盘。"><a href="#其次下载Ubuntu18-04-5的iso磁盘。" class="headerlink" title="其次下载Ubuntu18.04.5的iso磁盘。"></a>其次下载Ubuntu18.04.5的iso磁盘。</h5><p><strong>没有图片的步骤都选择默认的：</strong><br><img src="https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403161543082.png" alt="在这里插入图片描述"></p><p>安装完虚拟机之后，编辑虚拟机设置。选择硬件的CD&#x2F;DVD<br><img src="https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403161543083.png" alt="在这里插入图片描述"></p><h5 id="开启虚拟机"><a href="#开启虚拟机" class="headerlink" title="开启虚拟机"></a>开启虚拟机</h5><p><img src="https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403161543084.png" alt="在这里插入图片描述"><br><img src="https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403161543085.png" alt="在这里插入图片描述"><br>「正常安装」将安装所有应用程序，包括网络浏览器、办公套件、游戏和媒体播放器。 如果您想要设置完整的桌面，请选择「正常安装」。 如果您只想要最小化的系统，有 Web 浏览器和基本实用程序，请选择「最小安装」。<br><img src="https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403161543086.png" alt="在这里插入图片描述"><br><img src="https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403161543087.png" alt="在这里插入图片描述"><br><img src="https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403161543088.png" alt="在这里插入图片描述"></p><p><img src="https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403161543089.png" alt="在这里插入图片描述"><br>选择自己的时区<br><img src="https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403161543090.png" alt="在这里插入图片描述"><br>输入自己的信息后，选择继续<br><img src="https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403161543091.png" alt="在这里插入图片描述"><br>此时需要等待系统安装一段时间。<br><img src="https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403161543092.png" alt="在这里插入图片描述"></p><p>安装完，就可以使用Ubuntu系统啦。</p><p>如果有帮助到你，非常荣幸。</p><p>如果大家有心情的话，鼓励一下我也可以的（我是穷逼大学生）。😁<br><img src="https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403161543093.png" alt="在这里插入图片描述"><br><img src="https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403161543094.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>其它</category>
      
    </categories>
    
    
    <tags>
      
      <tag>其它</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据处理之Matplotlib-入门篇</title>
    <link href="/2021/04/06/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E4%B9%8BMatplotlib-%E5%85%A5%E9%97%A8%E7%AF%87/"/>
    <url>/2021/04/06/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E4%B9%8BMatplotlib-%E5%85%A5%E9%97%A8%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h2 id="实验二、数据处理之Matplotlib"><a href="#实验二、数据处理之Matplotlib" class="headerlink" title="实验二、数据处理之Matplotlib"></a>实验二、数据处理之Matplotlib</h2><h3 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h3><h4 id="1-了解matplotlib库的基本功能"><a href="#1-了解matplotlib库的基本功能" class="headerlink" title="1. 了解matplotlib库的基本功能"></a>1. 了解matplotlib库的基本功能</h4><h4 id="2-掌握matplotlib库的使用方法"><a href="#2-掌握matplotlib库的使用方法" class="headerlink" title="2. 掌握matplotlib库的使用方法"></a>2. 掌握matplotlib库的使用方法</h4><h3 id="二、实验工具："><a href="#二、实验工具：" class="headerlink" title="二、实验工具："></a>二、实验工具：</h3><h4 id="1-Anaconda"><a href="#1-Anaconda" class="headerlink" title="1. Anaconda"></a>1. Anaconda</h4><h4 id="2-Numpy，matplotlib"><a href="#2-Numpy，matplotlib" class="headerlink" title="2. Numpy，matplotlib"></a>2. Numpy，matplotlib</h4><h3 id="三、Matplotlib简介"><a href="#三、Matplotlib简介" class="headerlink" title="三、Matplotlib简介"></a>三、Matplotlib简介</h3><p>Matplotlib 包含了几十个不同的模块， 如 matlab、mathtext、finance、dates 等，而 pylot 则是我们最常用的绘图模块</p><h3 id="四、实验内容"><a href="#四、实验内容" class="headerlink" title="四、实验内容"></a>四、实验内容</h3><h4 id="1-绘制正弦曲线，并设置标题、坐标轴名称、坐标轴范围"><a href="#1-绘制正弦曲线，并设置标题、坐标轴名称、坐标轴范围" class="headerlink" title="1.绘制正弦曲线，并设置标题、坐标轴名称、坐标轴范围"></a>1.绘制正弦曲线，并设置标题、坐标轴名称、坐标轴范围</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.<span class="hljs-property">pyplot</span> <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> pylab <span class="hljs-keyword">import</span> mpl<br>mpl.<span class="hljs-property">rcParams</span>[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;FangSong&#x27;</span>]<br>mpl.<span class="hljs-property">rcParams</span>[<span class="hljs-string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="hljs-title class_">False</span><br>x=np.<span class="hljs-title function_">arange</span>(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>*np.<span class="hljs-property">pi</span>, <span class="hljs-number">0.01</span>)<br>y=np.<span class="hljs-title function_">sin</span>(x)<br>plt.<span class="hljs-title function_">plot</span>(x, y)<br>plt.<span class="hljs-title function_">title</span>(u<span class="hljs-string">&#x27;正弦曲线&#x27;</span>, fontdict=&#123;<span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">20</span>&#125;)<br>plt.<span class="hljs-title function_">xlabel</span>(u<span class="hljs-string">&#x27;弧度&#x27;</span>, fontdict=&#123;<span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">16</span>&#125;)<br>plt.<span class="hljs-title function_">ylabel</span>(u<span class="hljs-string">&#x27;正弦值&#x27;</span>, fontdict=&#123;<span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">16</span>&#125;)<br>plt.<span class="hljs-title function_">axis</span>([-<span class="hljs-number">0.1</span>*np.<span class="hljs-property">pi</span>, <span class="hljs-number">2.1</span>*np.<span class="hljs-property">pi</span>, -<span class="hljs-number">1.1</span>, <span class="hljs-number">1.1</span>])<br>plt.<span class="hljs-title function_">show</span>()<br></code></pre></td></tr></table></figure><p><img src="/../images/743812c8-1d7b-47e0-9c35-d998c65ed92c.png" alt="在这里插入图片描述"></p><h4 id="2-同一坐标系中绘制多种曲线并通过样式、宽度、颜色加以区分"><a href="#2-同一坐标系中绘制多种曲线并通过样式、宽度、颜色加以区分" class="headerlink" title="2. 同一坐标系中绘制多种曲线并通过样式、宽度、颜色加以区分"></a>2. 同一坐标系中绘制多种曲线并通过样式、宽度、颜色加以区分</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.<span class="hljs-property">pyplot</span> <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> pylab <span class="hljs-keyword">import</span> mpl<br>mpl.<span class="hljs-property">rcParams</span>[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;FangSong&#x27;</span>]<br>mpl.<span class="hljs-property">rcParams</span>[<span class="hljs-string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="hljs-title class_">False</span><br>x = np.<span class="hljs-title function_">linspace</span>(-<span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">200</span>)<br>f1 =  np.<span class="hljs-title function_">power</span>(<span class="hljs-number">10</span>, x)<br>f2 = np.<span class="hljs-title function_">power</span>(np.<span class="hljs-property">e</span>, x)<br>f3 = np.<span class="hljs-title function_">power</span>(<span class="hljs-number">2</span>, x)<br>plt.<span class="hljs-title function_">plot</span>(x, f1, <span class="hljs-string">&#x27;r&#x27;</span>, ls=<span class="hljs-string">&#x27;-&#x27;</span>, linewidth=<span class="hljs-number">2</span>, label=<span class="hljs-string">&#x27;$10^x$&#x27;</span>)<br>plt.<span class="hljs-title function_">plot</span>(x, f2, <span class="hljs-string">&#x27;b&#x27;</span>, ls=<span class="hljs-string">&#x27;--&#x27;</span>, linewidth=<span class="hljs-number">2</span>, label=<span class="hljs-string">&#x27;$e^x$&#x27;</span>)<br>plt.<span class="hljs-title function_">plot</span>(x, f3, <span class="hljs-string">&#x27;g&#x27;</span>, ls=<span class="hljs-string">&#x27;:&#x27;</span>, linewidth=<span class="hljs-number">2</span>, label=<span class="hljs-string">&#x27;$2^x$&#x27;</span>)<br>plt.<span class="hljs-title function_">axis</span>([-<span class="hljs-number">4</span>, <span class="hljs-number">4</span>, -<span class="hljs-number">0.5</span>, <span class="hljs-number">8</span>])<br>plt.<span class="hljs-title function_">title</span>(<span class="hljs-string">&#x27;幂函数曲线&#x27;</span>, fontsize=<span class="hljs-number">16</span>)<br>plt.<span class="hljs-title function_">legend</span>(loc=<span class="hljs-string">&#x27;lower right&#x27;</span>)<br>plt.<span class="hljs-title function_">show</span>()<br></code></pre></td></tr></table></figure><p><img src="/../images/4ddd2da8-542b-492f-86a7-abd2f7a137f5.png" alt="在这里插入图片描述"></p><h4 id="3-绘制多轴图，即将多幅子图绘制在同一画板。"><a href="#3-绘制多轴图，即将多幅子图绘制在同一画板。" class="headerlink" title="3.绘制多轴图，即将多幅子图绘制在同一画板。"></a>3.绘制多轴图，即将多幅子图绘制在同一画板。</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.<span class="hljs-property">pyplot</span> <span class="hljs-keyword">as</span> plt<br>plt.<span class="hljs-title function_">subplot</span>(<span class="hljs-number">221</span>)<br>x = np.<span class="hljs-title function_">arange</span>(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>*np.<span class="hljs-property">pi</span>, <span class="hljs-number">0.01</span>)<br>y = np.<span class="hljs-title function_">cos</span>(x)<br>plt.<span class="hljs-title function_">plot</span>(x, y)<br>plt.<span class="hljs-title function_">subplot</span>(<span class="hljs-number">222</span>)<br>plt.<span class="hljs-title function_">axis</span>([-<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])<br>plt.<span class="hljs-title function_">axvline</span>(x=<span class="hljs-number">0</span>, ymin=<span class="hljs-number">0</span>, linewidth=<span class="hljs-number">4</span>, color=<span class="hljs-string">&#x27;g&#x27;</span>)<br>plt.<span class="hljs-title function_">axvline</span>(x=<span class="hljs-number">1.0</span>, ymin=-<span class="hljs-number">0.5</span>, ymax=<span class="hljs-number">0.5</span>, linewidth=<span class="hljs-number">4</span>, color=<span class="hljs-string">&#x27;y&#x27;</span>)<br>plt.<span class="hljs-title function_">show</span>()<br></code></pre></td></tr></table></figure><p><img src="/../images/27a39cd0-9e1c-49a0-bbca-24a6e89f8112.png" alt="image.png"></p><h4 id="4-直方图的绘制-数据自己定义）"><a href="#4-直方图的绘制-数据自己定义）" class="headerlink" title="4.直方图的绘制(数据自己定义）"></a>4.直方图的绘制(数据自己定义）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.<span class="hljs-property">pyplot</span> <span class="hljs-keyword">as</span> plt<br>bins = np.<span class="hljs-title function_">arange</span>(-<span class="hljs-number">3</span>, <span class="hljs-number">10</span>, <span class="hljs-number">3</span>)<br>plt.<span class="hljs-title function_">hist</span>(bins)<br>plt.<span class="hljs-title function_">show</span>()<br></code></pre></td></tr></table></figure><p><img src="/../images/5e0672f1-e3a7-421e-a7a5-da23eca2efc2.png" alt="image.png"></p><h4 id="5-绘制散点图"><a href="#5-绘制散点图" class="headerlink" title="5.绘制散点图"></a>5.绘制散点图</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.<span class="hljs-property">pyplot</span> <span class="hljs-keyword">as</span> plt<br>x = np.<span class="hljs-property">random</span>.<span class="hljs-title function_">rand</span>(<span class="hljs-number">30</span>)<br>y = np.<span class="hljs-property">random</span>.<span class="hljs-title function_">rand</span>(<span class="hljs-number">30</span>)<br>area = np.<span class="hljs-property">pi</span>*(<span class="hljs-number">15</span>*np.<span class="hljs-property">random</span>.<span class="hljs-title function_">rand</span>(<span class="hljs-number">30</span>))**<span class="hljs-number">2</span><br>color = <span class="hljs-number">2</span>*np.<span class="hljs-property">pi</span>*np.<span class="hljs-property">random</span>.<span class="hljs-title function_">rand</span>(<span class="hljs-number">30</span>)<br>plt.<span class="hljs-title function_">scatter</span>(x, y, s=area, c=color, alpha=<span class="hljs-number">0.5</span>, cmap=plt.<span class="hljs-property">cm</span>.<span class="hljs-property">hsv</span>)<br>plt.<span class="hljs-title function_">show</span>()<br></code></pre></td></tr></table></figure><p><img src="/../images/9e0e5204-ce44-4e69-8735-4034466896be.png" alt="在这里插入图片描述"></p><h4 id="6-绘制盒状图"><a href="#6-绘制盒状图" class="headerlink" title="6.绘制盒状图"></a>6.绘制盒状图</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.<span class="hljs-property">pyplot</span> <span class="hljs-keyword">as</span> plt<br>data = np.<span class="hljs-property">random</span>.<span class="hljs-title function_">randn</span>(<span class="hljs-number">200</span>)<br>fig, (ax2) = plt.<span class="hljs-title function_">subplots</span>(<span class="hljs-number">1</span>, figsize=(<span class="hljs-number">8</span>, <span class="hljs-number">6</span>))<br>ax2.<span class="hljs-title function_">boxplot</span>(data)<br>plt.<span class="hljs-title function_">show</span>()<br></code></pre></td></tr></table></figure><p><img src="/../images/099c75eb-f805-4e69-9a76-62a8fcf6afcc.png" alt="在这里插入图片描述"></p><h4 id="7-尝试matplotlib库的其它功能，如2D-3D等"><a href="#7-尝试matplotlib库的其它功能，如2D-3D等" class="headerlink" title="7.尝试matplotlib库的其它功能，如2D,3D等"></a>7.尝试matplotlib库的其它功能，如2D,3D等</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.<span class="hljs-property">pyplot</span> <span class="hljs-keyword">as</span> plt<br>y,x = np.<span class="hljs-property">ogrid</span>[-<span class="hljs-number">2</span>:<span class="hljs-number">2</span>:200j, -<span class="hljs-number">3</span>:<span class="hljs-number">3</span>:300j]<br>z = x*np.<span class="hljs-title function_">exp</span>(-x**<span class="hljs-number">2</span> - y**<span class="hljs-number">2</span>)<br>extent = [np.<span class="hljs-title function_">min</span>(x), np.<span class="hljs-title function_">max</span>(x), np.<span class="hljs-title function_">min</span>(y), np.<span class="hljs-title function_">max</span>(y)]<br>plt.<span class="hljs-title function_">subplot</span>(<span class="hljs-number">211</span>)<br>cs = plt.<span class="hljs-title function_">contour</span>(z, <span class="hljs-number">10</span>, extent=extent)<br>plt.<span class="hljs-title function_">clabel</span>(cs)<br>plt.<span class="hljs-title function_">subplot</span>(<span class="hljs-number">111</span>)<br>plt.<span class="hljs-title function_">contourf</span>(x.<span class="hljs-title function_">reshape</span>(-<span class="hljs-number">1</span>), y.<span class="hljs-title function_">reshape</span>(-<span class="hljs-number">1</span>), z, <span class="hljs-number">20</span>)<br>plt.<span class="hljs-title function_">show</span>()<br></code></pre></td></tr></table></figure><p><img src="/../images/1a7561d1-dfa9-4595-9ec1-1fd8c97edec9.png" alt="在这里插入图片描述"></p><h3 id="五、实验总结（写出本次实验的收获，遇到的问题等"><a href="#五、实验总结（写出本次实验的收获，遇到的问题等" class="headerlink" title="五、实验总结（写出本次实验的收获，遇到的问题等)"></a>五、实验总结（写出本次实验的收获，遇到的问题等)</h3><p>了解到matplotlib库不是只要你安装了numpy就有了这个库，刚开始做的时候因为没有导入matplotlib库而频频报错。在网上搜索了简易的安装matplotlib库的办法，直接在电脑cmd里面敲两行命令安装即可，不用再很繁琐的在电脑上还要配置环境变量。</p>]]></content>
    
    
    <categories>
      
      <category>其它</category>
      
    </categories>
    
    
    <tags>
      
      <tag>matplotlib</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据处理之Numpy-入门篇</title>
    <link href="/2021/04/06/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E4%B9%8BNumpy-%E5%85%A5%E9%97%A8%E7%AF%87/"/>
    <url>/2021/04/06/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E4%B9%8BNumpy-%E5%85%A5%E9%97%A8%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h2 id="实验一、数据处理之Numpy"><a href="#实验一、数据处理之Numpy" class="headerlink" title="实验一、数据处理之Numpy"></a>实验一、数据处理之Numpy</h2><h3 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h3><h4 id="1-了解numpy库的基本功能"><a href="#1-了解numpy库的基本功能" class="headerlink" title="1. 了解numpy库的基本功能"></a>1. 了解numpy库的基本功能</h4><h4 id="2-掌握Numpy库的对数组的操作与运算"><a href="#2-掌握Numpy库的对数组的操作与运算" class="headerlink" title="2. 掌握Numpy库的对数组的操作与运算"></a>2. 掌握Numpy库的对数组的操作与运算</h4><h3 id="二、实验工具："><a href="#二、实验工具：" class="headerlink" title="二、实验工具："></a>二、实验工具：</h3><h4 id="1-Anaconda"><a href="#1-Anaconda" class="headerlink" title="1. Anaconda"></a>1. Anaconda</h4><h4 id="2-Numpy"><a href="#2-Numpy" class="headerlink" title="2. Numpy"></a>2. Numpy</h4><h3 id="三、Numpy简介"><a href="#三、Numpy简介" class="headerlink" title="三、Numpy简介"></a>三、Numpy简介</h3><p>Numpy 的英文全称为 Numerical Python，指Python 面向数值计算的第三方库。Numpy 的特点在于，针对 Python 内建的数组类型做了扩充，支持更高维度的数组和矩阵运算，以及更丰富的数学函数。Numpy 是 Scipy.org 中最重要的库之一，它同时也被 Pandas，Matplotlib 等我们熟知的第三方库作为核心计算库。<br>NumPy（Numeric Python）提供了许多高级的数值编程工具，如：矩阵数据类型、矢量处理，以及精密的运算库。专为进行严格的数字处理而产生。多为很多大型金融公司使用，以及核心的科学计算组织如：Lawrence Livermore，NASA用其处理一些本来使用C++，Fortran或Matlab等所做的任务。<br>Numpy包括了：1、一个强大的N维数组对象Array；2、比较成熟的（广播）函数库；3、用于整合C&#x2F;C++和Fortran代码的工具包；4、实用的线性代数、傅里叶变换和随机数生成函数。Numpy和稀疏矩阵运算包scipy配合使用更加方便。</p><h3 id="四、实验内容"><a href="#四、实验内容" class="headerlink" title="四、实验内容"></a>四、实验内容</h3><h4 id="1-数组的创建（创建全0数组，全1数组，随机数数组）"><a href="#1-数组的创建（创建全0数组，全1数组，随机数数组）" class="headerlink" title="1. 数组的创建（创建全0数组，全1数组，随机数数组）"></a>1. 数组的创建（创建全0数组，全1数组，随机数数组）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>a = np.<span class="hljs-title function_">ones</span>(<span class="hljs-number">5</span>, int)<br><br>b = np.<span class="hljs-title function_">zeros</span>(<span class="hljs-number">5</span>, int)<br><br>f = np.<span class="hljs-property">random</span>.<span class="hljs-title function_">randint</span>(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">6</span>)<br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;全1数组：\n&quot;</span>, a)<br><br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;全0数组:\n&quot;</span>, b)<br><br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;随机数数组:\n&quot;</span>, f)<br></code></pre></td></tr></table></figure><p><img src="/../images/87f3125a-a033-417d-bb13-21c84bfcee11.png" alt="image.png"></p><h4 id="2-数组的属性（查看数组的维度，数组元素的个数）"><a href="#2-数组的属性（查看数组的维度，数组元素的个数）" class="headerlink" title="2. 数组的属性（查看数组的维度，数组元素的个数）"></a>2. 数组的属性（查看数组的维度，数组元素的个数）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>a = np.<span class="hljs-title function_">ones</span>(<span class="hljs-number">5</span>, int)<br><br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;全1数组维度：\n&quot;</span>, a.<span class="hljs-property">ndim</span>)<br><br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;全1数组元素个数：\n&quot;</span>, a.<span class="hljs-property">shape</span>)<br></code></pre></td></tr></table></figure><p><img src="/../images/ca928bd1-73d5-47e1-9176-b6f79ad795ad.png" alt="image.png"></p><h4 id="3-数组的维度操作（将数组的行变列，返回最后一个元素，返回第2到第4个元素，返回逆序的数组）"><a href="#3-数组的维度操作（将数组的行变列，返回最后一个元素，返回第2到第4个元素，返回逆序的数组）" class="headerlink" title="3. 数组的维度操作（将数组的行变列，返回最后一个元素，返回第2到第4个元素，返回逆序的数组）"></a>3. 数组的维度操作（将数组的行变列，返回最后一个元素，返回第2到第4个元素，返回逆序的数组）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>c = np.<span class="hljs-title function_">arange</span>(<span class="hljs-number">9</span>).<span class="hljs-title function_">reshape</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>)<br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;转置前：\n&quot;</span>, c)<br>d = c.<span class="hljs-property">T</span><br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;转置后：\n&quot;</span>, d)<br><br>e = np.<span class="hljs-title function_">arange</span>(<span class="hljs-number">10</span>)<br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;数组为：\n&quot;</span>, e)<br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;最后一个元素为：\n&quot;</span>, e[-<span class="hljs-number">1</span>])<br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;第2到第4元素为：\n&quot;</span>, e[<span class="hljs-number">1</span>:<span class="hljs-number">4</span>])<br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;逆序数组为：\n&quot;</span>, e[::-<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><p><img src="/../images/2ae999a3-1cf1-45ff-82ba-e568181a191b.png" alt="image.png"></p><h4 id="4-数组的合并（数组的水平合并，垂直合并，深度合并）"><a href="#4-数组的合并（数组的水平合并，垂直合并，深度合并）" class="headerlink" title="4. 数组的合并（数组的水平合并，垂直合并，深度合并）"></a>4. 数组的合并（数组的水平合并，垂直合并，深度合并）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>c = np.<span class="hljs-title function_">arange</span>(-<span class="hljs-number">9</span>, <span class="hljs-number">0</span>).<span class="hljs-title function_">reshape</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>)<br>d = np.<span class="hljs-title function_">arange</span>(<span class="hljs-number">0</span>, <span class="hljs-number">9</span>).<span class="hljs-title function_">reshape</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>)<br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;第一个数组为：\n&quot;</span>, c)<br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;第二个数组为：\n&quot;</span>, d)<br><br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;水平合并：\n&quot;</span>, np.<span class="hljs-title function_">hstack</span>((c, d)))<br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;垂直合并：\n&quot;</span>, np.<span class="hljs-title function_">hstack</span>((c, d)))<br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;深度合并：\n&quot;</span>, np.<span class="hljs-title function_">hstack</span>((c, d)))<br></code></pre></td></tr></table></figure><p><img src="/../images/ae93e798-4d4b-4c8e-9ddf-7d62545b91ab.png" alt="image.png"></p><h4 id="5-数组的拆分（数组的水平拆分，垂直拆分，深度拆分）"><a href="#5-数组的拆分（数组的水平拆分，垂直拆分，深度拆分）" class="headerlink" title="5. 数组的拆分（数组的水平拆分，垂直拆分，深度拆分）"></a>5. 数组的拆分（数组的水平拆分，垂直拆分，深度拆分）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>c = np.<span class="hljs-title function_">arange</span>(-<span class="hljs-number">9</span>, <span class="hljs-number">0</span>).<span class="hljs-title function_">reshape</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>)<br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;数组为：\n&quot;</span>, c)<br><br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;水平拆分为：\n&quot;</span>, np.<span class="hljs-title function_">hsplit</span>(c, <span class="hljs-number">3</span>))<br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;垂直拆分为：\n&quot;</span>, np.<span class="hljs-title function_">vsplit</span>(c, <span class="hljs-number">3</span>))<br><br>d = np.<span class="hljs-title function_">arange</span>(<span class="hljs-number">8</span>).<span class="hljs-title function_">reshape</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;待深度拆分数组为：\n&quot;</span>, d)<br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;深度拆分为：\n&quot;</span>, np.<span class="hljs-title function_">dsplit</span>(d, <span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure><p><img src="/../images/fae48d94-2ad6-43c8-aa72-0aed94a6e4bc.png" alt="image.png"><br><img src="/../images/d26678d3-6653-4773-9861-0f972849d3a8.png" alt="image.png"><br><img src="/../images/5fa351ca-284e-4e2c-a03e-bceaebee7270.png" alt="image.png"></p><h4 id="6-数组运算（与常的四则运算，与数组的四则运算，判断数组是否相等）"><a href="#6-数组运算（与常的四则运算，与数组的四则运算，判断数组是否相等）" class="headerlink" title="6. 数组运算（与常的四则运算，与数组的四则运算，判断数组是否相等）"></a>6. 数组运算（与常的四则运算，与数组的四则运算，判断数组是否相等）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>a = np.<span class="hljs-title function_">arange</span>(<span class="hljs-number">4</span>)<br>b = np.<span class="hljs-title function_">arange</span>(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>)<br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;两个数组分别为：\n&quot;</span>, a, b)<br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;a+2为：\n&quot;</span>, a + <span class="hljs-number">2</span>)<br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;a+b为：\n&quot;</span>, a+b)<br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;a-b为：\n&quot;</span>, a-b)<br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;a*b为：\n&quot;</span>, a*b)<br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;a/b为：\n&quot;</span>, a/b)<br></code></pre></td></tr></table></figure><p><img src="/../images/ede66728-e054-4b2d-b5ec-ad2353f92c68.png" alt="image.png"></p><h4 id="7-数组的常用函数（数组所有元素的和、积、平均值、最大值、最小值、元素替换、方差、标准差）"><a href="#7-数组的常用函数（数组所有元素的和、积、平均值、最大值、最小值、元素替换、方差、标准差）" class="headerlink" title="7. 数组的常用函数（数组所有元素的和、积、平均值、最大值、最小值、元素替换、方差、标准差）"></a>7. 数组的常用函数（数组所有元素的和、积、平均值、最大值、最小值、元素替换、方差、标准差）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>a = np.<span class="hljs-title function_">arange</span>(<span class="hljs-number">7</span>)<br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;数组为：&quot;</span>, a)<br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;数组所有元素的和为：&quot;</span>, a.<span class="hljs-title function_">sum</span>())<br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;数组所有元素的积为：&quot;</span>, a.<span class="hljs-title function_">prod</span>())<br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;数组所有元素的平均值为：&quot;</span>, a.<span class="hljs-title function_">mean</span>())<br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;数组所有元素的最大值为：&quot;</span>, a.<span class="hljs-title function_">max</span>())<br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;数组所有元素的最小值为：&quot;</span>, a.<span class="hljs-title function_">min</span>())<br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;数组所有元素的元素小于3的元素替换为3，大于4的元素替换为4：&quot;</span>, a.<span class="hljs-title function_">clip</span>(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>))<br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;数组所有元素的方差为：&quot;</span>, a.<span class="hljs-title function_">var</span>())<br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;数组所有元素的标准差为：&quot;</span>, a.<span class="hljs-title function_">std</span>())<br></code></pre></td></tr></table></figure><p><img src="/../images/8d128c0a-6c80-423b-8092-c2ef51f7dd5f.png" alt="image.png"></p><h3 id="五、实验总结（写出本次实验的收获，遇到的问题等）"><a href="#五、实验总结（写出本次实验的收获，遇到的问题等）" class="headerlink" title="五、实验总结（写出本次实验的收获，遇到的问题等）"></a>五、实验总结（写出本次实验的收获，遇到的问题等）</h3><p>学习到了numpy库中的一些函数的使用方法。受益良多，感觉到python库的强大之处，日后一定多加练习，以求对python的常用库的使用更加熟练。</p>]]></content>
    
    
    <categories>
      
      <category>其它</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>去除重复字母（Java实现）</title>
    <link href="/2021/04/06/%E5%8E%BB%E9%99%A4%E9%87%8D%E5%A4%8D%E5%AD%97%E6%AF%8D%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89/"/>
    <url>/2021/04/06/%E5%8E%BB%E9%99%A4%E9%87%8D%E5%A4%8D%E5%AD%97%E6%AF%8D%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="题目-去除重复字母"><a href="#题目-去除重复字母" class="headerlink" title="题目 去除重复字母"></a>题目 去除重复字母</h3><p>给你一个字符串 s ，请你去除字符串中重复的字母，使得每个字母只出现一次。需保证 返回结果的字典序最小（要求不能打乱其他字符的相对位置）。</p><h5 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h5><p>输入：s &#x3D; “bcabc”<br>输出：“abc”</p><h5 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h5><p>输入：s &#x3D; “cbacdcbc”<br>输出：“acdb”</p><h5 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h5><p>1 &lt;&#x3D; s.length &lt;&#x3D; 104<br>s 由小写英文字母组成</p><p>来源：力扣（LeetCode）<br><a href="https://leetcode-cn.com/problems/remove-duplicate-letters/">https://leetcode-cn.com/problems/remove-duplicate-letters/</a></p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 算法思想</span><br><span class="hljs-comment"> * 当字典序最小时，即12341 12351 主要看4，5的位置</span><br><span class="hljs-comment"> * 用栈存储，当栈空时直接入栈</span><br><span class="hljs-comment"> * 栈不为空时，</span><br><span class="hljs-comment"> * 若栈中包含当前要入栈的元素直接跳到下一次循环。（结果字符串每个字符只含有一次）</span><br><span class="hljs-comment"> * 若当前要入栈的字母比栈顶字母大时，考虑是否栈顶元素出栈</span><br><span class="hljs-comment"> * 若栈顶元素在剩余字符串中仍然存在，那么就可以出栈，出栈后继续判断新的栈顶元素是否出栈。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Stack</span>;<br><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">RemoveDuplicateLetters</span> &#123;<br><br>    public <span class="hljs-keyword">static</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">removeDuplicateLetters</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> s</span>)&#123;<br>        <span class="hljs-title class_">Stack</span>&lt;<span class="hljs-title class_">Character</span>&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;<span class="hljs-title class_">Character</span>&gt;();<br>            <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-title function_">length</span>(); i++) &#123;<br>                char c=s.<span class="hljs-title function_">charAt</span>(i);<br>                <span class="hljs-keyword">if</span>(stack.<span class="hljs-title function_">contains</span>(c))<br>                    <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">while</span>(!stack.<span class="hljs-title function_">isEmpty</span>() &amp;&amp; stack.<span class="hljs-title function_">peek</span>()&gt;c &amp;&amp; s.<span class="hljs-title function_">indexOf</span>(stack.<span class="hljs-title function_">peek</span>(),i)!=-<span class="hljs-number">1</span>)<br>                    stack.<span class="hljs-title function_">pop</span>();<br>                stack.<span class="hljs-title function_">push</span>(c);<br>            &#125;<br>            char chars[]=<span class="hljs-keyword">new</span> char[stack.<span class="hljs-title function_">size</span>()];<br>            <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; stack.<span class="hljs-title function_">size</span>(); i++) &#123;<br>                chars[i]=stack.<span class="hljs-title function_">get</span>(i);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(chars);<br>    &#125;<br><br>    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>        <span class="hljs-title class_">String</span> string = <span class="hljs-string">&quot;bbcaac&quot;</span>;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-title function_">removeDuplicateLetters</span>(string));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>回溯算法之八皇后问题（Java实现）</title>
    <link href="/2021/04/06/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E4%B9%8B%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89/"/>
    <url>/2021/04/06/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E4%B9%8B%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h4 id="要求用回溯法求解-8-皇后问题"><a href="#要求用回溯法求解-8-皇后问题" class="headerlink" title="要求用回溯法求解 8-皇后问题"></a>要求用回溯法求解 8-皇后问题</h4><p>八皇后问题：使放置在 8&#x2F;*8 棋盘上的 8 个皇后彼此不受攻击。</p><p>即：任何两个皇后都不在同一行、同一列或同一斜线上。</p><p>请输出 8 皇后问题的所有可行解的总数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs js">public <span class="hljs-keyword">class</span> <span class="hljs-title class_">EightQueen</span> &#123;<br><br>    public <span class="hljs-keyword">static</span> int[][] array = <span class="hljs-keyword">new</span> int[<span class="hljs-number">8</span>][<span class="hljs-number">8</span>];<br>    public <span class="hljs-keyword">static</span> int sum;<br><br>    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br><br>        <span class="hljs-title function_">search</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(sum);<br><br>    &#125;<br><br>    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">search</span>(<span class="hljs-params">int i</span>)&#123;<br>        <span class="hljs-keyword">if</span>(i &gt; <span class="hljs-number">7</span>)&#123;<br>            sum++;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(int j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">8</span>; j++)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_">check</span>(i, j))&#123;<br>                array[i][j] = <span class="hljs-number">1</span>;<br>                <span class="hljs-title function_">search</span>(i+<span class="hljs-number">1</span>);<br>                array[i][j] = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    public <span class="hljs-keyword">static</span> boolean <span class="hljs-title function_">check</span>(<span class="hljs-params">int i, int j</span>)&#123;<br>        <span class="hljs-keyword">for</span>(int k = <span class="hljs-number">0</span>; k &lt; i; k++)&#123;<br>            <span class="hljs-keyword">if</span>(array[k][j] == <span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(int m = i-<span class="hljs-number">1</span>, n = j-<span class="hljs-number">1</span>; m&gt;=<span class="hljs-number">0</span>&amp;&amp; n&gt;=<span class="hljs-number">0</span>; m--, n--)&#123;<br>            <span class="hljs-keyword">if</span>(array[m][n] == <span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(int m = i-<span class="hljs-number">1</span>, n = j+<span class="hljs-number">1</span>; m&gt;=<span class="hljs-number">0</span>&amp;&amp; n&lt;=<span class="hljs-number">7</span>; m--, n++)&#123;<br>            <span class="hljs-keyword">if</span>(array[m][n] == <span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>回溯算法之装载问题（Java实现）</title>
    <link href="/2021/04/06/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E4%B9%8B%E8%A3%85%E8%BD%BD%E9%97%AE%E9%A2%98%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89/"/>
    <url>/2021/04/06/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E4%B9%8B%E8%A3%85%E8%BD%BD%E9%97%AE%E9%A2%98%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>用回溯法编写一个递归程序解决如下装载问题：<br>有 n 个集装箱要装上 2 艘载重分别为 c1 和 c2的轮船，其中集装箱 i 的<br>重量为 wi（1≤ i ≤ n），且∑ 𝑤𝑖 ≤ 𝑐1 + 𝑐2 。<br>问是否有一个合理的装载方案可以将这 n 个集装箱装上这 2 艘轮船？如果有，请给出装载方案。</p><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><p>当 n&#x3D;3，c1&#x3D;c2&#x3D;50，且 w&#x3D;[10,40,40]时，可以将集装箱 1 和 2 装到第一艘轮船上，集装箱3装到第二艘轮船上；<br>如果 w&#x3D;[20,40,40]时，无法将这 3 个集装箱都装上轮船。</p><p>Java代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">ArrayList</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">List</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Scanner</span>;<br><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">Load</span> &#123;<br><br>    public <span class="hljs-keyword">static</span> int weight1;  <span class="hljs-comment">//记录第一艘船的载重能力</span><br>    public <span class="hljs-keyword">static</span> int weight2;  <span class="hljs-comment">//记录第二艘船的载重能力</span><br><br>    public <span class="hljs-keyword">static</span> int sum1 = <span class="hljs-number">0</span>,sum2 = <span class="hljs-number">0</span>;        <span class="hljs-comment">//分别代表此时第一艘船的载重和所有集装箱的总重量</span><br>    public <span class="hljs-keyword">static</span> int[] arr;                    <span class="hljs-comment">//记录集装箱的重量</span><br>    public <span class="hljs-keyword">static</span> int n;                        <span class="hljs-comment">//集装箱的个数</span><br>    public <span class="hljs-keyword">static</span> <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">Integer</span>&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;<span class="hljs-title class_">Integer</span>&gt;(); <span class="hljs-comment">//第一艘船的集装箱的装载的重量</span><br>    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>        <span class="hljs-title class_">Scanner</span> scanner = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(<span class="hljs-title class_">System</span>.<span class="hljs-property">in</span>);<br>        n = scanner.<span class="hljs-title function_">nextInt</span>();<br>        arr = <span class="hljs-keyword">new</span> int[n];<br>        weight1 = scanner.<span class="hljs-title function_">nextInt</span>();<br>        weight2 = scanner.<span class="hljs-title function_">nextInt</span>();<br>        <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            arr[i] = scanner.<span class="hljs-title function_">nextInt</span>();<br>            sum2 += arr[i];<br>        &#125;<br>        scanner.<span class="hljs-title function_">close</span>();<br>        <span class="hljs-title function_">backtrack</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">backtrack</span>(<span class="hljs-params">int i</span>) &#123;<br>        <span class="hljs-keyword">if</span>(sum1 &gt; weight1) &#123;   <span class="hljs-comment">// 如若超载，则回溯</span><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(i == n) &#123;<br>            <span class="hljs-keyword">if</span>(sum2 - sum1 &lt; weight2) &#123;      <br>                <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(list);<br>            &#125;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        sum1 += arr[i];<br>        list.<span class="hljs-title function_">add</span>(arr[i]);<br>        <span class="hljs-title function_">backtrack</span>(i+<span class="hljs-number">1</span>);<br>        sum1 -= arr[i];<br>        list.<span class="hljs-title function_">remove</span>(list.<span class="hljs-title function_">size</span>()-<span class="hljs-number">1</span>);<br>        <span class="hljs-title function_">backtrack</span>(i+<span class="hljs-number">1</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树的锯齿形层序遍历(Java实现)</title>
    <link href="/2021/04/06/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%94%AF%E9%BD%BF%E5%BD%A2%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86(Java%E5%AE%9E%E7%8E%B0)/"/>
    <url>/2021/04/06/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%94%AF%E9%BD%BF%E5%BD%A2%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86(Java%E5%AE%9E%E7%8E%B0)/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个二叉树，返回其节点值的锯齿形层序遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。<br>&#x2F;#&#x2F;#&#x2F;#示例<br>给定二叉树 [3,9,20,null,null,15,7],<br><img src="https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403161542127.png"></p><p>返回锯齿形层序遍历如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">[<br>  [<span class="hljs-number">3</span>],<br>  [<span class="hljs-number">20</span>,<span class="hljs-number">9</span>],<br>  [<span class="hljs-number">15</span>,<span class="hljs-number">7</span>]<br>]<br></code></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/">https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/</a></p><h3 id="Java代码实现"><a href="#Java代码实现" class="headerlink" title="Java代码实现"></a>Java代码实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">ArrayDeque</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">ArrayList</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">List</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span> &#123;<br>    int val;<br>    <span class="hljs-title class_">TreeNode</span> left;<br>    <span class="hljs-title class_">TreeNode</span> right;<br>    <span class="hljs-title class_">TreeNode</span>(int x) &#123; val = x; &#125;<br>&#125;<br> <br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    public <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">Integer</span>&gt;&gt; <span class="hljs-title function_">zigzagLevelOrder</span>(<span class="hljs-params">TreeNode root</span>) &#123;<br>    <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">Integer</span>&gt;&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;<span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">Integer</span>&gt;&gt;();<br>    <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//二叉树为空，直接返回空结果</span><br>    <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-title class_">ArrayDeque</span>&lt;<span class="hljs-title class_">TreeNode</span>&gt; deque = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;<span class="hljs-title class_">TreeNode</span>&gt;();<br>    deque.<span class="hljs-title function_">add</span>(root);<br>    <span class="hljs-title function_">leverOrder</span>(res, deque, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 参数列表说明：</span><br><span class="hljs-comment">     * res 结果集</span><br><span class="hljs-comment">     * deque 双向队列存储当前层次遍历的结点</span><br><span class="hljs-comment">     * flag 记录当前遍历的层数，用来控制层序遍历的方向</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">leverOrder</span>(<span class="hljs-params">List&lt;List&lt;Integer&gt;&gt; res,ArrayDeque&lt;TreeNode&gt; deque,int flag</span>) &#123;<br>    int size = deque.<span class="hljs-title function_">size</span>();<br>    <span class="hljs-keyword">if</span>(size == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-title class_">ArrayList</span>&lt;<span class="hljs-title class_">Integer</span>&gt; arrayList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;<span class="hljs-title class_">Integer</span>&gt;(); <br>    <span class="hljs-keyword">if</span>(flag == <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">while</span>(size-- != <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-title class_">TreeNode</span> root = deque.<span class="hljs-title function_">pollFirst</span>();<br>    arrayList.<span class="hljs-title function_">add</span>(root.<span class="hljs-property">val</span>);<br>    <span class="hljs-keyword">if</span>(root.<span class="hljs-property">left</span> != <span class="hljs-literal">null</span>) &#123;<br>    deque.<span class="hljs-title function_">offer</span>(root.<span class="hljs-property">left</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(root.<span class="hljs-property">right</span> != <span class="hljs-literal">null</span>) &#123;<br>    deque.<span class="hljs-title function_">offer</span>(root.<span class="hljs-property">right</span>);<br>    &#125;<br>    &#125;<br>    <span class="hljs-comment">//加入结果集，递归下一层</span><br>    res.<span class="hljs-title function_">add</span>(arrayList);<br>    <span class="hljs-title function_">leverOrder</span>(res, deque, <span class="hljs-number">2</span>);<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">while</span>(size-- != <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-title class_">TreeNode</span> root = deque.<span class="hljs-title function_">pollLast</span>();<br>    arrayList.<span class="hljs-title function_">add</span>(root.<span class="hljs-property">val</span>);<br>    <span class="hljs-keyword">if</span>(root.<span class="hljs-property">right</span> != <span class="hljs-literal">null</span>) &#123;<br>    deque.<span class="hljs-title function_">offerFirst</span>(root.<span class="hljs-property">right</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(root.<span class="hljs-property">left</span> != <span class="hljs-literal">null</span>) &#123;<br>    deque.<span class="hljs-title function_">offerFirst</span>(root.<span class="hljs-property">left</span>);<br>    &#125;<br>    &#125;<br>    <span class="hljs-comment">//加入结果集，//递归下一层</span><br>    res.<span class="hljs-title function_">add</span>(arrayList);<br>    <span class="hljs-title function_">leverOrder</span>(res, deque, <span class="hljs-number">1</span>);<br>&#125;<br>    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分发糖果（Java实现）</title>
    <link href="/2021/04/06/%E5%88%86%E5%8F%91%E7%B3%96%E6%9E%9C%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89/"/>
    <url>/2021/04/06/%E5%88%86%E5%8F%91%E7%B3%96%E6%9E%9C%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>老师想给孩子们分发糖果，有 N 个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。<br>你需要按照以下要求，帮助老师给这些孩子分发糖果：<br>每个孩子至少分配到 1 个糖果。<br>相邻的孩子中，评分高的孩子必须获得更多的糖果。<br>那么这样下来，老师至少需要准备多少颗糖果呢？</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/candy">https://leetcode-cn.com/problems/candy</a></p><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p>输入: [1,0,2]<br>输出: 5<br>解释: 你可以分别给这三个孩子分发 2、1、2 颗糖果。</p><h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><p>输入: [1,2,2]<br>输出: 4<br>解释: 你可以分别给这三个孩子分发 1、2、1 颗糖果。<br>第三个孩子只得到 1 颗糖果，这已满足上述两个条件</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>两个数组left和right分别记录从左向右规则和从右向左规则时，每个孩子应该分的糖果数。<br>题目要求即为同时满足两个方向的规则，即两个数组按位取max。<br>最终结果要加上每个孩子至少一个糖果。（或者left，right数组初始化为1）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    public int <span class="hljs-title function_">candy</span>(<span class="hljs-params">int[] ratings</span>) &#123;<br>        int len = ratings.<span class="hljs-property">length</span>;<br>    int sum = len;<br>    int[] left = <span class="hljs-keyword">new</span> int[len];<br>    int[] right = <span class="hljs-keyword">new</span> int[len];<br>    <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">1</span>; i &lt; len; i++) &#123;<br>            <span class="hljs-keyword">if</span>(ratings[i] &gt; ratings[i-<span class="hljs-number">1</span>]) &#123;<br>                left[i] = left[i-<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    <span class="hljs-keyword">for</span> (int i = len-<span class="hljs-number">2</span>; i&gt;=<span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">if</span>(ratings[i] &gt; ratings[i+<span class="hljs-number">1</span>]) &#123;<br>                right[i] = right[i+<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    <br>    <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>            sum += <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(left[i], right[i]);<br>        &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA换源</title>
    <link href="/2021/04/06/IDEA%E6%8D%A2%E6%BA%90/"/>
    <url>/2021/04/06/IDEA%E6%8D%A2%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h4 id="IDEA打开setting，搜索maven"><a href="#IDEA打开setting，搜索maven" class="headerlink" title="IDEA打开setting，搜索maven"></a>IDEA打开setting，搜索maven</h4><p>如图：<br><img src="/../images/5206cd3d-d07b-45b8-8416-5b0111820fe8.png"></p><p>右侧两个override</p><ul><li>第一个是配置文件的路径重写</li><li>第二个是仓库路径重写</li></ul><p>更改为自己的setting.xml的路径即可</p><p>setting.xml的内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;settings xmlns=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span><br>    <span class="hljs-attr">xmlns</span>:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>    <span class="hljs-attr">xsi</span>:schemaLocation=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0</span><br><span class="hljs-string">                        https://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;<br> <br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>aliyunmaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>阿里云公共仓库<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span></span><br><br><br>&lt;/settings&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>三角形最大周长算法</title>
    <link href="/2020/11/29/%E4%B8%89%E8%A7%92%E5%BD%A2%E6%9C%80%E5%A4%A7%E5%91%A8%E9%95%BF%E7%AE%97%E6%B3%95/"/>
    <url>/2020/11/29/%E4%B8%89%E8%A7%92%E5%BD%A2%E6%9C%80%E5%A4%A7%E5%91%A8%E9%95%BF%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403161542552.png" alt="在这里插入图片描述"><br><img src="https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403161542553.png" alt="在这里插入图片描述"><br><img src="https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403161542554.png" alt="在这里插入图片描述"></p><p>答案：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <br>    public int <span class="hljs-title function_">largestPerimeter</span>(<span class="hljs-params">int[] A</span>) &#123;<br>    <br>        int len = A.<span class="hljs-property">length</span>;<br>        <span class="hljs-keyword">if</span>(len &lt; <span class="hljs-number">3</span>)&#123;<br>    <br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-title class_">Arrays</span>.<span class="hljs-title function_">sort</span>(A);<br>        <span class="hljs-keyword">while</span>(len-<span class="hljs-number">3</span>&gt;=<span class="hljs-number">0</span>)&#123;<br>    <br>            <span class="hljs-keyword">if</span>(A[len-<span class="hljs-number">1</span>]-A[len-<span class="hljs-number">2</span>] &lt; A[len-<span class="hljs-number">3</span>])&#123;<br>    <br>                <span class="hljs-keyword">return</span> A[len-<span class="hljs-number">1</span>]+A[len-<span class="hljs-number">2</span>]+A[len-<span class="hljs-number">3</span>];<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>    <br>                len = len-<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>变进制数-算法</title>
    <link href="/2020/11/29/%E5%8F%98%E8%BF%9B%E5%88%B6%E6%95%B0-%E7%AE%97%E6%B3%95/"/>
    <url>/2020/11/29/%E5%8F%98%E8%BF%9B%E5%88%B6%E6%95%B0-%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403161542724.png" alt="在这里插入图片描述"></p><p>答案</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Scanner</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>&#123;<br>    <br>public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>    <br><span class="hljs-title class_">Scanner</span> scanner = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(<span class="hljs-title class_">System</span>.<span class="hljs-property">in</span>);<br>int[] jinzhi = &#123;<br>    <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">13</span>,<span class="hljs-number">17</span>,<span class="hljs-number">19</span>,<span class="hljs-number">23</span>&#125;;<br><span class="hljs-title class_">String</span> string = scanner.<span class="hljs-title function_">next</span>();<br>int len = string.<span class="hljs-title function_">length</span>();<br>int res = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(int i=<span class="hljs-number">0</span>; i&lt;len; i++) &#123;<br>    <br>char ch = string.<span class="hljs-title function_">charAt</span>(i);<br>int x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(ch &lt;= <span class="hljs-number">57</span>) &#123;<br>    <br>x = ch-<span class="hljs-number">48</span>;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    <br>x = ch-<span class="hljs-number">97</span>;<br>&#125;<br>res = (res+x) * jinzhi[len-i-<span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(res);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>识别图中模糊的手写数字（菜鸟做法）</title>
    <link href="/2020/11/29/%E8%AF%86%E5%88%AB%E5%9B%BE%E4%B8%AD%E6%A8%A1%E7%B3%8A%E7%9A%84%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%EF%BC%88%E8%8F%9C%E9%B8%9F%E5%81%9A%E6%B3%95%EF%BC%89/"/>
    <url>/2020/11/29/%E8%AF%86%E5%88%AB%E5%9B%BE%E4%B8%AD%E6%A8%A1%E7%B3%8A%E7%9A%84%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%EF%BC%88%E8%8F%9C%E9%B8%9F%E5%81%9A%E6%B3%95%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h4 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h4><p>python语言基础</p><h4 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h4><p>导入图片数据集，分析图片的特点、定义变量，构建模型，训练模型并输出中间状态参数，测试、保存、读取模型</p><h4 id="如何搞定它"><a href="#如何搞定它" class="headerlink" title="如何搞定它"></a>如何搞定它</h4><h5 id="1-1导入图片数据集"><a href="#1-1导入图片数据集" class="headerlink" title="1.1导入图片数据集"></a>1.1导入图片数据集</h5><p>首先来看看数据集是什么样的。<br>MNIST是一个入门级的计算机视觉数据集。当我们开始学习编程时，第一件事往往是学习打印Hello World。在机器学习入门的领域里，我们会用MNIST数据集来实验各种模型。</p><p>1.1.1数据集介绍</p><p>MNIST里包含各种手写数字图片，如图所示。<br><img src="https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403161546895.png" alt="在这里插入图片描述"><br>它也包含每一张图片对应的标签，告诉我们这个是数字几。例如，上面这4张图片的标签分别是5、0、4、1。</p><p>1.1.2下载并安装MNIST数据集</p><p>介绍完MNIST数据集后，下面来演示一下如何通过代码来对其操作。</p><p>（1）利用TensorFlow代码下载MNIST</p><p>TensorFlow提供了一个库，可以直接用来自动下载与安装MNIST，见如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"># <span class="hljs-variable constant_">MNIST</span>数据集<br><span class="hljs-keyword">from</span> tensorflow.<span class="hljs-property">examples</span>.<span class="hljs-property">tutorials</span>.<span class="hljs-property">mnist</span> <span class="hljs-keyword">import</span> input_data<br>mnist=input_data.<span class="hljs-title function_">read_data_sets</span>(<span class="hljs-string">&quot;MNIST_data/&quot;</span>,one_hot=<span class="hljs-title class_">True</span>))<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">运行上面的代码，会自动下载数据集并将文件解压到当前代码所在同级目录下的MNIST_data文件夹下。<br>注意：代码中的one_hot=<span class="hljs-title class_">True</span>，表示将样本标签转化为one_hot编码。<br></code></pre></td></tr></table></figure><p>举例来解释one_hot编码：<br>假如一共10类。0的one_hot为1000000000，1的one_hot为0100000000，2的one_hot为0010000000，3的one_hot为0001000000……依此类推。只有一个位为1，1所在的位置就代表着第几类。</p><p>MNIST数据集中的图片是28×28像素，所以，每一幅图就是1行784（28×28）列的数据，括号中的每一个值代表一个像素。</p><ul><li>如果是黑白的图片，图片中黑色的地方数值为0；有图案的地方，数值为0～255之间的数字，代表其颜色的深度。</li><li>如果是彩色的图片，一个像素会由3个值来表示RGB（红、黄、蓝）。在后面讲解其他数据集时会具体讲到。</li></ul><p>接下来通过几行代码将MNIST里面的信息打印出来，看看它的具体内容。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"># <span class="hljs-variable constant_">MNIST</span>数据集（续）<br>print (<span class="hljs-string">&#x27;输入数据:&#x27;</span>,mnist.<span class="hljs-property">train</span>.<span class="hljs-property">images</span>)<br>print (<span class="hljs-string">&#x27;输入数据打印shape:&#x27;</span>,mnist.<span class="hljs-property">train</span>.<span class="hljs-property">images</span>.<span class="hljs-property">shape</span>)<br><span class="hljs-keyword">import</span> pylab<br>im = mnist.<span class="hljs-property">train</span>.<span class="hljs-property">images</span>[<span class="hljs-number">1</span>]<br>im = im.<span class="hljs-title function_">reshape</span>(-<span class="hljs-number">1</span>,<span class="hljs-number">28</span>)<br>pylab.<span class="hljs-title function_">imshow</span>(im)<br>pylab.<span class="hljs-title function_">show</span>()<br></code></pre></td></tr></table></figure><p>运行上面的代码，输出信息如下：</p><p>输出结果如图所示<br><img src="https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403161546896.png" alt="在这里插入图片描述"><br>刚开始的打印信息是解压数据集的意思。如果是第一次运行，还会显示下载数据的相关信息。<br>接着打印出来的是训练集的图片信息，是一个55000行、784列的矩阵。即，训练集里有55000张图片。</p><p>（2）MNIST数据集组成</p><p>在MNIST训练数据集中，mnist.train.images是一个形状为[55000，784]的张量。其中，第1个维度数字用来索引图片，第2个维度数字用来索引每张图片中的像素点。此张量里的每一个元素，都表示某张图片里的某个像素的强度值，值介于0～255之间。<br>MNIST里包含3个数据集：第一个是训练数据集，另外两个分别是测试数据集（mnist.test）和验证数据集（mnist.validation）。可使用如下命令查看里面的数据信息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">MNIST</span>数据集（续）<br>print (<span class="hljs-string">&#x27;输入数据打印shape:&#x27;</span>,mnist.<span class="hljs-property">test</span>.<span class="hljs-property">images</span>.<span class="hljs-property">shape</span>)<br>print (<span class="hljs-string">&#x27;输入数据打印shape:&#x27;</span>,mnist.<span class="hljs-property">validation</span>.<span class="hljs-property">images</span>.<span class="hljs-property">shape</span>)<br></code></pre></td></tr></table></figure><p>运行完上面的命令，可以发现在测试数据集里有10000条样本图片，验证数据集里有5000个图片。</p><p>在实际的机器学习模型设计时，样本一般分为3部分：</p><ul><li>一部分用于训练；</li><li>一部分用于评估训练过程中的准确度（测试数据集）；</li><li>一部分用于评估最终模型的准确度（验证数据集）。</li></ul><p>训练过程中，模型并没有遇到过验证数据集中的数据，所以利用验证数据集可以评估出模型的准确度。这个准确度越高，代表模型的泛化能力越强。</p><p>另外，这3个数据集还有分别对应的3个文件（标签文件），用来标注每个图片上的数字是几。把图片和标签放在一起，称为“样本”。通过样本来就可以实现一个有监督信号的深度学习模型。</p><p>相对应的，MNIST数据集的标签是介于0～9之间的数字，用来描述给定图片里表示的数字。标签数据是“one-hot vectors”：一个one-hot向量，除了某一位的数字是1外，其余各维度数字都是0。例如，标签0将表示为（[1，0，0，0，0，0，0，0，0，0，0]）。因此，mnist.train.labels是一个[55000，10]的数字矩阵。</p><h5 id="1-2分析图片的特点，定义变量"><a href="#1-2分析图片的特点，定义变量" class="headerlink" title="1.2分析图片的特点，定义变量"></a>1.2分析图片的特点，定义变量</h5><p>由于输入图片是个55000×784的矩阵，所以先创建一个[None，784]的占位符x和一个[None，10]的占位符y，然后使用feed机制将图片和标签输入进去。具体代码如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"># <span class="hljs-variable constant_">MNIST</span>分类<br><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf  # 导入tensorflow库<br><span class="hljs-keyword">from</span> tensorflow.<span class="hljs-property">examples</span>.<span class="hljs-property">tutorials</span>.<span class="hljs-property">mnist</span> <span class="hljs-keyword">import</span> input_data<br>mnist = input_data.<span class="hljs-title function_">read_data_sets</span>(<span class="hljs-string">&quot;MNIST_data/&quot;</span>,one_hot=<span class="hljs-title class_">True</span>)<br><span class="hljs-keyword">import</span> pylab <br>tf.<span class="hljs-title function_">reset_default_graph</span>()<br># 定义占位符<br>x = tf.<span class="hljs-title function_">placeholder</span>(tf.<span class="hljs-property">float32</span>, [<span class="hljs-title class_">None</span>, <span class="hljs-number">784</span>]) # <span class="hljs-variable constant_">MNIST</span>数据集的维度是  <span class="hljs-number">28</span>×<span class="hljs-number">28</span>=<span class="hljs-number">784</span><br>y = tf.<span class="hljs-title function_">placeholder</span>(tf.<span class="hljs-property">float32</span>, [<span class="hljs-title class_">None</span>, <span class="hljs-number">10</span>])  # 数字<span class="hljs-number">0</span>～<span class="hljs-number">9</span> ，共<span class="hljs-number">10</span>个类别<br>#代码中第<span class="hljs-number">8</span>行的<span class="hljs-title class_">None</span>，表示此张量的第一个维度可以是任何长度的。x就代表能够输入任意数量的<span class="hljs-variable constant_">MNIST</span>图像，每一张图展平成<span class="hljs-number">784</span>维的向量。<br></code></pre></td></tr></table></figure><h5 id="1-3构建模型"><a href="#1-3构建模型" class="headerlink" title="1.3构建模型"></a>1.3构建模型</h5><p>样本完成后就可以构建模型了。下面列出了构建模型的相关步骤。</p><p>1.3.1　定义学习参数</p><p>模型也需要权重值和偏置量，它们被统一叫做学习参数。在TensorFlow里，使用Variable来定义学习参数。<br>一个Variable代表一个可修改的张量，定义在TensorFlow的图（一个执行任务）中，其本身也是一种变量。使用Variable定义的学习参数可以用于计算输入值，也可以在计算中被修改。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"># <span class="hljs-variable constant_">MNIST</span>分类（续）<br>W = tf.<span class="hljs-title class_">Variable</span>(tf.<span class="hljs-title function_">random_normal</span>(([<span class="hljs-number">784</span>,<span class="hljs-number">10</span>]))<br>b = tf.<span class="hljs-title class_">Variable</span>(tf.<span class="hljs-title function_">zeros</span>([<span class="hljs-number">10</span>]))<br></code></pre></td></tr></table></figure><p>在这里赋予tf.Variable不同的初值来创建不同的参数。一般将W设为一个随机值，将b设为0。<br>注意：W的维度是[784，10]，因为想要用784维的图片向量乘以它，以得到一个10维的证据值向量，每一位对应不同数字类。b的形状是[10]，所以可以直接把它加到输出上面。</p><p>1.3.2　定义输出节点</p><p>有了输入和模型参数，接着便可以将它们串起来构建成真正的模型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"># <span class="hljs-variable constant_">MNIST</span>分类（续）<br>pred = tf.<span class="hljs-property">nn</span>.<span class="hljs-title function_">softmax</span>(tf.<span class="hljs-title function_">matmul</span>(x, W) + b) # <span class="hljs-title class_">Softmax</span>分类<br></code></pre></td></tr></table></figure><p>首先，用tf.matmul（x，W）表示x乘以W，这里x是一个二维张量，拥有多个输入。然后再加上b，把它们的和输入到tf.nn.softmax函数里。<br>至此就构建好了正向传播的结构。也就是表明，只要模型中的参数合适，通过具体的数据输入，就能得到我们想要的分类。</p><p>1.3.3　定义反向传播的结构</p><p>下面定义一个反向传播的结构，编译训练模型，以得到合适的参数。<br>这里涉及一个“学习率”的概念。学习率，是指每次改变学习参数的大小。在这里读者只要先有个概念即可，后面章节还会详细介绍。<br>先看下面代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">代码<span class="hljs-number">1</span>-<span class="hljs-number">2</span>　<span class="hljs-variable constant_">MNIST</span>分类（续）<br># 损失函数<br>cost=tf.<span class="hljs-title function_">reduce_mean</span>(-tf.<span class="hljs-title function_">reduce_sum</span>(y*tf.<span class="hljs-title function_">log</span>(pred),reduction_indices=<span class="hljs-number">1</span>))<br>  <br># 定义参数<br>learning_rate = <span class="hljs-number">0.01</span><br># 使用梯度下降优化器<br>optimizer=tf.<span class="hljs-property">train</span>.<span class="hljs-title class_">GradientDescentOptimizer</span>(learning_rate).<span class="hljs-title function_">minimize</span>(cost)<br></code></pre></td></tr></table></figure><p>上面的代码可以这样来理解：<br>（1）将生成的pred与样本标签y进行一次交叉熵的运算，然后取平均值。<br>（2）将这个结果作为一次正向传播的误差，通过梯度下降的优化方法找到能够使这个误差最小化的b和W的偏移量。<br>（3）更新b和W，使其调整为合适的参数。<br>整个过程就是不断地让损失值（误差值cost）变小。因为损失值越小，才能表明输出的结果跟标签数据越相近。当cost小到我们的需求时，这时的b和W就是训练出来的合适值。</p><h5 id="1-4-训练模型并输出中间状态参数"><a href="#1-4-训练模型并输出中间状态参数" class="headerlink" title="1.4　训练模型并输出中间状态参数"></a>1.4　训练模型并输出中间状态参数</h5><p>现在开始真正地训练模型了，先定义训练相关的参数。<br>下面代码中</p><ul><li>第1行中，training_epochs代表要把整个训练样本集迭代25次；</li><li>第2行中，batch_size代表在训练过程中一次取100条数据进行训练</li><li>第3行中，display_step代表每训练一次就把具体的中间状态显示出来。</li></ul><p>注意：batch_size参数代表的意义很关键，在深度学习中，都是将数据按批次地向里面放的。在后面章节中还会详细介绍这么做的目的。<br>参数定义好后，启动一个session就可以开始训练过程了。session中有两个run，第一个run是运行初始化，第二个run是运行具体的运算模型。模型运算之后便将里面的状态打印出来。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js">training_epochs = <span class="hljs-number">25</span><br>batch_size = <span class="hljs-number">100</span><br>display_step = <span class="hljs-number">1</span><br><br>saver = tf.<span class="hljs-property">train</span>.<span class="hljs-title class_">Saver</span>()<br>model_path = <span class="hljs-string">&quot;log/521model.ckpt&quot;</span><br><br># 启动session<br><span class="hljs-keyword">with</span> tf.<span class="hljs-title class_">Session</span>() <span class="hljs-keyword">as</span> <span class="hljs-attr">sess</span>:<br>    sess.<span class="hljs-title function_">run</span>(tf.<span class="hljs-title function_">global_variables_initializer</span>())# <span class="hljs-title class_">Initializing</span> <span class="hljs-variable constant_">OP</span><br>    # 启动循环开始训练<br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-title function_">range</span>(training_epochs):<br>        avg_cost = <span class="hljs-number">0.</span><br>        total_batch = <span class="hljs-title function_">int</span>(mnist.<span class="hljs-property">train</span>.<span class="hljs-property">num_examples</span>/batch_size)<br>        # 循环所有数据集<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-title function_">range</span>(total_batch):<br>            batch_xs, batch_ys = mnist.<span class="hljs-property">train</span>.<span class="hljs-title function_">next_batch</span>(batch_size)<br>            # 运行优化器<br>            _, c = sess.<span class="hljs-title function_">run</span>([optimizer, cost], feed_dict=&#123;<br>    <span class="hljs-attr">x</span>: batch_xs,<br>                                                       <span class="hljs-attr">y</span>: batch_ys&#125;)<br>            # 计算平均loss值<br>            avg_cost += c / total_batch<br>        # 显示训练中的详细信息<br>        <span class="hljs-keyword">if</span> (epoch+<span class="hljs-number">1</span>) % display_step == <span class="hljs-number">0</span>:<br>           print (<span class="hljs-string">&quot;Epoch:&quot;</span>, <span class="hljs-string">&#x27;%04d&#x27;</span> % (epoch+<span class="hljs-number">1</span>), <span class="hljs-string">&quot;cost=&quot;</span>, <span class="hljs-string">&quot;&#123;:.9f&#125;&quot;</span>.            <span class="hljs-title function_">format</span>(avg_cost))<br><br>    <span class="hljs-title function_">print</span>( <span class="hljs-string">&quot; Finished!&quot;</span>)<br></code></pre></td></tr></table></figure><p>执行上面的代码，会输出如下信息：<br><img src="https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403161546897.png" alt="在这里插入图片描述"></p><p>这里输出的中间状态是cost损失值。读者也可以把自己关心的内容打印出来。可以看到，从第1次迭代到第25次迭代的损失值在逐渐减小，最终的误差只有0.8。</p><h5 id="1-5-测试模型"><a href="#1-5-测试模型" class="headerlink" title="1.5　测试模型"></a>1.5　测试模型</h5><p>还记得MNIST里面有测试数据吗？现在我们使用测试数据来测试一下训练完的模型吧。<br>与前面的过程类似，也是先将计算测试的网络结构建立起来，然后通过最终节点的eval将测试值运算出来。<br>注意：这个过程仍然是在session里进行的。<br>测试错误率的算法是：直接判断预测的结果与真实的标签是否相同，如是相同的就表明是正确的，如是不相同的就表示是错误的。然后将正确的个数除以总个数，得到的值即为正确率。由于是onehot编码，这里使用了tf.argmax函数返回onehot编码中数值为1的那个元素的下标。下面是具体代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">#<span class="hljs-variable constant_">MNIST</span>分类（续）<br>    correct_prediction = tf.<span class="hljs-title function_">equal</span>(tf.<span class="hljs-title function_">argmax</span>(pred, <span class="hljs-number">1</span>), tf.<span class="hljs-title function_">argmax</span>(y, <span class="hljs-number">1</span>))<br>    # 计算准确率<br>    accuracy = tf.<span class="hljs-title function_">reduce_mean</span>(tf.<span class="hljs-title function_">cast</span>(correct_prediction, tf.<span class="hljs-property">float32</span>))<br>    print (<span class="hljs-string">&quot;Accuracy:&quot;</span>, accuracy.<span class="hljs-built_in">eval</span>(&#123;<br>    <span class="hljs-attr">x</span>: mnist.<span class="hljs-property">test</span>.<span class="hljs-property">images</span>, <span class="hljs-attr">y</span>: mnist.<span class="hljs-property">test</span>.<span class="hljs-property">labels</span>&#125;))<br></code></pre></td></tr></table></figure><p>上面代码执行后，显示信息如下：<br><img src="https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403161546898.png" alt="在这里插入图片描述"></p><p>测试正确率的算法与损失值的算法略有差别，但代表的意义却很类似。当然，也可以直接拿计算损失值的交叉熵结果来代表模型测试的错误率。<br>注意：<br>（1）并不是所有模型的测试错误率和训练时的最后一次损失值都很接近，这取决于训练样本和测试样本的分布情况，也取决于模型本身的拟合质量。关于拟合质量问题，将在后面章节详细介绍。<br>（2）读者自己运行时，得到的值可能和本书中的值不一样。甚至每次运行时，得到的值也不一样。原因是每次初始的权重w都是随机的。由于初始权重不同，而且每次训练的批次数据也不同，所以最终生成的模型也不会完全相同。但如果核心算法保持一致，则会保证最终的结果不会有太大的偏差。</p><h5 id="1-6-保存模型"><a href="#1-6-保存模型" class="headerlink" title="1.6　保存模型"></a>1.6　保存模型</h5><p>下面开始讲解如何保存模型。<br>首先要建立一个saver和一个路径，然后通过调用save，自动将session中的参数保存起来，见如下代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"># <span class="hljs-variable constant_">MNIST</span>分类（续）   <br># 保存模型<br>    save_path = saver.<span class="hljs-title function_">save</span>(sess, model_path)<br>    <span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;Model saved in file: %s&quot;</span> % save_path)<br></code></pre></td></tr></table></figure><p>上面代码的作用是保存模型，并将模型保存的路径打印出来。当然，在这段代码运行之前，需要添加saver和model_path的定义。来到前面session创建之前添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"># <span class="hljs-variable constant_">MNIST</span>分类（续）<br>saver = tf.<span class="hljs-property">train</span>.<span class="hljs-title class_">Saver</span>()<br>model_path = <span class="hljs-string">&quot;log/521model.ckpt&quot;</span><br></code></pre></td></tr></table></figure><p>执行上述的全部代码后，会打印出存储位置<br><img src="https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403161546899.png" alt="在这里插入图片描述"></p><h5 id="1-7-读取模型"><a href="#1-7-读取模型" class="headerlink" title="1.7　读取模型"></a>1.7　读取模型</h5><p>将模型存储好后，下面来做一个实验：读取模型并将两张图片放进去让模型预测结果，然后将两张图片极其对应的标签一并显示出来。<br>在整个代码执行过程中，对于网络模型的定义不变，只是重新建立一个session而已，所有的操作都在这个新的session中完成。具体细节见代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js">#　<span class="hljs-variable constant_">MNIST</span>分类（续）<br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;Starting 2nd session...&quot;</span>)<br><span class="hljs-keyword">with</span> tf.<span class="hljs-title class_">Session</span>() <span class="hljs-keyword">as</span> <span class="hljs-attr">sess</span>:<br>    # 初始化变量<br>    sess.<span class="hljs-title function_">run</span>(tf.<span class="hljs-title function_">global_variables_initializer</span>())<br>    # 恢复模型变量<br>    saver.<span class="hljs-title function_">restore</span>(sess, model_path)<br><br>    # 测试 model<br>    correct_prediction = tf.<span class="hljs-title function_">equal</span>(tf.<span class="hljs-title function_">argmax</span>(pred, <span class="hljs-number">1</span>), tf.<span class="hljs-title function_">argmax</span>(y, <span class="hljs-number">1</span>))<br>    # 计算准确率<br>    accuracy = tf.<span class="hljs-title function_">reduce_mean</span>(tf.<span class="hljs-title function_">cast</span>(correct_prediction, tf.<span class="hljs-property">float32</span>))<br>    print (<span class="hljs-string">&quot;Accuracy:&quot;</span>, accuracy.<span class="hljs-built_in">eval</span>(&#123;<br>    <span class="hljs-attr">x</span>: mnist.<span class="hljs-property">test</span>.<span class="hljs-property">images</span>, <span class="hljs-attr">y</span>: mnist.      test.<span class="hljs-property">labels</span>&#125;))<br><br>    output = tf.<span class="hljs-title function_">argmax</span>(pred, <span class="hljs-number">1</span>)<br>    batch_xs, batch_ys = mnist.<span class="hljs-property">train</span>.<span class="hljs-title function_">next_batch</span>(<span class="hljs-number">2</span>)<br>    outputval,predv = sess.<span class="hljs-title function_">run</span>([output,pred], feed_dict=&#123;<br>    <span class="hljs-attr">x</span>: batch_xs&#125;)<br>    <span class="hljs-title function_">print</span>(outputval,predv,batch_ys)<br>    im = batch_xs[<span class="hljs-number">0</span>]<br>    im = im.<span class="hljs-title function_">reshape</span>(-<span class="hljs-number">1</span>,<span class="hljs-number">28</span>)<br>    pylab.<span class="hljs-title function_">imshow</span>(im)<br>    pylab.<span class="hljs-title function_">show</span>()<br><br>    im = batch_xs[<span class="hljs-number">1</span>]<br>    im = im.<span class="hljs-title function_">reshape</span>(-<span class="hljs-number">1</span>,<span class="hljs-number">28</span>)<br>    pylab.<span class="hljs-title function_">imshow</span>(im)<br>    pylab.<span class="hljs-title function_">show</span>()<br></code></pre></td></tr></table></figure><p>以上代码可以替代原来的session，也可以直接放到代码后面，将前面的session注释掉。<br>输出结果<br><img src="https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403161546900.png" alt="在这里插入图片描述"></p><ul><li>第一行是模型的准确率，接下来是3个数组。</li><li>第一个数组是输出的预测结果[3,6]</li><li>第二个大的数组比较大，是预测出来的真实输出值，哪一项数值越大，代表对应的概率越大.</li><li>第三个大的数组元素都是0和1，是图片实际的标签值onehot编码表示的数字</li></ul><p>完整代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> tensorflow.<span class="hljs-property">compat</span>.<span class="hljs-property">v1</span> <span class="hljs-keyword">as</span> tf  # 导入tensorflow库#<br>tf.<span class="hljs-title function_">disable_v2_behavior</span>()<br><br><span class="hljs-keyword">from</span> tensorflow.<span class="hljs-property">examples</span>.<span class="hljs-property">tutorials</span>.<span class="hljs-property">mnist</span> <span class="hljs-keyword">import</span> input_data<br>mnist = input_data.<span class="hljs-title function_">read_data_sets</span>(<span class="hljs-string">&quot;MNIST_data/&quot;</span>, one_hot=<span class="hljs-title class_">True</span>)<br><br># print (<span class="hljs-string">&#x27;输入数据:&#x27;</span>,mnist.<span class="hljs-property">train</span>.<span class="hljs-property">images</span>)<br># print (<span class="hljs-string">&#x27;输入数据打印shape:&#x27;</span>,mnist.<span class="hljs-property">train</span>.<span class="hljs-property">images</span>.<span class="hljs-property">shape</span>)<br><br><span class="hljs-keyword">import</span> pylab<br>im = mnist.<span class="hljs-property">train</span>.<span class="hljs-property">images</span>[<span class="hljs-number">1</span>]<br>im = im.<span class="hljs-title function_">reshape</span>(-<span class="hljs-number">1</span>,<span class="hljs-number">28</span>)<br>pylab.<span class="hljs-title function_">imshow</span>(im)<br>pylab.<span class="hljs-title function_">show</span>()<br># print (<span class="hljs-string">&#x27;输入数据打印shape:&#x27;</span>,mnist.<span class="hljs-property">test</span>.<span class="hljs-property">images</span>.<span class="hljs-property">shape</span>)<br># print (<span class="hljs-string">&#x27;输入数据打印shape:&#x27;</span>,mnist.<span class="hljs-property">validation</span>.<span class="hljs-property">images</span>.<span class="hljs-property">shape</span>)<br><br>tf.<span class="hljs-title function_">reset_default_graph</span>()<br># 定义占位符<br>x = tf.<span class="hljs-title function_">placeholder</span>(tf.<span class="hljs-property">float32</span>, [<span class="hljs-title class_">None</span>, <span class="hljs-number">784</span>]) # <span class="hljs-variable constant_">MNIST</span>数据集的维度是  <span class="hljs-number">28</span>×<span class="hljs-number">28</span>=<span class="hljs-number">784</span><br>y = tf.<span class="hljs-title function_">placeholder</span>(tf.<span class="hljs-property">float32</span>, [<span class="hljs-title class_">None</span>, <span class="hljs-number">10</span>])  # 数字<span class="hljs-number">0</span>～<span class="hljs-number">9</span> ，共<span class="hljs-number">10</span>个类别<br>W = tf.<span class="hljs-title class_">Variable</span>(tf.<span class="hljs-title function_">random_normal</span>([<span class="hljs-number">784</span>,<span class="hljs-number">10</span>]))<br>b = tf.<span class="hljs-title class_">Variable</span>(tf.<span class="hljs-title function_">zeros</span>([<span class="hljs-number">10</span>]))<br>pred = tf.<span class="hljs-property">nn</span>.<span class="hljs-title function_">softmax</span>(tf.<span class="hljs-title function_">matmul</span>(x, W) + b) # <span class="hljs-title class_">Softmax</span>分类<br><br># 损失函数<br>cost=tf.<span class="hljs-title function_">reduce_mean</span>(-tf.<span class="hljs-title function_">reduce_sum</span>(y*tf.<span class="hljs-title function_">log</span>(pred),reduction_indices=<span class="hljs-number">1</span>))<br><br># 定义参数<br>learning_rate = <span class="hljs-number">0.01</span><br># 使用梯度下降优化器<br>optimizer=tf.<span class="hljs-property">train</span>.<span class="hljs-title class_">GradientDescentOptimizer</span>(learning_rate).<span class="hljs-title function_">minimize</span>(cost)<br>training_epochs = <span class="hljs-number">25</span><br>batch_size = <span class="hljs-number">100</span><br>display_step = <span class="hljs-number">1</span><br><br>saver = tf.<span class="hljs-property">train</span>.<span class="hljs-title class_">Saver</span>()<br>model_path = <span class="hljs-string">&quot;log/521model.ckpt&quot;</span><br><br># 启动session<br><span class="hljs-keyword">with</span> tf.<span class="hljs-title class_">Session</span>() <span class="hljs-keyword">as</span> <span class="hljs-attr">sess</span>:<br>    sess.<span class="hljs-title function_">run</span>(tf.<span class="hljs-title function_">global_variables_initializer</span>())# <span class="hljs-title class_">Initializing</span> <span class="hljs-variable constant_">OP</span><br>    # 启动循环开始训练<br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-title function_">range</span>(training_epochs):<br>        avg_cost = <span class="hljs-number">0.</span><br>        total_batch = <span class="hljs-title function_">int</span>(mnist.<span class="hljs-property">train</span>.<span class="hljs-property">num_examples</span>/batch_size)<br>        # 循环所有数据集<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-title function_">range</span>(total_batch):<br>            batch_xs, batch_ys = mnist.<span class="hljs-property">train</span>.<span class="hljs-title function_">next_batch</span>(batch_size)<br>            # 运行优化器<br>            _, c = sess.<span class="hljs-title function_">run</span>([optimizer, cost], feed_dict=&#123;<br>    <span class="hljs-attr">x</span>: batch_xs,<br>                                                       <span class="hljs-attr">y</span>: batch_ys&#125;)<br>            # 计算平均loss值<br>            avg_cost += c / total_batch<br>        # 显示训练中的详细信息<br>        <span class="hljs-keyword">if</span> (epoch+<span class="hljs-number">1</span>) % display_step == <span class="hljs-number">0</span>:<br>           print (<span class="hljs-string">&quot;Epoch:&quot;</span>, <span class="hljs-string">&#x27;%04d&#x27;</span> % (epoch+<span class="hljs-number">1</span>), <span class="hljs-string">&quot;cost=&quot;</span>, <span class="hljs-string">&quot;&#123;:.9f&#125;&quot;</span>.            <span class="hljs-title function_">format</span>(avg_cost))<br><br>    <span class="hljs-title function_">print</span>( <span class="hljs-string">&quot; Finished!&quot;</span>)<br>    # 测试 model<br>    correct_prediction = tf.<span class="hljs-title function_">equal</span>(tf.<span class="hljs-title function_">argmax</span>(pred, <span class="hljs-number">1</span>), tf.<span class="hljs-title function_">argmax</span>(y, <span class="hljs-number">1</span>))<br>    # 计算准确率<br>    accuracy = tf.<span class="hljs-title function_">reduce_mean</span>(tf.<span class="hljs-title function_">cast</span>(correct_prediction, tf.<span class="hljs-property">float32</span>))<br>    print (<span class="hljs-string">&quot;Accuracy:&quot;</span>, accuracy.<span class="hljs-built_in">eval</span>(&#123;<br>    <span class="hljs-attr">x</span>: mnist.<span class="hljs-property">test</span>.<span class="hljs-property">images</span>, <span class="hljs-attr">y</span>: mnist.<span class="hljs-property">test</span>.<span class="hljs-property">labels</span>&#125;))<br><br>    #     # 保存模型<br>    save_path = saver.<span class="hljs-title function_">save</span>(sess, model_path)<br>    <span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;Model saved in file: %s&quot;</span> % save_path)<br><br><span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;Starting 2nd session...&quot;</span>)<br><span class="hljs-keyword">with</span> tf.<span class="hljs-title class_">Session</span>() <span class="hljs-keyword">as</span> <span class="hljs-attr">sess</span>:<br>    # 初始化变量<br>    sess.<span class="hljs-title function_">run</span>(tf.<span class="hljs-title function_">global_variables_initializer</span>())<br>    # 恢复模型变量<br>    saver.<span class="hljs-title function_">restore</span>(sess, model_path)<br><br>    # 测试 model<br>    correct_prediction = tf.<span class="hljs-title function_">equal</span>(tf.<span class="hljs-title function_">argmax</span>(pred, <span class="hljs-number">1</span>), tf.<span class="hljs-title function_">argmax</span>(y, <span class="hljs-number">1</span>))<br>    # 计算准确率<br>    accuracy = tf.<span class="hljs-title function_">reduce_mean</span>(tf.<span class="hljs-title function_">cast</span>(correct_prediction, tf.<span class="hljs-property">float32</span>))<br>    print (<span class="hljs-string">&quot;Accuracy:&quot;</span>, accuracy.<span class="hljs-built_in">eval</span>(&#123;<br>    <span class="hljs-attr">x</span>: mnist.<span class="hljs-property">test</span>.<span class="hljs-property">images</span>, <span class="hljs-attr">y</span>: mnist.      test.<span class="hljs-property">labels</span>&#125;))<br><br>    output = tf.<span class="hljs-title function_">argmax</span>(pred, <span class="hljs-number">1</span>)<br>    batch_xs, batch_ys = mnist.<span class="hljs-property">train</span>.<span class="hljs-title function_">next_batch</span>(<span class="hljs-number">2</span>)<br>    outputval,predv = sess.<span class="hljs-title function_">run</span>([output,pred], feed_dict=&#123;<br>    <span class="hljs-attr">x</span>: batch_xs&#125;)<br>    <span class="hljs-title function_">print</span>(outputval,predv,batch_ys)<br>    im = batch_xs[<span class="hljs-number">0</span>]<br>    im = im.<span class="hljs-title function_">reshape</span>(-<span class="hljs-number">1</span>,<span class="hljs-number">28</span>)<br>    pylab.<span class="hljs-title function_">imshow</span>(im)<br>    pylab.<span class="hljs-title function_">show</span>()<br><br>    im = batch_xs[<span class="hljs-number">1</span>]<br>    im = im.<span class="hljs-title function_">reshape</span>(-<span class="hljs-number">1</span>,<span class="hljs-number">28</span>)<br>    pylab.<span class="hljs-title function_">imshow</span>(im)<br>    pylab.<span class="hljs-title function_">show</span>()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>其它</category>
      
    </categories>
    
    
    <tags>
      
      <tag>神经网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>岛屿的周长-LeetCode463</title>
    <link href="/2020/11/01/%E5%B2%9B%E5%B1%BF%E7%9A%84%E5%91%A8%E9%95%BF-LeetCode463/"/>
    <url>/2020/11/01/%E5%B2%9B%E5%B1%BF%E7%9A%84%E5%91%A8%E9%95%BF-LeetCode463/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个包含 0 和 1 的二维网格地图，其中 1 表示陆地 0 表示水域。</p><p>网格中的格子水平和垂直方向相连（对角线方向不相连）。整个网格被水完全包围，但其中恰好有一个岛屿（或者说，一个或多个表示陆地的格子相连组成的岛屿）。</p><p>岛屿中没有“湖”（“湖” 指水域在岛屿内部且不和岛屿周围的水相连）。格子是边长为 1 的正方形。网格为长方形，且宽度和高度均不超过 100 。计算这个岛屿的周长。</p><p><strong>来源：力扣（LeetCode）</strong><br><strong>输入:</strong><br>[[0,1,0,0],<br>[1,1,1,0],<br>[0,1,0,0],<br>[1,1,0,0]]</p><p><strong>输出: 16</strong></p><p>解释: 它的周长是下面图片中的 16 个黄色的边：</p><p><img src="/../images/93d311ab-1d1d-4d82-90cd-729bdfe3b289.png" alt="在这里插入图片描述"></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <br>    public int <span class="hljs-title function_">islandPerimeter</span>(<span class="hljs-params">int[][] grid</span>) &#123;<br>    <br>        int m = grid.<span class="hljs-property">length</span>;<br>        int n = grid[<span class="hljs-number">0</span>].<span class="hljs-property">length</span>;<br>        int res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(int i=<span class="hljs-number">0</span>; i&lt;m; i++)&#123;<br>    <br>            <span class="hljs-keyword">for</span>(int j=<span class="hljs-number">0</span>; j&lt;n;j++)&#123;<br>    <br>                <span class="hljs-keyword">if</span>(grid[i][j] == <span class="hljs-number">1</span>)&#123;<br>    <br>                <span class="hljs-comment">//如果是岛屿，判断其四个方向有没有岛屿，没有周长++</span><br>                    <span class="hljs-keyword">if</span>(i-<span class="hljs-number">1</span>&lt;<span class="hljs-number">0</span>)&#123;<br>    <br>                        res++;<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>    <br>                        <span class="hljs-keyword">if</span>(grid[i-<span class="hljs-number">1</span>][j] == <span class="hljs-number">0</span>)&#123;<br>    <br>                            res++;<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span>(j-<span class="hljs-number">1</span>&lt;<span class="hljs-number">0</span>)&#123;<br>    <br>                        res++;<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>    <br>                        <span class="hljs-keyword">if</span>(grid[i][j-<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>)&#123;<br>    <br>                            res++;<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span>(i+<span class="hljs-number">1</span>&gt;=m)&#123;<br>    <br>                        res++;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span>&#123;<br>    <br>                        <span class="hljs-keyword">if</span>(grid[i+<span class="hljs-number">1</span>][j] == <span class="hljs-number">0</span>)&#123;<br>    <br>                            res++;<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span>(j+<span class="hljs-number">1</span>&gt;=n)&#123;<br>    <br>                        res++;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span>&#123;<br>    <br>                        <span class="hljs-keyword">if</span>(grid[i][j+<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>)&#123;<br>    <br>                            res++;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;       <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>写的时候直接暴力统计每一个岛屿的四个方向是否与其他岛屿相连，<br>使用了一堆的if…；<br>看到别人的题解是先统计周长为有几块岛屿&#x2F;*4，再判断如果岛屿两两相连，那么周长-2；</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python爬取51job的招聘信息</title>
    <link href="/2020/04/29/python%E7%88%AC%E5%8F%9651job%E7%9A%84%E6%8B%9B%E8%81%98%E4%BF%A1%E6%81%AF/"/>
    <url>/2020/04/29/python%E7%88%AC%E5%8F%9651job%E7%9A%84%E6%8B%9B%E8%81%98%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<p><strong>前言</strong><br>最近的脚本课程有了新的作业。爬取51job上的一些招聘信息，包括城市 薪资最大最小值等。</p><p>这里示例的是 济南、北京、上海、广州、深圳的招聘信息<br><strong>求助</strong><br>薪资有些招聘信息并没有填写，也就是说薪资所在标签的值为空值，这些空值无法在集合中占位，进而导致薪资和招聘信息不匹配，如果有大佬会，能不能指点一下啊 ，555 -.-||</p><p>招聘信息包括<br>职位 公司 工作地点 薪水 发布时间 最低薪资 最高薪资 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> xlwt<br><span class="hljs-keyword">import</span> string<br>#workbook = xlwt.<span class="hljs-title class_">Workbook</span>(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)#创建 workbook 即新建 excel 文件/工作簿，<br>myxls = xlwt.<span class="hljs-title class_">Workbook</span>()<br>#worksheet = workbook.<span class="hljs-title function_">add_sheet</span>(<span class="hljs-string">&#x27;my_worksheet&#x27;</span>) #创建工作表，如果想创建多个工作表，直接在后面再 add_sheet<br>sheet1 = myxls.<span class="hljs-title function_">add_sheet</span>(u<span class="hljs-string">&#x27;top250&#x27;</span>, cell_overwrite_ok=<span class="hljs-title class_">True</span>)<br><br>#请求头<br><span class="hljs-variable constant_">HEADERS</span> = &#123;<br>    <br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#x27;</span>,<br>&#125;<br><br>base_urls = <span class="hljs-string">&#x27;https://search.51job.com/list/120200%252C010000%252C020000%252C030200%252C040000,000000,0000,00,9,99,python,2,&#123;&#125;.html&#x27;</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-title function_">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">51</span>):<br>    url = base_urls.<span class="hljs-title function_">format</span>(x)<br>    <span class="hljs-title function_">print</span>(<span class="hljs-string">&#x27;第%s页爬取完成&#x27;</span> % x)<br>    response = requests.<span class="hljs-title function_">get</span>(url,<span class="hljs-variable constant_">HEADERS</span>)<br>    text = response.<span class="hljs-property">content</span>.<span class="hljs-title function_">decode</span>(<span class="hljs-string">&#x27;gbk&#x27;</span>)<br>    tree = etree.<span class="hljs-title function_">HTML</span>(text)<br><br>    <span class="hljs-title class_">PositionAndCompany</span> = tree.<span class="hljs-title function_">xpath</span>(<span class="hljs-string">&quot;//div[@class=&#x27;el&#x27;]//span/a/@title&quot;</span>)<br>    positions = <span class="hljs-title class_">PositionAndCompany</span>[::<span class="hljs-number">2</span>]<br>    companys = <span class="hljs-title class_">PositionAndCompany</span>[<span class="hljs-number">1</span>::<span class="hljs-number">2</span>]<br>    workplaces = tree.<span class="hljs-title function_">xpath</span>(<span class="hljs-string">&#x27;//div[@class=&quot;el&quot;]//span[@class=&quot;t3&quot;]/text()&#x27;</span>)<br>    salarys = tree.<span class="hljs-title function_">xpath</span>(<span class="hljs-string">&#x27;//div[@class=&quot;el&quot;]/span[@class=&quot;t4&quot;]/text()&#x27;</span>)<br>    times = tree.<span class="hljs-title function_">xpath</span>(<span class="hljs-string">&#x27;//div[@class=&quot;el&quot;]/span[@class=&quot;t5&quot;]/text()&#x27;</span>)<br>    sheet1.<span class="hljs-title function_">write</span>(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&quot;职位&quot;</span>)<br>    sheet1.<span class="hljs-title function_">write</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&quot;公司&quot;</span>)<br>    sheet1.<span class="hljs-title function_">write</span>(<span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-string">&quot;工作地方&quot;</span>)<br>    sheet1.<span class="hljs-title function_">write</span>(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;薪水&quot;</span>)<br>    sheet1.<span class="hljs-title function_">write</span>(<span class="hljs-number">0</span>, <span class="hljs-number">12</span>, <span class="hljs-string">&quot;时间&quot;</span>)<br>    sheet1.<span class="hljs-title function_">write</span>(<span class="hljs-number">0</span>,<span class="hljs-number">14</span>,<span class="hljs-string">&quot;最低薪水&quot;</span>)<br>    sheet1.<span class="hljs-title function_">write</span>(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>, <span class="hljs-string">&quot;最高薪水&quot;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-title function_">range</span>(<span class="hljs-number">1</span>,<span class="hljs-title function_">len</span>(salarys)):<br>        pos = positions[i].<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;\t&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>        sheet1.<span class="hljs-title function_">write</span>((x-<span class="hljs-number">1</span>)*<span class="hljs-number">50</span> + i, <span class="hljs-number">1</span>, pos)<br>        com = companys[i]<br>        sheet1.<span class="hljs-title function_">write</span>((x-<span class="hljs-number">1</span>)*<span class="hljs-number">50</span> +i, <span class="hljs-number">5</span>, com)<br>        workplace = workplaces[i]<br>        sheet1.<span class="hljs-title function_">write</span>((x-<span class="hljs-number">1</span>)*<span class="hljs-number">50</span> +i, <span class="hljs-number">8</span>, workplace)<br>        salary = salarys[i]<br>        sheet1.<span class="hljs-title function_">write</span>((x-<span class="hljs-number">1</span>)*<span class="hljs-number">50</span> +i, <span class="hljs-number">10</span>, salary)<br>        time = times[i]<br>        sheet1.<span class="hljs-title function_">write</span>((x-<span class="hljs-number">1</span>)*<span class="hljs-number">50</span> +i,<span class="hljs-number">12</span>,time)<br>        peace = salary.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;-&#x27;</span>)<br>        #将数值与单位分离<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_">len</span>(peace)&gt; <span class="hljs-number">1</span>):<br>            peace[<span class="hljs-number">0</span>] = <span class="hljs-title function_">float</span>(peace[<span class="hljs-number">0</span>])<br>            #unit 是薪资的单位<br>            unit = peace[<span class="hljs-number">1</span>].<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;5&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;6&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;7&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;8&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;8&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;9&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;.&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>            data1 = peace[<span class="hljs-number">1</span>].<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;元&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;千&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;万&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;小时&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;天&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;月&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;年&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;以上&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>            num = <span class="hljs-title function_">float</span>(data1)<br>            #这里是将薪资的单位统一为 万/月<br>            <span class="hljs-keyword">if</span> (unit == <span class="hljs-string">&quot;元/小时&quot;</span>):<br>                salary_1 = <span class="hljs-title function_">str</span>(<span class="hljs-title function_">round</span>((data2 * <span class="hljs-number">24</span> * <span class="hljs-number">30</span> / <span class="hljs-number">10000</span>),<span class="hljs-number">2</span>))<br>                salary_2 = <span class="hljs-title function_">str</span>(<span class="hljs-title function_">round</span>((num * <span class="hljs-number">24</span> * <span class="hljs-number">30</span> / <span class="hljs-number">10000</span>),<span class="hljs-number">2</span>))<br>            elif (unit == <span class="hljs-string">&quot;元/天&quot;</span>):<br>                salary_1 = <span class="hljs-title function_">str</span>(<span class="hljs-title function_">round</span>((peace[<span class="hljs-number">0</span>] * <span class="hljs-number">30</span> / <span class="hljs-number">10000</span>),<span class="hljs-number">2</span>))<br>                salary_2 = <span class="hljs-title function_">str</span>(<span class="hljs-title function_">round</span>((num *<span class="hljs-number">30</span> / <span class="hljs-number">10000</span>),<span class="hljs-number">2</span>))<br>            <span class="hljs-title function_">elif</span>(unit == <span class="hljs-string">&quot;千/月&quot;</span>):<br>                salary_1 = <span class="hljs-title function_">str</span>(<span class="hljs-title function_">round</span>((peace[<span class="hljs-number">0</span>]/<span class="hljs-number">10</span>),<span class="hljs-number">2</span>))<br>                salary_2 = <span class="hljs-title function_">str</span>(<span class="hljs-title function_">round</span>((num/<span class="hljs-number">10</span>),<span class="hljs-number">2</span>))<br>            elif (unit == <span class="hljs-string">&quot;万/年&quot;</span>):<br>                salary_1 = <span class="hljs-title function_">str</span>(<span class="hljs-title function_">round</span>((peace[<span class="hljs-number">0</span>] / <span class="hljs-number">12</span>),<span class="hljs-number">2</span>))<br>                salary_2 = <span class="hljs-title function_">str</span>(<span class="hljs-title function_">round</span>((num / <span class="hljs-number">12</span>),<span class="hljs-number">2</span>))<br>            <span class="hljs-attr">else</span>:<br>                salary_1 = <span class="hljs-title function_">str</span>(peace[<span class="hljs-number">0</span>])<br>                salary_2 = <span class="hljs-title function_">str</span>(num)<br>            sheet1.<span class="hljs-title function_">write</span>((x - <span class="hljs-number">1</span>) * <span class="hljs-number">50</span> + i, <span class="hljs-number">14</span>, salary_1 + <span class="hljs-string">&quot;万/月&quot;</span>)<br>            sheet1.<span class="hljs-title function_">write</span>((x - <span class="hljs-number">1</span>) * <span class="hljs-number">50</span> + i, <span class="hljs-number">16</span>, salary_2 + <span class="hljs-string">&quot;万/月&quot;</span>)<br>        <span class="hljs-attr">else</span>:<br>            #unit 是薪资的单位<br>            unit = peace[<span class="hljs-number">0</span>].<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;6&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;7&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;8&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;8&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;9&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>            data2 = peace[<span class="hljs-number">0</span>].<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;元&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;千&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;万&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;小时&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;天&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;月&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;年&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;以上&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>            num = <span class="hljs-title function_">float</span>(data2)<br>            <span class="hljs-keyword">if</span> (unit == <span class="hljs-string">&quot;元/小时&quot;</span>):<br>                salary_3 = <span class="hljs-title function_">str</span>(<span class="hljs-title function_">round</span>((num * <span class="hljs-number">24</span> * <span class="hljs-number">30</span> / <span class="hljs-number">10000</span>),<span class="hljs-number">2</span>))<br><br>            <span class="hljs-title function_">elif</span>(unit == <span class="hljs-string">&quot;元/天&quot;</span>):<br>                salary_3 = <span class="hljs-title function_">str</span>(<span class="hljs-title function_">round</span>(num * <span class="hljs-number">30</span> / <span class="hljs-number">10000</span>))<br><br>            elif (unit == <span class="hljs-string">&quot;千/月&quot;</span>):<br>                salary_3 = <span class="hljs-title function_">str</span>(<span class="hljs-title function_">round</span>(num/<span class="hljs-number">10</span>))<br><br>            <span class="hljs-title function_">elif</span>(unit == <span class="hljs-string">&quot;万/年&quot;</span> or unit == <span class="hljs-string">&quot;万以上/年&quot;</span>):<br>                salary_3 = <span class="hljs-title function_">str</span>(<span class="hljs-title function_">round</span>(num / <span class="hljs-number">12</span>))<br><br>            elif (unit == <span class="hljs-string">&quot;万/月&quot;</span>):<br>                salary_3 = <span class="hljs-title function_">str</span>(num)<br>#如果提供的单位不是这几个中的一个，输出标记可自行查看！哈哈哈哈<br>            <span class="hljs-attr">else</span>:<br>                <span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;我也没辙了&quot;</span>)<br>            sheet1.<span class="hljs-title function_">write</span>((x - <span class="hljs-number">1</span>) * <span class="hljs-number">50</span> + i, <span class="hljs-number">14</span>, salary_3 + <span class="hljs-string">&quot;万/月&quot;</span>)<br>            sheet1.<span class="hljs-title function_">write</span>((x - <span class="hljs-number">1</span>) * <span class="hljs-number">50</span> + i, <span class="hljs-number">16</span>, salary_3 + <span class="hljs-string">&quot;万/月&quot;</span>)<br><br>        #<span class="hljs-title function_">print</span>(<span class="hljs-title function_">len</span>(pos),<span class="hljs-title function_">len</span>(com),<span class="hljs-title function_">len</span>(workplace),<span class="hljs-title function_">len</span>(salary),<span class="hljs-title function_">len</span>(time))<br>    myxls.<span class="hljs-title function_">save</span>(<span class="hljs-string">&#x27;爬取结果.xls&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>其它</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>矩阵的幂运算--蓝桥杯</title>
    <link href="/2020/04/24/%E7%9F%A9%E9%98%B5%E7%9A%84%E5%B9%82%E8%BF%90%E7%AE%97--%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    <url>/2020/04/24/%E7%9F%A9%E9%98%B5%E7%9A%84%E5%B9%82%E8%BF%90%E7%AE%97--%E8%93%9D%E6%A1%A5%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<h3 id="试题-基础练习-矩阵乘法"><a href="#试题-基础练习-矩阵乘法" class="headerlink" title="试题 基础练习 矩阵乘法"></a>试题 基础练习 矩阵乘法</h3><h5 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h5><p><strong>资源限制</strong><br>时间限制：1.0s 内存限制：512.0MB<br><strong>问题描述</strong><br>给定一个N阶矩阵A，输出A的M次幂（M是非负整数）<br>例如：<br>A &#x3D;<br>1 2<br>3 4<br>A的2次幂<br>7 10<br>15 22<br><strong>输入格式</strong><br>第一行是一个正整数N、M（1&lt;&#x3D;N&lt;&#x3D;30, 0&lt;&#x3D;M&lt;&#x3D;5），表示矩阵A的阶数和要求的幂数<br>接下来N行，每行N个绝对值不超过10的非负整数，描述矩阵A的值<br><strong>输出格式</strong><br>输出共N行，每行N个整数，表示A的M次幂所对应的矩阵。相邻的数之间用一个空格隔开<br><strong>样例输入</strong><br>2 2<br>1 2<br>3 4<br><strong>样例输出</strong><br>7 10<br>15 22</p><h5 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h5><p>这里我们需要注意，矩阵的幂可能为0，也就是说，我们需要考虑到输出01对角矩阵的情况。</p><h5 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h5><p>-》建立三个矩阵的二维数组，<br>-》如果幂为0，打印01对角矩阵<br>-》否则<br>-》》》循环<br>-》》》》》第一，二个矩阵相乘得第三个矩阵，而后将第三个矩阵赋值给第二个矩阵<br>-》》》打印输出第二个矩阵</p><h3 id="Java实现代码"><a href="#Java实现代码" class="headerlink" title="Java实现代码"></a>Java实现代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Scanner</span>;<br><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <br>public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>    <br><span class="hljs-title class_">Scanner</span> scanner = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(<span class="hljs-title class_">System</span>.<span class="hljs-property">in</span>);<br>int n = scanner.<span class="hljs-title function_">nextInt</span>();<br>int m = scanner.<span class="hljs-title function_">nextInt</span>();<br>int[][] arr1 = <span class="hljs-keyword">new</span> int[n][n];<br>int[][] arr2 = <span class="hljs-keyword">new</span> int[n][n];<br>int[][] arr3 = <span class="hljs-keyword">new</span> int[n][n];<br><span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>    <br><span class="hljs-keyword">for</span> (int j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>    <br>arr1[i][j] = scanner.<span class="hljs-title function_">nextInt</span>();<br>arr2[i][j] = arr1[i][j];<br>&#125;<br>&#125;<br>scanner.<span class="hljs-title function_">close</span>();<br><br><span class="hljs-keyword">if</span>(m == <span class="hljs-number">0</span>) &#123;<br>    <br><span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>    <br><span class="hljs-keyword">for</span> (int j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>    <br><span class="hljs-keyword">if</span>( i == j ) &#123;<br>    <br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;1 &quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>    <br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;0 &quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>();<br>&#125;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-keyword">for</span> (int h = <span class="hljs-number">1</span>; h &lt; m; h++) &#123;<br>    <br><span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>    <br><span class="hljs-keyword">for</span> (int j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>    <br>arr3[i][j] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (int k = <span class="hljs-number">0</span>,t=<span class="hljs-number">0</span>; k &lt; n &amp;&amp; t&lt;n; k++,t++) &#123;<br>    <br>arr3[i][j] += arr1[i][t] * arr2[k][j];  <br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>    <br><span class="hljs-keyword">for</span> (int j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>    <br>arr2[i][j] = arr3[i][j];<br>&#125;<br>&#125;<br>&#125; <br><span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>    <br><span class="hljs-keyword">for</span> (int j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>    <br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">print</span>(arr2[i][j] + <span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>矩形面积重叠---蓝桥杯训练题</title>
    <link href="/2020/04/24/%E7%9F%A9%E5%BD%A2%E9%9D%A2%E7%A7%AF%E9%87%8D%E5%8F%A0---%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AE%AD%E7%BB%83%E9%A2%98/"/>
    <url>/2020/04/24/%E7%9F%A9%E5%BD%A2%E9%9D%A2%E7%A7%AF%E9%87%8D%E5%8F%A0---%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AE%AD%E7%BB%83%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="试题-基础练习-矩形面积交"><a href="#试题-基础练习-矩形面积交" class="headerlink" title="试题 基础练习 矩形面积交"></a>试题 基础练习 矩形面积交</h3><h5 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h5><p><strong>资源限制</strong><br>时间限制：1.0s 内存限制：512.0MB</p><p><strong>问题描述</strong><br>平面上有两个矩形，它们的边平行于直角坐标系的X轴或Y轴。对于每个矩形，我们给出它的一对相对顶点的坐标，请你编程算出两个矩形的交的面积。<br><strong>输入格式</strong><br>输入仅包含两行，每行描述一个矩形。<br>在每行中，给出矩形的一对相对顶点的坐标，每个点的坐标都用两个绝对值不超过10^7的实数表示。<br><strong>输出格式</strong><br>输出仅包含一个实数，为交的面积，保留到小数后两位。<br><strong>样例输入</strong><br>1 1 3 3<br>2 2 4 4</p><p><strong>样例输出</strong><br>1.00</p><h5 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h5><p><img src="/../images/fbdb7a27-da62-45ca-b71d-dfb50755060e.png" alt="在这里插入图片描述"><br><img src="/../images/f1a01d92-4921-431b-942e-8f0f48b74711.png" alt="在这里插入图片描述"></p><p>经过简单的画图我们可以得知，我们需要的其实至少两个五角星位置的坐标。</p><p>那么这两个五角星的位置是什么呢？</p><p>其实就是两个矩形各自靠左的x坐标里面的右边的那一个，<br>俩矩形各自靠右的x坐标的左边那一个。<br>俩矩形各自靠上的y坐标的下面那一个，<br>俩矩形各自靠下的y坐标的上面那一个。</p><h5 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Scanner</span>;<br><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <br>public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>    <br><br><span class="hljs-title class_">Scanner</span> scanner = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(<span class="hljs-title class_">System</span>.<span class="hljs-property">in</span>);<br>double x1 = scanner.<span class="hljs-title function_">nextDouble</span>();<br>double y1 = scanner.<span class="hljs-title function_">nextDouble</span>();<br>double x2 = scanner.<span class="hljs-title function_">nextDouble</span>();<br>double y2 = scanner.<span class="hljs-title function_">nextDouble</span>();<br>double x3 = scanner.<span class="hljs-title function_">nextDouble</span>();<br>double y3 = scanner.<span class="hljs-title function_">nextDouble</span>();<br>double x4 = scanner.<span class="hljs-title function_">nextDouble</span>();<br>double y4 = scanner.<span class="hljs-title function_">nextDouble</span>();<br><br>double a1 = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(x1, x2), <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(x3, x4));<br>double b1 = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(y1, y2), <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(y3, y4));<br>double a2 = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(x1, x2), <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(x3, x4));<br>double b2 = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(y1, y2), <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(y3, y4));<br><br><span class="hljs-keyword">if</span>((a1 &lt; a2) &amp;&amp; (b1 &lt; b2)) &#123;<br>    <br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">printf</span>(<span class="hljs-string">&quot;%.2f&quot;</span>,(b2-b1)*(a2-a1));<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    <br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;0.00&quot;</span>);<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符串需要至少多少次移动才能回文呢</title>
    <link href="/2020/04/24/%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%9C%80%E8%A6%81%E8%87%B3%E5%B0%91%E5%A4%9A%E5%B0%91%E6%AC%A1%E7%A7%BB%E5%8A%A8%E6%89%8D%E8%83%BD%E5%9B%9E%E6%96%87%E5%91%A2/"/>
    <url>/2020/04/24/%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%9C%80%E8%A6%81%E8%87%B3%E5%B0%91%E5%A4%9A%E5%B0%91%E6%AC%A1%E7%A7%BB%E5%8A%A8%E6%89%8D%E8%83%BD%E5%9B%9E%E6%96%87%E5%91%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="试题-基础练习-完美的代价"><a href="#试题-基础练习-完美的代价" class="headerlink" title="试题 基础练习 完美的代价"></a>试题 基础练习 完美的代价</h3><h5 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h5><p><strong>问题描述</strong><br>回文串，是一种特殊的字符串，它从左往右读和从右往左读是一样的。小龙龙认为回文串才是完美的。现在给你一个串，它不一定是回文的，请你计算最少的交换次数使得该串变成一个完美的回文串。<br>交换的定义是：交换两个相邻的字符<br>例如mamad<br>第一次交换 ad : mamda<br>第二次交换 md : madma<br>第三次交换 ma : madam (回文！完美！)</p><p><strong>输入格式</strong><br>第一行是一个整数N，表示接下来的字符串的长度(N &lt;&#x3D; 8000)<br>第二行是一个字符串，长度为N.只包含小写字母<br><strong>输出格式</strong><br>如果可能，输出最少的交换次数。<br>否则输出Impossible<br><strong>样例输入</strong><br>5<br>mamad</p><p><strong>样例输出</strong><br>3</p><h5 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h5><p>字符串的长度有奇数和偶数两种可能。</p><p>Impossible有两种可能：<br>1，字符串长度为奇数，且至少含有两个只出现一次的字符<br>2，字符串长度为偶数，且含有一个或多个只出现一次的字符</p><h5 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h5><p>-》从字符数组的第一个位置开始，从后向前遍历寻找与其相同的字符。<br>-》》》如果出现该字符，且并不是本身位置，那么将字符移到回文相对应的位置。<br>-》》》如果找到该字符，且为本身位置，那么这个字符只出现了一次<br>-》》》》》如若数组长度为偶数或曾经出现过单个字符，则打印impossible<br>-》》》》》如若数组长度为奇数，记录曾出现过单个字符，并且该字符移向字符数组中间</p><h5 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Scanner</span>;<br><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <br>public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>    <br><br><span class="hljs-title class_">Scanner</span> scanner = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(<span class="hljs-title class_">System</span>.<span class="hljs-property">in</span>);<br><br>int n;<br>n = scanner.<span class="hljs-title function_">nextInt</span>();<br><span class="hljs-title class_">String</span> str;<br>str = scanner.<span class="hljs-title function_">next</span>();<br>scanner.<span class="hljs-title function_">close</span>();<br>char[] chs = str.<span class="hljs-title function_">toCharArray</span>();<br>int j = n-<span class="hljs-number">1</span>,count=<span class="hljs-number">0</span>,flag=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(int i=<span class="hljs-number">0</span>; i &lt; j; i++) &#123;<br>    <br><span class="hljs-keyword">for</span>(int k=j; k &gt;= i; k--) &#123;<br>    <br><span class="hljs-keyword">if</span>(i==k) &#123;<br>    <br><span class="hljs-keyword">if</span>(n%<span class="hljs-number">2</span>==<span class="hljs-number">0</span> || flag==<span class="hljs-number">1</span>) &#123;<br>    <br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;Impossible&quot;</span>);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br>flag = <span class="hljs-number">1</span>;<br>count += n / <span class="hljs-number">2</span> - i;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(chs[i] == chs[k])&#123;<br>    <br><span class="hljs-keyword">for</span>(int l = k; l &lt; j; l++)&#123;<br>    <br><span class="hljs-title function_">swap</span>(chs,l,l+<span class="hljs-number">1</span>);<br>count++;<span class="hljs-comment">//统计交换次数</span><br>            &#125;<br>            j--;<br>            <span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(count);<br>&#125;<br><br>private <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span>(<span class="hljs-params">char chs[],int i,int j</span>) &#123;<br>    <br>char temp = chs[i];<br>chs[i] = chs[j];<br>chs[j] = temp;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OS Expe 02 线程的同步</title>
    <link href="/2020/04/21/OS%20Expe%2002%20%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%90%8C%E6%AD%A5/"/>
    <url>/2020/04/21/OS%20Expe%2002%20%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%90%8C%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="实验二-线程的同步"><a href="#实验二-线程的同步" class="headerlink" title="实验二:线程的同步"></a>实验二:线程的同步</h2><h3 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h3><p>1）进一步掌握windows系统环境下线程的创建和撤销<br>2）熟悉windows系统提供的线程同步API（是WINDOWS提供给应用程序与操作系统的接口）<br>3）使用windows系统提供的线程同步API解决实际问题</p><h3 id="二、实验准备"><a href="#二、实验准备" class="headerlink" title="二、实验准备"></a>二、实验准备</h3><h5 id="1-进程同步机制的主要任务："><a href="#1-进程同步机制的主要任务：" class="headerlink" title="1. 进程同步机制的主要任务："></a>1. 进程同步机制的主要任务：</h5><p>对多个相关进程在执行次序上进行协调，使并发执行的诸进程之间能够按照一定的规则（或时序）共享系统资源，并能很好地相互合作，从而使程序执行具有可再现性。</p><h5 id="2-线程和进程的发展历程"><a href="#2-线程和进程的发展历程" class="headerlink" title="2. 线程和进程的发展历程"></a>2. 线程和进程的发展历程</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">在<span class="hljs-number">20</span>世纪<span class="hljs-number">60</span>年代中期，人们在设计多道程序<span class="hljs-variable constant_">OS</span>时，引入了进程的概念，从而解决了在单处理机环境下的程序并发执行问题。此后在长达<span class="hljs-number">20</span>年的时间里，在多道程序<span class="hljs-variable constant_">OS</span>中一直以进程作为能拥有资源和独立调度的（运行）的基本单位。<br><br>直到<span class="hljs-number">80</span>年代中期，人们又提出了比进程更小的基本单位 线程 的概念，试图用它来提高程序并发执行的程度，以进一步改善系统的服务质量。特别是在进入<span class="hljs-number">20</span>世纪<span class="hljs-number">90</span>年代后，多处理机系统得到迅速发展，由于线程能更好的提高程序的并发执行程度，因而近几年推出的多处理机<span class="hljs-variable constant_">OS</span>无一例外地都引入了进程，用以改善<span class="hljs-variable constant_">OS</span>的性能。<br></code></pre></td></tr></table></figure><p>由于<strong>线程具有许多传统进程所具有的特征</strong>，所以又称之为轻型进程或进程元，相应的，把传统进程称之为重型进程。传统进程相当于只有一个线程的任务，</p><h5 id="3-等待对象函数"><a href="#3-等待对象函数" class="headerlink" title="3. 等待对象函数"></a>3. 等待对象函数</h5><p>等待一个对象 等待多个对象 WaitForSingleObject() WaitForMultipleObjects() 在指定时间内等待一个对象 在指定时间内等待多个对象</p><p><strong>原型：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">DWORD</span> <span class="hljs-title class_">WaitForSingleObject</span>(<br><span class="hljs-variable constant_">HANDLE</span> hHandle,<span class="hljs-comment">//对象句柄</span><br><span class="hljs-variable constant_">DWORD</span> dwMilliseconds <span class="hljs-comment">//等待时间，以毫秒为单位</span><br>);<br></code></pre></td></tr></table></figure><p><strong>原型：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">DWORD</span> <span class="hljs-title class_">WaitForMultipleObjects</span>(<br><span class="hljs-variable constant_">DWORD</span> nCount,<span class="hljs-comment">//句柄数组中的句柄数</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">HANDLE</span> *lpHandles,<span class="hljs-comment">//指向对象句柄数组的指针</span><br><span class="hljs-variable constant_">BOOL</span> fWaitAll<span class="hljs-comment">//等待类型 1/true表示等待所有的任务完成后进行下一个操作，0/flase 只等待任何一个的完成</span><br><span class="hljs-variable constant_">DWORD</span> dwMilliseconds <span class="hljs-comment">//等待时间，以毫秒为单位</span><br>);<br></code></pre></td></tr></table></figure><p><strong>可等待的对象列表</strong></p><ul><li>Change notification：变化通知</li><li>Console input：控制台输入</li><li>Events：事件</li><li>Job：作业</li><li>Mutex：互斥信号量</li><li>Process：进程</li><li><strong>Semaphore：计数信号量</strong> （<em>本次主要用到）</em></li><li><strong>Thread：线程</strong> <em>（本次主要用到）</em></li><li>Wait-able timer：定时器</li></ul><h4 id="如何去等待一个对象"><a href="#如何去等待一个对象" class="headerlink" title="如何去等待一个对象"></a>如何去等待一个对象</h4><ol><li><p>我们需要立一个Flag，用于在主子线程之间相互告知运行状态。</p></li><li><p>Flag &#x3D; 信号量</p></li><li><p>创建一个信号量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">hHandle1 = <span class="hljs-title class_">CreateSemaphore</span>(<span class="hljs-variable constant_">NULL</span>, <span class="hljs-number">0</span>，<span class="hljs-number">1</span>, <span class="hljs-string">&quot;SemaphoreName1&quot;</span>);<span class="hljs-comment">//创建一个信号量（安全标识符，信号量初始态，信号量最大值，信号量名称）</span><br></code></pre></td></tr></table></figure></li><li><p>打开一个信号量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">hHandle1 = <span class="hljs-title class_">OpenSemaphore</span>( <span class="hljs-variable constant_">SYNCHRONIZE</span> <span class="hljs-variable constant_">ISEMAPHORE_</span> <span class="hljs-variable constant_">MODIFY_</span> <span class="hljs-variable constant_">STATE</span>, <span class="hljs-variable constant_">NULL</span>,<span class="hljs-string">&quot;SemaphoreName1&quot;</span> );<span class="hljs-comment">//（访问标志，继承标志，信号量名）</span><br></code></pre></td></tr></table></figure></li><li><p>释放信号量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">rc = <span class="hljs-title class_">ReleaseSemaphore</span> (hHandle1, <span class="hljs-number">1</span>, <span class="hljs-variable constant_">NULL</span>)（我们需要释放哪一个信号量，对信号量进行增几的操作，信号量要增加数值地址）;<br></code></pre></td></tr></table></figure></li><li><p>等待单个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">dRes = <span class="hljs-title class_">WaitForSingleObject</span>(hHandle1 , <span class="hljs-variable constant_">INFINITE</span>); <span class="hljs-comment">// 主线程无限期地等待子线程结束（信号量的句柄，如果没有释放无限运行）  如果对操作时长有限制，可在第二个参数设置等待的最大值</span><br></code></pre></td></tr></table></figure></li><li><p>等待多个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">dRes = <span class="hljs-title class_">WaitForMultiple0</span>bjects(<span class="hljs-number">3</span>, hHandles, <span class="hljs-number">1</span>, <span class="hljs-variable constant_">INFINITE</span>); <span class="hljs-comment">//第三个参数为1或true时，等待数组中所有对象完成，为0或者false时满足一个任务结束就可继续执行</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="三、实验内容"><a href="#三、实验内容" class="headerlink" title="三、实验内容"></a>三、实验内容</h3><p><strong>实验一 线程的同步之等待单个对象</strong><br>子线程 主线程 用于制作麻辣香锅，制作用时5秒 等待子线程执行完毕，打印“麻辣香锅上菜完毕，请开动吧！”</p><p><strong>实验二 线程的同步之等待多个对象</strong></p><p>子线程1 子线程2 子线程3 主线程 用于制作麻辣香锅，制作用时5秒 用于制作什锦菇，制作用时3秒 用于制作米饭，制作用时6秒 等待多个子线程执行完毕，打印”所有菜品上菜完毕，请开动吧！“</p><h4 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h4><p>能正确使用等待对象、WaitForSingleObject（）或WaitForMultipleObject（)及信号量对象CreateSemaphore（）、OpenSemaphore（）、ReleaseSemaphore（）等系统调用，进一步理解线程的同步。</p><h4 id="实验指导"><a href="#实验指导" class="headerlink" title="实验指导"></a>实验指导</h4><p>1.在Microsoft visual C++6.0环境下建立一个MFC支持的控制台文件，编写C程序。<br>2.在程序中使用CreateSemaphore（NULL，0，1，”SemaphoreName1”）创建一个名为“SemaphoreName1”的信号量，信号量的初始值为0。<br>之后使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">OpenSemaphore</span>（<span class="hljs-variable constant_">SYNCHRONIZE</span>|<span class="hljs-variable constant_">SEMAPHORE_MODIFY_STARTE</span>,<span class="hljs-variable constant_">NULL</span>, ”<span class="hljs-title class_">SemaphoreName1</span>）<br></code></pre></td></tr></table></figure><p>打开该信号量，这里访问标志使用“SYNCHRONIZE|SEMAPHORE_MODIFY_STARTE”，<br>以便之后可以使用WaitForSingleObject（）等待该信号量及使用ReleaseSemaphore（）释放该信号量，然后创建一个子线程。</p><p>3.主线程创建子线程后调用WaitForSingleObject（hHandle1，INFINITE），这里等待时间设置为INFINITE表示一直等待下去，直到该信号量被唤醒为止。</p><p>4.子线程结束，调用ReleaseSemaphore（hHandle1，1，NULL）释放信号量，使信号量的值加1。</p><h4 id="源程序"><a href="#源程序" class="headerlink" title="源程序"></a>源程序</h4><p><strong>实验一主要内容及代码</strong></p><ul><li>创建一个信号量并打开，创建一个线程，主线程等待子线程结束，释放信号量。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">static</span> <span class="hljs-variable constant_">HANDLE</span> hHandle1 = <span class="hljs-variable constant_">NULL</span>;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">chef</span>(<span class="hljs-params"></span>)<br>&#123;<br>    <br><span class="hljs-title function_">printf</span>(<span class="hljs-string">&quot;麻辣香锅开始制作，预计等待时间5秒。\n&quot;</span>);<br><span class="hljs-title class_">Sleep</span>(<span class="hljs-number">5000</span>);<br><span class="hljs-title function_">printf</span>(<span class="hljs-string">&quot;麻辣香锅制作完成！\n&quot;</span>);<br><br><span class="hljs-variable constant_">BOOL</span> rc;<br><span class="hljs-variable constant_">DWORD</span> err;<br><br>rc = <span class="hljs-title class_">ReleaseSemaphore</span>(hHandle1,<span class="hljs-number">1</span>,<span class="hljs-variable constant_">NULL</span>);<br>err = <span class="hljs-title class_">GetLastError</span>();<br><br><span class="hljs-title function_">printf</span>(<span class="hljs-string">&quot;ReleaseSemaphore err=%d\n&quot;</span>,err);<br><span class="hljs-keyword">if</span>(rc == <span class="hljs-number">0</span>)&#123;<br>    <br><span class="hljs-title function_">printf</span>(<span class="hljs-string">&quot;Semaphore Release Fail!\n&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <br><span class="hljs-title function_">printf</span>(<span class="hljs-string">&quot;Semaphore Release Success! rc=%d\n&quot;</span>,rc);<br>&#125;<br>&#125;<br><br><br>int <span class="hljs-title function_">_tmain</span>(<span class="hljs-params">int argc, TCHAR* argv[], TCHAR* envp[]</span>)<br>&#123;<br>    <br><br>int nRetCode = <span class="hljs-number">0</span>;<br><br><span class="hljs-variable constant_">DWORD</span> dRes,err;<br><br>hHandle1 = <span class="hljs-title class_">CreateSemaphore</span>(<span class="hljs-variable constant_">NULL</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&quot;SemaphoreName1&quot;</span>);<span class="hljs-comment">//创建一个信号量</span><br><span class="hljs-keyword">if</span>(hHandle1 == <span class="hljs-variable constant_">NULL</span>)&#123;<br>    <br><span class="hljs-title function_">printf</span>(<span class="hljs-string">&quot;Semaphore Create Fail!\n&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <br><span class="hljs-title function_">printf</span>(<span class="hljs-string">&quot;Semaphore Create Success!\n&quot;</span>);<br>&#125;<br><br>hHandle1 = <span class="hljs-title class_">OpenSemaphore</span>(<span class="hljs-variable constant_">SYNCHRONIZE</span>|<span class="hljs-variable constant_">SEMAPHORE_MODIFY_STATE</span>,<br><span class="hljs-variable constant_">NULL</span>,<br><span class="hljs-string">&quot;SemaphoreName1&quot;</span>);<br><span class="hljs-keyword">if</span>(hHandle1 == <span class="hljs-variable constant_">NULL</span>)&#123;<br>    <br><span class="hljs-title function_">printf</span>(<span class="hljs-string">&quot;Semaphor Open Fail!\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <br><span class="hljs-title function_">printf</span>(<span class="hljs-string">&quot;Semaphor Open Success!\n&quot;</span>);<br>&#125;<br><br><span class="hljs-variable constant_">HANDLE</span> handle1 = <span class="hljs-variable constant_">NULL</span>;<br><span class="hljs-variable constant_">DWORD</span> <span class="hljs-title class_">ThreadID1</span> = <span class="hljs-variable constant_">NULL</span>;<br><br>handle1 = <span class="hljs-title class_">CreateThread</span>((<span class="hljs-variable constant_">LPSECURITY_ATTRIBUTES</span>) <span class="hljs-variable constant_">NULL</span>,<br><span class="hljs-number">0</span>,<br>(<span class="hljs-variable constant_">LPTHREAD_START_ROUTINE</span>) chef,<br>(<span class="hljs-variable constant_">LPVOID</span>) <span class="hljs-variable constant_">NULL</span>,<br><span class="hljs-number">0</span>,<br>&amp;<span class="hljs-title class_">ThreadID1</span>);<br><br>dRes = <span class="hljs-title class_">WaitForSingleObject</span>(hHandle1,<span class="hljs-variable constant_">INFINITE</span>);<br><br>err = <span class="hljs-title class_">GetLastError</span>();<br><br><span class="hljs-keyword">if</span>(err == <span class="hljs-number">0</span>)&#123;<br>    <br><span class="hljs-title function_">printf</span>(<span class="hljs-string">&quot;麻辣香锅上菜完毕，请开动吧。\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <br><span class="hljs-title function_">printf</span>(<span class="hljs-string">&quot;WaitForSingleObject err = %d\n&quot;</span>,err);<br>&#125;<br><br><span class="hljs-keyword">return</span> nRetCode;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>效果图</strong><br><img src="/../images/56e1d34c-0c4a-4f71-907f-71ca2ee11143.png" alt="在这里插入图片描述"></p><p><strong>实验二主要内容及代码</strong></p><ul><li>创建三个线程，当三个线程都执行完毕时，执行主线程<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">void</span> <span class="hljs-title function_">chef</span>(<span class="hljs-params">int meal_code</span>)<br>&#123;<br>    <br><br><span class="hljs-keyword">if</span>(meal_code == <span class="hljs-number">0</span>)&#123;<br>    <br><span class="hljs-title class_">Sleep</span>(<span class="hljs-number">5000</span>);<br><span class="hljs-title function_">printf</span>(<span class="hljs-string">&quot;麻辣香锅制作完成！\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(meal_code == <span class="hljs-number">1</span>)&#123;<br>    <br><span class="hljs-title class_">Sleep</span>(<span class="hljs-number">3000</span>);<br><span class="hljs-title function_">printf</span>(<span class="hljs-string">&quot;什锦菇制作完成！\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(meal_code == <span class="hljs-number">2</span>)&#123;<br>    <br><span class="hljs-title class_">Sleep</span>(<span class="hljs-number">6000</span>);<br><span class="hljs-title function_">printf</span>(<span class="hljs-string">&quot;米饭制作完成！\n&quot;</span>);<br>&#125;<br><br>&#125;<br><br><br>int <span class="hljs-title function_">_tmain</span>(<span class="hljs-params">int argc, TCHAR* argv[], TCHAR* envp[]</span>)<br>&#123;<br>    <br><br>int nRetCode = <span class="hljs-number">0</span>;<br><br><span class="hljs-variable constant_">DWORD</span> dRes,err;<br><br><span class="hljs-variable constant_">HANDLE</span> handle1 = <span class="hljs-variable constant_">NULL</span>;<br><span class="hljs-variable constant_">HANDLE</span> handle2 = <span class="hljs-variable constant_">NULL</span>;<br><span class="hljs-variable constant_">HANDLE</span> handle3 = <span class="hljs-variable constant_">NULL</span>;<br><br><span class="hljs-variable constant_">DWORD</span> <span class="hljs-title class_">ThreadID1</span> = <span class="hljs-variable constant_">NULL</span>;<br><span class="hljs-variable constant_">DWORD</span> <span class="hljs-title class_">ThreadID2</span> = <span class="hljs-variable constant_">NULL</span>;<br><span class="hljs-variable constant_">DWORD</span> <span class="hljs-title class_">ThreadID3</span> = <span class="hljs-variable constant_">NULL</span>;<br><br>int a = <span class="hljs-number">0</span>;<br>int b = <span class="hljs-number">1</span>;<br>int c = <span class="hljs-number">2</span>;<br><br>handle1 = <span class="hljs-title class_">CreateThread</span>((<span class="hljs-variable constant_">LPSECURITY_ATTRIBUTES</span>) <span class="hljs-variable constant_">NULL</span>,<br><span class="hljs-number">0</span>,<br>(<span class="hljs-variable constant_">LPTHREAD_START_ROUTINE</span>) chef,<br>(<span class="hljs-variable constant_">LPVOID</span>) a,<br><span class="hljs-number">0</span>,<br>&amp;<span class="hljs-title class_">ThreadID1</span>);<br><br>handle2 = <span class="hljs-title class_">CreateThread</span>((<span class="hljs-variable constant_">LPSECURITY_ATTRIBUTES</span>) <span class="hljs-variable constant_">NULL</span>,<br><span class="hljs-number">0</span>,<br>(<span class="hljs-variable constant_">LPTHREAD_START_ROUTINE</span>) chef,<br>(<span class="hljs-variable constant_">LPVOID</span>) b,<br><span class="hljs-number">0</span>,<br>&amp;<span class="hljs-title class_">ThreadID2</span>);<br><br>handle3 = <span class="hljs-title class_">CreateThread</span>((<span class="hljs-variable constant_">LPSECURITY_ATTRIBUTES</span>) <span class="hljs-variable constant_">NULL</span>,<br><span class="hljs-number">0</span>,<br>(<span class="hljs-variable constant_">LPTHREAD_START_ROUTINE</span>) chef,<br>(<span class="hljs-variable constant_">LPVOID</span>) c,<br><span class="hljs-number">0</span>,<br>&amp;<span class="hljs-title class_">ThreadID3</span>);<br><br><span class="hljs-variable constant_">HANDLE</span> hHandles[<span class="hljs-number">3</span>];<br>hHandles[<span class="hljs-number">0</span>] = handle1;<br>hHandles[<span class="hljs-number">1</span>] = handle2;<br>hHandles[<span class="hljs-number">2</span>] = handle3;<br><br>dRes = <span class="hljs-title class_">WaitForMultipleObjects</span>(<span class="hljs-number">3</span>,hHandles,<span class="hljs-number">0</span>,<span class="hljs-variable constant_">INFINITE</span>);<br><br>err = <span class="hljs-title class_">GetLastError</span>();<br><br><span class="hljs-keyword">if</span>(err == <span class="hljs-number">0</span>)&#123;<br>    <br><span class="hljs-title function_">printf</span>(<span class="hljs-string">&quot;所有菜品上菜完毕，请开动吧。\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <br><span class="hljs-title function_">printf</span>(<span class="hljs-string">&quot;WaitForSingleObject err = %d\n&quot;</span>,err);<br>&#125;<br><br><span class="hljs-keyword">return</span> nRetCode;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>效果图</strong><br><img src="/../images/b98bdea7-4a78-4795-a55d-49ff2e963d84.png" alt="在这里插入图片描述"><br>但是当我们的选择等待的对象为任意一个，即第三个参数为0时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">dRes = <span class="hljs-title class_">WaitForMultipleObjects</span>(<span class="hljs-number">3</span>,hHandles,<span class="hljs-number">0</span>,<span class="hljs-variable constant_">INFINITE</span>);<br></code></pre></td></tr></table></figure><p><strong>效果图为：</strong><br><img src="/../images/d1b0d65d-7900-46f6-94db-c01fa5a0b819.png" alt="在这里插入图片描述"></p><h3 id="四、实验总结"><a href="#四、实验总结" class="headerlink" title="四、实验总结"></a>四、实验总结</h3><p>实验完成了主、子线程的同步，主线程创建子线程后，主线程塞，让子线程先执行，等子线程执行完后，由子线程唤醒主线程。是使我们了解如何使用使用等待对象WaitForSingleObject（）或WaitForMultipleObjects（)及信号量对象CreateSemaphore（）、OpenSemaphore（）、ReleaseSemaphore（）等系统调用，进一步理解线程的同步。</p>]]></content>
    
    
    <categories>
      
      <category>其它</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>螺旋矩阵——蓝桥杯模拟题</title>
    <link href="/2020/04/18/%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5%E2%80%94%E2%80%94%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A8%A1%E6%8B%9F%E9%A2%98/"/>
    <url>/2020/04/18/%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5%E2%80%94%E2%80%94%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A8%A1%E6%8B%9F%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>问题描述</p><p>对于一个 n 行 m 列的表格，我们可以使用螺旋的方式给表格依次填上正整数，我们称填好的表格为一个螺旋矩阵。<br>例如，一个 4 行 5 列的螺旋矩阵如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span> <span class="hljs-number">5</span><br><span class="hljs-number">14</span> <span class="hljs-number">15</span> <span class="hljs-number">16</span> <span class="hljs-number">17</span> <span class="hljs-number">6</span><br><span class="hljs-number">13</span> <span class="hljs-number">20</span> <span class="hljs-number">19</span> <span class="hljs-number">18</span> <span class="hljs-number">7</span><br><span class="hljs-number">12</span> <span class="hljs-number">11</span> <span class="hljs-number">10</span>  <span class="hljs-number">9</span> <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>输入格式</p><p>输入的第一行包含两个整数 n, m，分别表示螺旋矩阵的行数和列数。<br>第二行包含两个整数 r, c，表示要求的行号和列号。</p><p>输出格式</p><p>输出一个整数，表示螺旋矩阵中第 r 行第 c 列的元素的值。</p><p>样例输入</p><p>4 5<br>2 2</p><p>样例输出</p><p>15</p><p>评测用例规模与约定</p><p>对于 30% 的评测用例，2 &lt;&#x3D; n, m &lt;&#x3D; 20。<br>对于 70% 的评测用例，2 &lt;&#x3D; n, m &lt;&#x3D; 100。<br>对于所有评测用例，2 &lt;&#x3D; n, m &lt;&#x3D; 1000，1 &lt;&#x3D; r &lt;&#x3D; n，1 &lt;&#x3D; c &lt;&#x3D; m。</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>我们只需要知道某个特定位置的值，所以我们并不需要建立二维数组去存储每一个值。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>按照矩阵螺旋的方向去遍历每一个行列的坐标，直到找到我们想要的坐标，然后输出相对应的值。</p><p>利用for循环遍历行，列，行，列，并且使用 k 表示当前位置的值。</p><h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Scanner</span>;<br><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <br>public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>    <br><br><span class="hljs-title class_">Scanner</span> scanner = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(<span class="hljs-title class_">System</span>.<span class="hljs-property">in</span>);<br><br>int n,m,r,c;  <br>int i,j,k;<br>int flag1,flag2;<br>n = scanner.<span class="hljs-title function_">nextInt</span>();<br>m = scanner.<span class="hljs-title function_">nextInt</span>();<br>r = scanner.<span class="hljs-title function_">nextInt</span>();<br>c = scanner.<span class="hljs-title function_">nextInt</span>();<br>scanner.<span class="hljs-title function_">close</span>();<br><br>flag1 = n;<span class="hljs-comment">//flag1用来控制行数范围</span><br>flag2 = m;<span class="hljs-comment">//flag2用来控制列数范围</span><br><br><br><span class="hljs-comment">//k表示当前位置的值</span><br><span class="hljs-comment">//i表示当前所在行</span><br><span class="hljs-comment">//j表示当前所在列</span><br><span class="hljs-keyword">for</span> (k = <span class="hljs-number">1</span>, i=<span class="hljs-number">1</span>, j=<span class="hljs-number">1</span>; k &lt;= n*m ; ) &#123;<br>    <br><span class="hljs-keyword">for</span>( ; j &lt;= flag2; j++) &#123;<br>       <span class="hljs-comment">//行从左向右开始遍历</span><br><span class="hljs-keyword">if</span>( (i == r) &amp;&amp; (j == c)) &#123;<br>    <br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(k);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>k++;<br>&#125;<br>j--;<br><span class="hljs-keyword">for</span>(i = i+<span class="hljs-number">1</span> ; i &lt;= flag1; i++) &#123;<br>    <span class="hljs-comment">//列从上向下开始遍历</span><br><span class="hljs-keyword">if</span>( (i == r) &amp;&amp; (j == c)) &#123;<br>    <br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(k);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>k++;<br>&#125;<br>i--;<br><span class="hljs-keyword">for</span>(j = j-<span class="hljs-number">1</span>; j &gt; m-flag2 ; j--) &#123;<br>    <span class="hljs-comment">//行从右向左开始遍历</span><br><span class="hljs-keyword">if</span>( (i == r) &amp;&amp; (j == c)) &#123;<br>    <br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(k);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>k++;<br>&#125;<br>j++;<br><span class="hljs-keyword">for</span>(i = i-<span class="hljs-number">1</span>; i &gt; n-flag1+<span class="hljs-number">1</span>; i--) &#123;<br>    <span class="hljs-comment">//列从下向上开始遍历</span><br><span class="hljs-keyword">if</span>( (i == r) &amp;&amp; (j == c)) &#123;<br>    <br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(k);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>k++;<br>&#125;<br>i++;<br>j++;<br>flag1--;<br>flag2--;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><p>因为写这篇博客的时候还不知道这题过没过，仅测试了部分数据，如果问题，call me</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线程的创建与撤销 c++</title>
    <link href="/2020/04/18/%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E6%92%A4%E9%94%80%20c++/"/>
    <url>/2020/04/18/%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E6%92%A4%E9%94%80%20c++/</url>
    
    <content type="html"><![CDATA[<h2 id="线程的创建与撤销"><a href="#线程的创建与撤销" class="headerlink" title="线程的创建与撤销"></a>线程的创建与撤销</h2><h3 id="一、目的"><a href="#一、目的" class="headerlink" title="一、目的"></a>一、目的</h3><p>(1)熟悉windows系统提供的线程创建与撤销系统调用.<br>(2)掌握windows系统环境下线程的创建与撤销方法.</p><h3 id="二、准备"><a href="#二、准备" class="headerlink" title="二、准备"></a>二、准备</h3><h5 id="1-线程的创建"><a href="#1-线程的创建" class="headerlink" title="1. 线程的创建"></a>1. 线程的创建</h5><p>CeateThread()完成线程的创建.它在调用进程的地址空间上创建一个线程,执行指定的函数,并返回新建立的线程的句柄.<br>原型:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">HANDLE</span> <span class="hljs-title class_">CeateThread</span>(<br><span class="hljs-variable constant_">LPSECURITY_ATTRIBUTES</span> lpThreadAttributes,<br><span class="hljs-variable constant_">DWORD</span> dwStackSize,<br><span class="hljs-variable constant_">LPSECURITY_START_ROUTINE</span> lpStartAddress,<br><span class="hljs-variable constant_">LPVOID</span> lpparameter,<br><span class="hljs-variable constant_">DWORD</span> dwCreationFlags,<br><span class="hljs-variable constant_">LPDWORD</span> lpThreadId<br>);<br></code></pre></td></tr></table></figure><p>参数说明:</p><ol><li>lpThreadAttributes:为线程指定安全属性.为NULL时,线程得到一个默认的安全描述符.</li><li>dwStackSize:线程堆栈的大小.其值为0时,其大小与调用该线程的线程堆栈大小相同.</li><li>lpStartAddress:指定线程要执行的函数.</li><li>lpparameter:函数中要传递的参数.</li><li>dwCreationFlags:指定线程创建后所处的状态.若为CRRATE_SUSPENDED,表示创建后出于挂起状态,用ResumeThread()激活线程才可以执行.若该值为0，表示线程创建后立即执行.</li><li>lpThreadId:用一个32位的变量接受系统返回的线程标识符.若该值设为NULL,系统不返回线程标识符.<br>返回值:<br>如果线程创建成功,将返回线程的句柄;如果失败,系统返回NULL,可以调用函数GetLastError查询失败的原因.<br>用法举例:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">static</span> <span class="hljs-variable constant_">HANDLE</span> hHandle1=<span class="hljs-variable constant_">NULL</span>; <span class="hljs-comment">//用于存储线程返回句柄的变量</span><br><span class="hljs-variable constant_">DWORD</span> dwThreadID1;           <span class="hljs-comment">//用于存储线程标识符的变量</span><br><span class="hljs-comment">//创建一个名为ThreadName1的线程</span><br>hHandle1=<span class="hljs-title class_">CeateThread</span>((<span class="hljs-variable constant_">LPSECURITY_ATTRIBUTES</span>)) <span class="hljs-variable constant_">NULL</span><br>                     <span class="hljs-number">0</span>,<br> (<span class="hljs-variable constant_">LPSECURITY_START_ROUTINE</span>)<span class="hljs-title class_">ThreadName1</span>,<br> (<span class="hljs-variable constant_">LPDWORD</span>)<span class="hljs-variable constant_">NULL</span>,<br> <span class="hljs-number">0</span>,&amp;dwThreadID1);<br></code></pre></td></tr></table></figure></li></ol><h5 id="2-撤销线程"><a href="#2-撤销线程" class="headerlink" title="2. 撤销线程"></a>2. 撤销线程</h5><p>ExitThread()用于撤销当前进程.<br>原型:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">VOID</span> <span class="hljs-title class_">ExitThread</span>(<br><span class="hljs-variable constant_">DWORD</span> dwExitCode);   <span class="hljs-comment">//线程返回码</span><br></code></pre></td></tr></table></figure><p>参数说明:<br>dwExitCode:指定线程返回码,可以调用GetExitCodeThread()查询返回码的含义.<br>返回值:<br>该函数没有返回值.<br>用法举例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">ExitThread</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><h5 id="3-终止线程"><a href="#3-终止线程" class="headerlink" title="3.终止线程"></a>3.终止线程</h5><p>TerminateThread()用于终止当前线程.该函数与ExitThread()的区别在于,ExitThread()在撤销线程时将该线程所拥有的资源全部归还给系统,而TerminateThread()不归还资源.<br>原型:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">BOOL</span> <span class="hljs-title class_">TerminateThread</span>(<br><span class="hljs-variable constant_">HANDLE</span> hHandle,       <span class="hljs-comment">//线程句柄</span><br><span class="hljs-variable constant_">DWORD</span> dwExitCode);    <span class="hljs-comment">//线程返回码</span><br></code></pre></td></tr></table></figure><p>参数说明:<br>(1)hThread:要终止线程的线程句柄.<br>(2)dwExitCode:指定线程返回码,可以调用GetExitCodeThread()查询返回码的含义.<br>返回值:<br>函数调用成功,将返回一个非0值;若失败,返回0，可以调用函数GetLastError()查询失败的原因.</p><h5 id="4-挂起线程"><a href="#4-挂起线程" class="headerlink" title="4.挂起线程"></a>4.挂起线程</h5><p>Sleep()用于挂起当前正在执行的线程.<br>原型:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">VOID</span> <span class="hljs-title class_">Sleep</span>(<span class="hljs-variable constant_">DWORD</span> dwMilliseconds);<br></code></pre></td></tr></table></figure><p>参数说明:<br>dwMilliseconds;指定挂起时间,单位为ms(毫秒).<br>返回值:<br>该函数没有返回值.</p><h5 id="5-关闭句柄"><a href="#5-关闭句柄" class="headerlink" title="5.关闭句柄"></a>5.关闭句柄</h5><p>函数CloseHandle()用于关闭已打开的对象的句柄,其作用与释放动态申请的内存空间类似,这样可以释放系统资源,使线程安全运行.<br>原型:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">BOOL</span> <span class="hljs-title class_">CloseHandle</span>(<span class="hljs-variable constant_">HANDLE</span> hObject);<br></code></pre></td></tr></table></figure><p>参数说明:<br>hObject:已打开对象的句柄.<br>返回值:<br>如果函数调用成功,则返回值为非0值;如果函数调用失败,则返回值为0.若要得到更多的错误信息,调用函数GetLastError()查询.</p><h3 id="三、内容"><a href="#三、内容" class="headerlink" title="三、内容"></a>三、内容</h3><p>使用系统调用CreatThread()创建一个子线程,并在子线程中显示;Thread is Running!.为了能让用户清楚地看到线程的运行情况,使用Sleep()使线程挂起5s,之后使用ExitThread(0)撤销进程.</p><h4 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h4><p>能正确使用CreatThread(),ExitThread()及Sleep()等系统调用,进一步理解进程与线程理论.</p><h4 id="指导"><a href="#指导" class="headerlink" title="指导"></a>指导</h4><p>本实验在WindowsXP,Microsoft Visual C++ 6.0环境下实现,利用Windows SDK提供的API完成程序的功能.实验在Windows XP环境下安装由于WindowsXP,Microsoft Visual C++ 6.0是一个集成开发环境,其中包含了Windows SDK 所有工具和定义,所以安装了WindowsXP,Microsoft Visual C++ 6.0后不用特意安装SDK.试验中所有的API是操作系统提供的用来进行应用程序开发的系统功能接口.</p><ol><li>首先启动安装好的,Microsoft Visual C++ 6.0.</li><li>在,Microsoft Visual C++ 6.0环境下选择File-&gt;new命令,然后在Project选项卡中选择Win32 Console Application建立一个控制台工程文件.</li><li>由于CreatThread()等函数是Microsoft Windows操作系统的系统调用,因此,在下图中选择An application that supports MFC,之后单击Finish按钮.</li></ol><p><img src="/../images/3a56ea2c-e9ac-4e39-8510-a4bf2277cdac.png" alt="在这里插入图片描述"></p><ol><li>创建一个单线程操作并观看结果<br><img src="/../images/8b825336-db16-432a-af97-2a961f3c9dfc.png" alt="在这里插入图片描述"><br><img src="/../images/a38b8e46-8195-4b9c-97a0-5476671a1daa.png" alt="在这里插入图片描述"></li><li>创建一个多线程操作，并观看结果<br><img src="/../images/3febb261-ea76-43e1-8974-57491f16d10f.png" alt="在这里插入图片描述"><br><img src="/../images/a2173715-7f80-4543-97a3-75fa46bb6377.png" alt="在这里插入图片描述"></li></ol><h4 id="源程序"><a href="#源程序" class="headerlink" title="源程序"></a>源程序</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// test1.cpp : Defines the entry point for the console application.</span><br><span class="hljs-comment">//</span><br><br>#include <span class="hljs-string">&quot;stdafx.h&quot;</span><br>#include <span class="hljs-string">&quot;test1.h&quot;</span><br><br>#ifdef _DEBUG<br>#define <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">DEBUG_NEW</span><br>#undef <span class="hljs-variable constant_">THIS_FILE</span><br><span class="hljs-keyword">static</span> char <span class="hljs-variable constant_">THIS_FILE</span>[] = __FILE__;<br>#endif<br><br>/<br><span class="hljs-comment">// The one and only application object</span><br><br><span class="hljs-title class_">CWinApp</span> theApp;<br><br>using namespace std;<br><br><br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">eatApple</span>(<span class="hljs-params">int apple_number</span>)<br>&#123;<br>    <br><span class="hljs-title class_">Sleep</span>((<span class="hljs-number">3</span>-apple_number)*<span class="hljs-number">1000</span>);<br><span class="hljs-title function_">printf</span>(<span class="hljs-string">&quot;i&#x27;m eating apple #%d.\n&quot;</span>, apple_number);<br>&#125;<br><br><br>int <span class="hljs-title function_">_tmain</span>(<span class="hljs-params">int argc, TCHAR* argv[], TCHAR* envp[]</span>)<br>&#123;<br>    <br><span class="hljs-variable constant_">HANDLE</span> handle1 = <span class="hljs-variable constant_">NULL</span>;<br><span class="hljs-variable constant_">HANDLE</span> handle2 = <span class="hljs-variable constant_">NULL</span>;<br><span class="hljs-variable constant_">HANDLE</span> handle3 = <span class="hljs-variable constant_">NULL</span>;<br><span class="hljs-variable constant_">DWORD</span> <span class="hljs-title class_">ThreadID1</span> = <span class="hljs-variable constant_">NULL</span>;<br><span class="hljs-variable constant_">DWORD</span> <span class="hljs-title class_">ThreadID2</span> = <span class="hljs-variable constant_">NULL</span>;<br><span class="hljs-variable constant_">DWORD</span> <span class="hljs-title class_">ThreadID3</span> = <span class="hljs-variable constant_">NULL</span>;<br><br>int nRetCode;<br><br>int a = <span class="hljs-number">0</span>;<br>int b = <span class="hljs-number">1</span>;<br>int c = <span class="hljs-number">2</span>;<br><br>handle1 = <span class="hljs-title class_">CreateThread</span>((<span class="hljs-variable constant_">LPSECURITY_ATTRIBUTES</span>) <span class="hljs-variable constant_">NULL</span>,<br><span class="hljs-number">0</span>,<br>(<span class="hljs-variable constant_">LPTHREAD_START_ROUTINE</span>) eatApple,<br>(<span class="hljs-variable constant_">LPVOID</span>) a,<br><span class="hljs-number">0</span>,<br>&amp;<span class="hljs-title class_">ThreadID1</span>);<br><br>handle2 = <span class="hljs-title class_">CreateThread</span>((<span class="hljs-variable constant_">LPSECURITY_ATTRIBUTES</span>) <span class="hljs-variable constant_">NULL</span>,<br><span class="hljs-number">0</span>,<br>(<span class="hljs-variable constant_">LPTHREAD_START_ROUTINE</span>) eatApple,<br>(<span class="hljs-variable constant_">LPVOID</span>) b,<br><span class="hljs-number">0</span>,<br>&amp;<span class="hljs-title class_">ThreadID2</span>);<br><br>handle3 = <span class="hljs-title class_">CreateThread</span>((<span class="hljs-variable constant_">LPSECURITY_ATTRIBUTES</span>) <span class="hljs-variable constant_">NULL</span>,<br><span class="hljs-number">0</span>,<br>(<span class="hljs-variable constant_">LPTHREAD_START_ROUTINE</span>) eatApple,<br>(<span class="hljs-variable constant_">LPVOID</span>) c,<br><span class="hljs-number">0</span>,<br>&amp;<span class="hljs-title class_">ThreadID3</span>);<br><span class="hljs-title class_">Sleep</span>(<span class="hljs-number">10000</span>);<br><span class="hljs-keyword">return</span> nRetCode;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p>在Windows系统中进程是资源的拥有者,线程是系统调用的单位.进程创建后,其主线程也随即被创建.但是单线程只能执行完一个之后再执行另外一个线程，而多线程在一定程度上是多个线程一起执行的。</p>]]></content>
    
    
    <categories>
      
      <category>其它</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>201912-1报数问题</title>
    <link href="/2020/04/18/201912-1%E6%8A%A5%E6%95%B0%E9%97%AE%E9%A2%98/"/>
    <url>/2020/04/18/201912-1%E6%8A%A5%E6%95%B0%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>哈哈哈，决定9月份考一下CCF认证，不知道能考50分还是100分，开始练习啦。</p><h3 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h3><p><img src="https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403161543913.png" alt="在这里插入图片描述"><br><img src="https://gitee.com/fuyingyou/picgo/raw/master/img_algorithm/202403161543914.png" alt="在这里插入图片描述"></p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>题目中说了不计入被跳过的数，也就是虽然你要报n个数，但是你最后报的数一定是大于等于n的。比如题目说明n小于等于666，但加上跳过的数字，其实报的数已经超过了700。所以我们需要考虑到百位甚至千位为7的情况。</p><h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Scanner</span>;<br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <br>public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>    <br><br><span class="hljs-title class_">Scanner</span> scanner = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(<span class="hljs-title class_">System</span>.<span class="hljs-property">in</span>);<br>int n;<br>n = scanner.<span class="hljs-title function_">nextInt</span>();<br>scanner.<span class="hljs-title function_">close</span>();<br><br>int[] arr = <span class="hljs-keyword">new</span> int[<span class="hljs-number">5</span>];<span class="hljs-comment">//用来记录四个人跳过的次数</span><br><span class="hljs-keyword">for</span>(int i=<span class="hljs-number">0</span>; i&lt;arr.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-comment">//初始化为0</span><br>arr[i] = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (int i = <span class="hljs-number">1</span>,flag=<span class="hljs-number">0</span>; flag &lt;n; i++) &#123;<br>    <span class="hljs-comment">//flag记录有效报数，即没有跳过的个数</span><br><span class="hljs-keyword">if</span>(<span class="hljs-title class_">ContainSeven</span>(i)) &#123;<br>    <span class="hljs-comment">//如果跳过</span><br>arr[i%<span class="hljs-number">4</span>]++;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">//如果不跳过，那么有效报数次数加一</span><br>flag++;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> (int i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">3</span>; i++) &#123;<br>    <span class="hljs-comment">//打印甲乙丙丁</span><br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(arr[i]);<br>&#125;<br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(arr[<span class="hljs-number">0</span>]);<br>&#125;<br><br>public <span class="hljs-keyword">static</span> <span class="hljs-title class_">Boolean</span> <span class="hljs-title class_">ContainSeven</span>(int num)&#123;<br>    <span class="hljs-comment">//判断是否需要跳过函数，参数为当前数字</span><br>    <span class="hljs-keyword">if</span>(num%<span class="hljs-number">7</span>==<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span>&#123;<br>    <br>    int t=num;<br>    <span class="hljs-keyword">while</span>(t&gt;<span class="hljs-number">0</span>)<br>    &#123;<br>    <br>    <span class="hljs-keyword">if</span>(t%<span class="hljs-number">10</span>==<span class="hljs-number">7</span>)<span class="hljs-comment">//含有数字7</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    t/=<span class="hljs-number">10</span>;<br>    &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
